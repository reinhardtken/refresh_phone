// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apk_protomsg.proto

#ifndef PROTOBUF_apk_5fprotomsg_2eproto__INCLUDED
#define PROTOBUF_apk_5fprotomsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace apk {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_apk_5fprotomsg_2eproto();
void protobuf_AssignDesc_apk_5fprotomsg_2eproto();
void protobuf_ShutdownFile_apk_5fprotomsg_2eproto();

class Command;
class CommandProgress;
class CommandResponse;
class OneApk;
class ApkList;
class AdbDevice;
class DevicesList;

// ===================================================================

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline const ::std::string& cmd() const;
  inline void set_cmd(const ::std::string& value);
  inline void set_cmd(const char* value);
  inline void set_cmd(const char* value, size_t size);
  inline ::std::string* mutable_cmd();
  inline ::std::string* release_cmd();
  inline void set_allocated_cmd(::std::string* cmd);

  // required int32 cmd_no = 2;
  inline bool has_cmd_no() const;
  inline void clear_cmd_no();
  static const int kCmdNoFieldNumber = 2;
  inline ::google::protobuf::int32 cmd_no() const;
  inline void set_cmd_no(::google::protobuf::int32 value);

  // required int64 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // repeated string param = 4;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 4;
  inline const ::std::string& param(int index) const;
  inline ::std::string* mutable_param(int index);
  inline void set_param(int index, const ::std::string& value);
  inline void set_param(int index, const char* value);
  inline void set_param(int index, const char* value, size_t size);
  inline ::std::string* add_param();
  inline void add_param(const ::std::string& value);
  inline void add_param(const char* value);
  inline void add_param(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& param() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_param();

  // @@protoc_insertion_point(class_scope:apk.Command)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_cmd_no();
  inline void clear_has_cmd_no();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cmd_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::RepeatedPtrField< ::std::string> param_;
  ::google::protobuf::int32 cmd_no_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_apk_5fprotomsg_2eproto();
  friend void protobuf_AssignDesc_apk_5fprotomsg_2eproto();
  friend void protobuf_ShutdownFile_apk_5fprotomsg_2eproto();

  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// -------------------------------------------------------------------

class CommandProgress : public ::google::protobuf::Message {
 public:
  CommandProgress();
  virtual ~CommandProgress();

  CommandProgress(const CommandProgress& from);

  inline CommandProgress& operator=(const CommandProgress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandProgress& default_instance();

  void Swap(CommandProgress* other);

  // implements Message ----------------------------------------------

  CommandProgress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandProgress& from);
  void MergeFrom(const CommandProgress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline const ::std::string& cmd() const;
  inline void set_cmd(const ::std::string& value);
  inline void set_cmd(const char* value);
  inline void set_cmd(const char* value, size_t size);
  inline ::std::string* mutable_cmd();
  inline ::std::string* release_cmd();
  inline void set_allocated_cmd(::std::string* cmd);

  // required int32 cmd_no = 2;
  inline bool has_cmd_no() const;
  inline void clear_cmd_no();
  static const int kCmdNoFieldNumber = 2;
  inline ::google::protobuf::int32 cmd_no() const;
  inline void set_cmd_no(::google::protobuf::int32 value);

  // required int32 code = 3;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 3;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional int64 time_cost = 4;
  inline bool has_time_cost() const;
  inline void clear_time_cost();
  static const int kTimeCostFieldNumber = 4;
  inline ::google::protobuf::int64 time_cost() const;
  inline void set_time_cost(::google::protobuf::int64 value);

  // repeated string info = 5;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 5;
  inline const ::std::string& info(int index) const;
  inline ::std::string* mutable_info(int index);
  inline void set_info(int index, const ::std::string& value);
  inline void set_info(int index, const char* value);
  inline void set_info(int index, const char* value, size_t size);
  inline ::std::string* add_info();
  inline void add_info(const ::std::string& value);
  inline void add_info(const char* value);
  inline void add_info(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& info() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_info();

  // @@protoc_insertion_point(class_scope:apk.CommandProgress)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_cmd_no();
  inline void clear_has_cmd_no();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_time_cost();
  inline void clear_has_time_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cmd_;
  ::google::protobuf::int32 cmd_no_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int64 time_cost_;
  ::google::protobuf::RepeatedPtrField< ::std::string> info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_apk_5fprotomsg_2eproto();
  friend void protobuf_AssignDesc_apk_5fprotomsg_2eproto();
  friend void protobuf_ShutdownFile_apk_5fprotomsg_2eproto();

  void InitAsDefaultInstance();
  static CommandProgress* default_instance_;
};
// -------------------------------------------------------------------

class CommandResponse : public ::google::protobuf::Message {
 public:
  CommandResponse();
  virtual ~CommandResponse();

  CommandResponse(const CommandResponse& from);

  inline CommandResponse& operator=(const CommandResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommandResponse& default_instance();

  void Swap(CommandResponse* other);

  // implements Message ----------------------------------------------

  CommandResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommandResponse& from);
  void MergeFrom(const CommandResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline const ::std::string& cmd() const;
  inline void set_cmd(const ::std::string& value);
  inline void set_cmd(const char* value);
  inline void set_cmd(const char* value, size_t size);
  inline ::std::string* mutable_cmd();
  inline ::std::string* release_cmd();
  inline void set_allocated_cmd(::std::string* cmd);

  // required int32 cmd_no = 2;
  inline bool has_cmd_no() const;
  inline void clear_cmd_no();
  static const int kCmdNoFieldNumber = 2;
  inline ::google::protobuf::int32 cmd_no() const;
  inline void set_cmd_no(::google::protobuf::int32 value);

  // required int32 code = 3;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 3;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional int64 time_cost = 4;
  inline bool has_time_cost() const;
  inline void clear_time_cost();
  static const int kTimeCostFieldNumber = 4;
  inline ::google::protobuf::int64 time_cost() const;
  inline void set_time_cost(::google::protobuf::int64 value);

  // repeated string info = 5;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 5;
  inline const ::std::string& info(int index) const;
  inline ::std::string* mutable_info(int index);
  inline void set_info(int index, const ::std::string& value);
  inline void set_info(int index, const char* value);
  inline void set_info(int index, const char* value, size_t size);
  inline ::std::string* add_info();
  inline void add_info(const ::std::string& value);
  inline void add_info(const char* value);
  inline void add_info(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& info() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_info();

  // @@protoc_insertion_point(class_scope:apk.CommandResponse)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_cmd_no();
  inline void clear_has_cmd_no();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_time_cost();
  inline void clear_has_time_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cmd_;
  ::google::protobuf::int32 cmd_no_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int64 time_cost_;
  ::google::protobuf::RepeatedPtrField< ::std::string> info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_apk_5fprotomsg_2eproto();
  friend void protobuf_AssignDesc_apk_5fprotomsg_2eproto();
  friend void protobuf_ShutdownFile_apk_5fprotomsg_2eproto();

  void InitAsDefaultInstance();
  static CommandResponse* default_instance_;
};
// -------------------------------------------------------------------

class OneApk : public ::google::protobuf::Message {
 public:
  OneApk();
  virtual ~OneApk();

  OneApk(const OneApk& from);

  inline OneApk& operator=(const OneApk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneApk& default_instance();

  void Swap(OneApk* other);

  // implements Message ----------------------------------------------

  OneApk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneApk& from);
  void MergeFrom(const OneApk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string md5 = 3;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 3;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const char* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string brief = 5;
  inline bool has_brief() const;
  inline void clear_brief();
  static const int kBriefFieldNumber = 5;
  inline const ::std::string& brief() const;
  inline void set_brief(const ::std::string& value);
  inline void set_brief(const char* value);
  inline void set_brief(const char* value, size_t size);
  inline ::std::string* mutable_brief();
  inline ::std::string* release_brief();
  inline void set_allocated_brief(::std::string* brief);

  // optional int32 orderid = 6;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 6;
  inline ::google::protobuf::int32 orderid() const;
  inline void set_orderid(::google::protobuf::int32 value);

  // optional string update_time = 7;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 7;
  inline const ::std::string& update_time() const;
  inline void set_update_time(const ::std::string& value);
  inline void set_update_time(const char* value);
  inline void set_update_time(const char* value, size_t size);
  inline ::std::string* mutable_update_time();
  inline ::std::string* release_update_time();
  inline void set_allocated_update_time(::std::string* update_time);

  // optional string create_time = 8;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 8;
  inline const ::std::string& create_time() const;
  inline void set_create_time(const ::std::string& value);
  inline void set_create_time(const char* value);
  inline void set_create_time(const char* value, size_t size);
  inline ::std::string* mutable_create_time();
  inline ::std::string* release_create_time();
  inline void set_allocated_create_time(::std::string* create_time);

  // required string apk_name = 9;
  inline bool has_apk_name() const;
  inline void clear_apk_name();
  static const int kApkNameFieldNumber = 9;
  inline const ::std::string& apk_name() const;
  inline void set_apk_name(const ::std::string& value);
  inline void set_apk_name(const char* value);
  inline void set_apk_name(const char* value, size_t size);
  inline ::std::string* mutable_apk_name();
  inline ::std::string* release_apk_name();
  inline void set_allocated_apk_name(::std::string* apk_name);

  // required double price = 10;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 10;
  inline double price() const;
  inline void set_price(double value);

  // required int32 type = 11;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 11;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apk.OneApk)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_md5();
  inline void clear_has_md5();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_brief();
  inline void clear_has_brief();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_apk_name();
  inline void clear_has_apk_name();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::std::string* md5_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 orderid_;
  ::std::string* name_;
  ::std::string* brief_;
  ::std::string* update_time_;
  ::std::string* create_time_;
  ::std::string* apk_name_;
  double price_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_apk_5fprotomsg_2eproto();
  friend void protobuf_AssignDesc_apk_5fprotomsg_2eproto();
  friend void protobuf_ShutdownFile_apk_5fprotomsg_2eproto();

  void InitAsDefaultInstance();
  static OneApk* default_instance_;
};
// -------------------------------------------------------------------

class ApkList : public ::google::protobuf::Message {
 public:
  ApkList();
  virtual ~ApkList();

  ApkList(const ApkList& from);

  inline ApkList& operator=(const ApkList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ApkList& default_instance();

  void Swap(ApkList* other);

  // implements Message ----------------------------------------------

  ApkList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ApkList& from);
  void MergeFrom(const ApkList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .apk.CommandResponse head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::apk::CommandResponse& head() const;
  inline ::apk::CommandResponse* mutable_head();
  inline ::apk::CommandResponse* release_head();
  inline void set_allocated_head(::apk::CommandResponse* head);

  // repeated .apk.OneApk apk_list = 2;
  inline int apk_list_size() const;
  inline void clear_apk_list();
  static const int kApkListFieldNumber = 2;
  inline const ::apk::OneApk& apk_list(int index) const;
  inline ::apk::OneApk* mutable_apk_list(int index);
  inline ::apk::OneApk* add_apk_list();
  inline const ::google::protobuf::RepeatedPtrField< ::apk::OneApk >&
      apk_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::apk::OneApk >*
      mutable_apk_list();

  // @@protoc_insertion_point(class_scope:apk.ApkList)
 private:
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::apk::CommandResponse* head_;
  ::google::protobuf::RepeatedPtrField< ::apk::OneApk > apk_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_apk_5fprotomsg_2eproto();
  friend void protobuf_AssignDesc_apk_5fprotomsg_2eproto();
  friend void protobuf_ShutdownFile_apk_5fprotomsg_2eproto();

  void InitAsDefaultInstance();
  static ApkList* default_instance_;
};
// -------------------------------------------------------------------

class AdbDevice : public ::google::protobuf::Message {
 public:
  AdbDevice();
  virtual ~AdbDevice();

  AdbDevice(const AdbDevice& from);

  inline AdbDevice& operator=(const AdbDevice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdbDevice& default_instance();

  void Swap(AdbDevice* other);

  // implements Message ----------------------------------------------

  AdbDevice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdbDevice& from);
  void MergeFrom(const AdbDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string serial_no = 1;
  inline bool has_serial_no() const;
  inline void clear_serial_no();
  static const int kSerialNoFieldNumber = 1;
  inline const ::std::string& serial_no() const;
  inline void set_serial_no(const ::std::string& value);
  inline void set_serial_no(const char* value);
  inline void set_serial_no(const char* value, size_t size);
  inline ::std::string* mutable_serial_no();
  inline ::std::string* release_serial_no();
  inline void set_allocated_serial_no(::std::string* serial_no);

  // optional string state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline const ::std::string& state() const;
  inline void set_state(const ::std::string& value);
  inline void set_state(const char* value);
  inline void set_state(const char* value, size_t size);
  inline ::std::string* mutable_state();
  inline ::std::string* release_state();
  inline void set_allocated_state(::std::string* state);

  // optional string model = 3;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 3;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional string product = 4;
  inline bool has_product() const;
  inline void clear_product();
  static const int kProductFieldNumber = 4;
  inline const ::std::string& product() const;
  inline void set_product(const ::std::string& value);
  inline void set_product(const char* value);
  inline void set_product(const char* value, size_t size);
  inline ::std::string* mutable_product();
  inline ::std::string* release_product();
  inline void set_allocated_product(::std::string* product);

  // optional string device = 5;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 5;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // @@protoc_insertion_point(class_scope:apk.AdbDevice)
 private:
  inline void set_has_serial_no();
  inline void clear_has_serial_no();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_product();
  inline void clear_has_product();
  inline void set_has_device();
  inline void clear_has_device();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* serial_no_;
  ::std::string* state_;
  ::std::string* model_;
  ::std::string* product_;
  ::std::string* device_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_apk_5fprotomsg_2eproto();
  friend void protobuf_AssignDesc_apk_5fprotomsg_2eproto();
  friend void protobuf_ShutdownFile_apk_5fprotomsg_2eproto();

  void InitAsDefaultInstance();
  static AdbDevice* default_instance_;
};
// -------------------------------------------------------------------

class DevicesList : public ::google::protobuf::Message {
 public:
  DevicesList();
  virtual ~DevicesList();

  DevicesList(const DevicesList& from);

  inline DevicesList& operator=(const DevicesList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DevicesList& default_instance();

  void Swap(DevicesList* other);

  // implements Message ----------------------------------------------

  DevicesList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DevicesList& from);
  void MergeFrom(const DevicesList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .apk.CommandResponse head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::apk::CommandResponse& head() const;
  inline ::apk::CommandResponse* mutable_head();
  inline ::apk::CommandResponse* release_head();
  inline void set_allocated_head(::apk::CommandResponse* head);

  // repeated .apk.AdbDevice devices_list = 2;
  inline int devices_list_size() const;
  inline void clear_devices_list();
  static const int kDevicesListFieldNumber = 2;
  inline const ::apk::AdbDevice& devices_list(int index) const;
  inline ::apk::AdbDevice* mutable_devices_list(int index);
  inline ::apk::AdbDevice* add_devices_list();
  inline const ::google::protobuf::RepeatedPtrField< ::apk::AdbDevice >&
      devices_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::apk::AdbDevice >*
      mutable_devices_list();

  // @@protoc_insertion_point(class_scope:apk.DevicesList)
 private:
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::apk::CommandResponse* head_;
  ::google::protobuf::RepeatedPtrField< ::apk::AdbDevice > devices_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_apk_5fprotomsg_2eproto();
  friend void protobuf_AssignDesc_apk_5fprotomsg_2eproto();
  friend void protobuf_ShutdownFile_apk_5fprotomsg_2eproto();

  void InitAsDefaultInstance();
  static DevicesList* default_instance_;
};
// ===================================================================


// ===================================================================

// Command

// required string cmd = 1;
inline bool Command::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_cmd() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    cmd_->clear();
  }
  clear_has_cmd();
}
inline const ::std::string& Command::cmd() const {
  return *cmd_;
}
inline void Command::set_cmd(const ::std::string& value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void Command::set_cmd(const char* value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void Command::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  return cmd_;
}
inline ::std::string* Command::release_cmd() {
  clear_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cmd_;
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Command::set_allocated_cmd(::std::string* cmd) {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (cmd) {
    set_has_cmd();
    cmd_ = cmd;
  } else {
    clear_has_cmd();
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 cmd_no = 2;
inline bool Command::has_cmd_no() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_cmd_no() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_cmd_no() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_cmd_no() {
  cmd_no_ = 0;
  clear_has_cmd_no();
}
inline ::google::protobuf::int32 Command::cmd_no() const {
  return cmd_no_;
}
inline void Command::set_cmd_no(::google::protobuf::int32 value) {
  set_has_cmd_no();
  cmd_no_ = value;
}

// required int64 timestamp = 3;
inline bool Command::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 Command::timestamp() const {
  return timestamp_;
}
inline void Command::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// repeated string param = 4;
inline int Command::param_size() const {
  return param_.size();
}
inline void Command::clear_param() {
  param_.Clear();
}
inline const ::std::string& Command::param(int index) const {
  return param_.Get(index);
}
inline ::std::string* Command::mutable_param(int index) {
  return param_.Mutable(index);
}
inline void Command::set_param(int index, const ::std::string& value) {
  param_.Mutable(index)->assign(value);
}
inline void Command::set_param(int index, const char* value) {
  param_.Mutable(index)->assign(value);
}
inline void Command::set_param(int index, const char* value, size_t size) {
  param_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::add_param() {
  return param_.Add();
}
inline void Command::add_param(const ::std::string& value) {
  param_.Add()->assign(value);
}
inline void Command::add_param(const char* value) {
  param_.Add()->assign(value);
}
inline void Command::add_param(const char* value, size_t size) {
  param_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Command::param() const {
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Command::mutable_param() {
  return &param_;
}

// -------------------------------------------------------------------

// CommandProgress

// required string cmd = 1;
inline bool CommandProgress::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandProgress::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandProgress::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandProgress::clear_cmd() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    cmd_->clear();
  }
  clear_has_cmd();
}
inline const ::std::string& CommandProgress::cmd() const {
  return *cmd_;
}
inline void CommandProgress::set_cmd(const ::std::string& value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void CommandProgress::set_cmd(const char* value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void CommandProgress::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandProgress::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  return cmd_;
}
inline ::std::string* CommandProgress::release_cmd() {
  clear_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cmd_;
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandProgress::set_allocated_cmd(::std::string* cmd) {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (cmd) {
    set_has_cmd();
    cmd_ = cmd;
  } else {
    clear_has_cmd();
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 cmd_no = 2;
inline bool CommandProgress::has_cmd_no() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandProgress::set_has_cmd_no() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandProgress::clear_has_cmd_no() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandProgress::clear_cmd_no() {
  cmd_no_ = 0;
  clear_has_cmd_no();
}
inline ::google::protobuf::int32 CommandProgress::cmd_no() const {
  return cmd_no_;
}
inline void CommandProgress::set_cmd_no(::google::protobuf::int32 value) {
  set_has_cmd_no();
  cmd_no_ = value;
}

// required int32 code = 3;
inline bool CommandProgress::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandProgress::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandProgress::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandProgress::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 CommandProgress::code() const {
  return code_;
}
inline void CommandProgress::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional int64 time_cost = 4;
inline bool CommandProgress::has_time_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandProgress::set_has_time_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandProgress::clear_has_time_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandProgress::clear_time_cost() {
  time_cost_ = GOOGLE_LONGLONG(0);
  clear_has_time_cost();
}
inline ::google::protobuf::int64 CommandProgress::time_cost() const {
  return time_cost_;
}
inline void CommandProgress::set_time_cost(::google::protobuf::int64 value) {
  set_has_time_cost();
  time_cost_ = value;
}

// repeated string info = 5;
inline int CommandProgress::info_size() const {
  return info_.size();
}
inline void CommandProgress::clear_info() {
  info_.Clear();
}
inline const ::std::string& CommandProgress::info(int index) const {
  return info_.Get(index);
}
inline ::std::string* CommandProgress::mutable_info(int index) {
  return info_.Mutable(index);
}
inline void CommandProgress::set_info(int index, const ::std::string& value) {
  info_.Mutable(index)->assign(value);
}
inline void CommandProgress::set_info(int index, const char* value) {
  info_.Mutable(index)->assign(value);
}
inline void CommandProgress::set_info(int index, const char* value, size_t size) {
  info_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandProgress::add_info() {
  return info_.Add();
}
inline void CommandProgress::add_info(const ::std::string& value) {
  info_.Add()->assign(value);
}
inline void CommandProgress::add_info(const char* value) {
  info_.Add()->assign(value);
}
inline void CommandProgress::add_info(const char* value, size_t size) {
  info_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandProgress::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandProgress::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// CommandResponse

// required string cmd = 1;
inline bool CommandResponse::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommandResponse::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommandResponse::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommandResponse::clear_cmd() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    cmd_->clear();
  }
  clear_has_cmd();
}
inline const ::std::string& CommandResponse::cmd() const {
  return *cmd_;
}
inline void CommandResponse::set_cmd(const ::std::string& value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void CommandResponse::set_cmd(const char* value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void CommandResponse::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandResponse::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  return cmd_;
}
inline ::std::string* CommandResponse::release_cmd() {
  clear_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cmd_;
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommandResponse::set_allocated_cmd(::std::string* cmd) {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (cmd) {
    set_has_cmd();
    cmd_ = cmd;
  } else {
    clear_has_cmd();
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 cmd_no = 2;
inline bool CommandResponse::has_cmd_no() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommandResponse::set_has_cmd_no() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommandResponse::clear_has_cmd_no() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommandResponse::clear_cmd_no() {
  cmd_no_ = 0;
  clear_has_cmd_no();
}
inline ::google::protobuf::int32 CommandResponse::cmd_no() const {
  return cmd_no_;
}
inline void CommandResponse::set_cmd_no(::google::protobuf::int32 value) {
  set_has_cmd_no();
  cmd_no_ = value;
}

// required int32 code = 3;
inline bool CommandResponse::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommandResponse::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommandResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommandResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 CommandResponse::code() const {
  return code_;
}
inline void CommandResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional int64 time_cost = 4;
inline bool CommandResponse::has_time_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommandResponse::set_has_time_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommandResponse::clear_has_time_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommandResponse::clear_time_cost() {
  time_cost_ = GOOGLE_LONGLONG(0);
  clear_has_time_cost();
}
inline ::google::protobuf::int64 CommandResponse::time_cost() const {
  return time_cost_;
}
inline void CommandResponse::set_time_cost(::google::protobuf::int64 value) {
  set_has_time_cost();
  time_cost_ = value;
}

// repeated string info = 5;
inline int CommandResponse::info_size() const {
  return info_.size();
}
inline void CommandResponse::clear_info() {
  info_.Clear();
}
inline const ::std::string& CommandResponse::info(int index) const {
  return info_.Get(index);
}
inline ::std::string* CommandResponse::mutable_info(int index) {
  return info_.Mutable(index);
}
inline void CommandResponse::set_info(int index, const ::std::string& value) {
  info_.Mutable(index)->assign(value);
}
inline void CommandResponse::set_info(int index, const char* value) {
  info_.Mutable(index)->assign(value);
}
inline void CommandResponse::set_info(int index, const char* value, size_t size) {
  info_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommandResponse::add_info() {
  return info_.Add();
}
inline void CommandResponse::add_info(const ::std::string& value) {
  info_.Add()->assign(value);
}
inline void CommandResponse::add_info(const char* value) {
  info_.Add()->assign(value);
}
inline void CommandResponse::add_info(const char* value, size_t size) {
  info_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommandResponse::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CommandResponse::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// OneApk

// optional int32 id = 1;
inline bool OneApk::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneApk::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneApk::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneApk::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 OneApk::id() const {
  return id_;
}
inline void OneApk::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string url = 2;
inline bool OneApk::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneApk::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneApk::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneApk::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& OneApk::url() const {
  return *url_;
}
inline void OneApk::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void OneApk::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void OneApk::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneApk::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* OneApk::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OneApk::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string md5 = 3;
inline bool OneApk::has_md5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneApk::set_has_md5() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneApk::clear_has_md5() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneApk::clear_md5() {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& OneApk::md5() const {
  return *md5_;
}
inline void OneApk::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void OneApk::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void OneApk::set_md5(const char* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneApk::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  return md5_;
}
inline ::std::string* OneApk::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OneApk::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 4;
inline bool OneApk::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OneApk::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OneApk::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OneApk::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OneApk::name() const {
  return *name_;
}
inline void OneApk::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OneApk::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OneApk::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneApk::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* OneApk::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OneApk::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string brief = 5;
inline bool OneApk::has_brief() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OneApk::set_has_brief() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OneApk::clear_has_brief() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OneApk::clear_brief() {
  if (brief_ != &::google::protobuf::internal::kEmptyString) {
    brief_->clear();
  }
  clear_has_brief();
}
inline const ::std::string& OneApk::brief() const {
  return *brief_;
}
inline void OneApk::set_brief(const ::std::string& value) {
  set_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    brief_ = new ::std::string;
  }
  brief_->assign(value);
}
inline void OneApk::set_brief(const char* value) {
  set_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    brief_ = new ::std::string;
  }
  brief_->assign(value);
}
inline void OneApk::set_brief(const char* value, size_t size) {
  set_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    brief_ = new ::std::string;
  }
  brief_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneApk::mutable_brief() {
  set_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    brief_ = new ::std::string;
  }
  return brief_;
}
inline ::std::string* OneApk::release_brief() {
  clear_has_brief();
  if (brief_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = brief_;
    brief_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OneApk::set_allocated_brief(::std::string* brief) {
  if (brief_ != &::google::protobuf::internal::kEmptyString) {
    delete brief_;
  }
  if (brief) {
    set_has_brief();
    brief_ = brief;
  } else {
    clear_has_brief();
    brief_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 orderid = 6;
inline bool OneApk::has_orderid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OneApk::set_has_orderid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OneApk::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OneApk::clear_orderid() {
  orderid_ = 0;
  clear_has_orderid();
}
inline ::google::protobuf::int32 OneApk::orderid() const {
  return orderid_;
}
inline void OneApk::set_orderid(::google::protobuf::int32 value) {
  set_has_orderid();
  orderid_ = value;
}

// optional string update_time = 7;
inline bool OneApk::has_update_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OneApk::set_has_update_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OneApk::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OneApk::clear_update_time() {
  if (update_time_ != &::google::protobuf::internal::kEmptyString) {
    update_time_->clear();
  }
  clear_has_update_time();
}
inline const ::std::string& OneApk::update_time() const {
  return *update_time_;
}
inline void OneApk::set_update_time(const ::std::string& value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::kEmptyString) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
}
inline void OneApk::set_update_time(const char* value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::kEmptyString) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
}
inline void OneApk::set_update_time(const char* value, size_t size) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::kEmptyString) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneApk::mutable_update_time() {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::kEmptyString) {
    update_time_ = new ::std::string;
  }
  return update_time_;
}
inline ::std::string* OneApk::release_update_time() {
  clear_has_update_time();
  if (update_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = update_time_;
    update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OneApk::set_allocated_update_time(::std::string* update_time) {
  if (update_time_ != &::google::protobuf::internal::kEmptyString) {
    delete update_time_;
  }
  if (update_time) {
    set_has_update_time();
    update_time_ = update_time;
  } else {
    clear_has_update_time();
    update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string create_time = 8;
inline bool OneApk::has_create_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OneApk::set_has_create_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OneApk::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OneApk::clear_create_time() {
  if (create_time_ != &::google::protobuf::internal::kEmptyString) {
    create_time_->clear();
  }
  clear_has_create_time();
}
inline const ::std::string& OneApk::create_time() const {
  return *create_time_;
}
inline void OneApk::set_create_time(const ::std::string& value) {
  set_has_create_time();
  if (create_time_ == &::google::protobuf::internal::kEmptyString) {
    create_time_ = new ::std::string;
  }
  create_time_->assign(value);
}
inline void OneApk::set_create_time(const char* value) {
  set_has_create_time();
  if (create_time_ == &::google::protobuf::internal::kEmptyString) {
    create_time_ = new ::std::string;
  }
  create_time_->assign(value);
}
inline void OneApk::set_create_time(const char* value, size_t size) {
  set_has_create_time();
  if (create_time_ == &::google::protobuf::internal::kEmptyString) {
    create_time_ = new ::std::string;
  }
  create_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneApk::mutable_create_time() {
  set_has_create_time();
  if (create_time_ == &::google::protobuf::internal::kEmptyString) {
    create_time_ = new ::std::string;
  }
  return create_time_;
}
inline ::std::string* OneApk::release_create_time() {
  clear_has_create_time();
  if (create_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = create_time_;
    create_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OneApk::set_allocated_create_time(::std::string* create_time) {
  if (create_time_ != &::google::protobuf::internal::kEmptyString) {
    delete create_time_;
  }
  if (create_time) {
    set_has_create_time();
    create_time_ = create_time;
  } else {
    clear_has_create_time();
    create_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string apk_name = 9;
inline bool OneApk::has_apk_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OneApk::set_has_apk_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OneApk::clear_has_apk_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OneApk::clear_apk_name() {
  if (apk_name_ != &::google::protobuf::internal::kEmptyString) {
    apk_name_->clear();
  }
  clear_has_apk_name();
}
inline const ::std::string& OneApk::apk_name() const {
  return *apk_name_;
}
inline void OneApk::set_apk_name(const ::std::string& value) {
  set_has_apk_name();
  if (apk_name_ == &::google::protobuf::internal::kEmptyString) {
    apk_name_ = new ::std::string;
  }
  apk_name_->assign(value);
}
inline void OneApk::set_apk_name(const char* value) {
  set_has_apk_name();
  if (apk_name_ == &::google::protobuf::internal::kEmptyString) {
    apk_name_ = new ::std::string;
  }
  apk_name_->assign(value);
}
inline void OneApk::set_apk_name(const char* value, size_t size) {
  set_has_apk_name();
  if (apk_name_ == &::google::protobuf::internal::kEmptyString) {
    apk_name_ = new ::std::string;
  }
  apk_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OneApk::mutable_apk_name() {
  set_has_apk_name();
  if (apk_name_ == &::google::protobuf::internal::kEmptyString) {
    apk_name_ = new ::std::string;
  }
  return apk_name_;
}
inline ::std::string* OneApk::release_apk_name() {
  clear_has_apk_name();
  if (apk_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apk_name_;
    apk_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OneApk::set_allocated_apk_name(::std::string* apk_name) {
  if (apk_name_ != &::google::protobuf::internal::kEmptyString) {
    delete apk_name_;
  }
  if (apk_name) {
    set_has_apk_name();
    apk_name_ = apk_name;
  } else {
    clear_has_apk_name();
    apk_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double price = 10;
inline bool OneApk::has_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OneApk::set_has_price() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OneApk::clear_has_price() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OneApk::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double OneApk::price() const {
  return price_;
}
inline void OneApk::set_price(double value) {
  set_has_price();
  price_ = value;
}

// required int32 type = 11;
inline bool OneApk::has_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OneApk::set_has_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OneApk::clear_has_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OneApk::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 OneApk::type() const {
  return type_;
}
inline void OneApk::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// ApkList

// required .apk.CommandResponse head = 1;
inline bool ApkList::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApkList::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ApkList::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ApkList::clear_head() {
  if (head_ != NULL) head_->::apk::CommandResponse::Clear();
  clear_has_head();
}
inline const ::apk::CommandResponse& ApkList::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::apk::CommandResponse* ApkList::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::apk::CommandResponse;
  return head_;
}
inline ::apk::CommandResponse* ApkList::release_head() {
  clear_has_head();
  ::apk::CommandResponse* temp = head_;
  head_ = NULL;
  return temp;
}
inline void ApkList::set_allocated_head(::apk::CommandResponse* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// repeated .apk.OneApk apk_list = 2;
inline int ApkList::apk_list_size() const {
  return apk_list_.size();
}
inline void ApkList::clear_apk_list() {
  apk_list_.Clear();
}
inline const ::apk::OneApk& ApkList::apk_list(int index) const {
  return apk_list_.Get(index);
}
inline ::apk::OneApk* ApkList::mutable_apk_list(int index) {
  return apk_list_.Mutable(index);
}
inline ::apk::OneApk* ApkList::add_apk_list() {
  return apk_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apk::OneApk >&
ApkList::apk_list() const {
  return apk_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::apk::OneApk >*
ApkList::mutable_apk_list() {
  return &apk_list_;
}

// -------------------------------------------------------------------

// AdbDevice

// required string serial_no = 1;
inline bool AdbDevice::has_serial_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdbDevice::set_has_serial_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdbDevice::clear_has_serial_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdbDevice::clear_serial_no() {
  if (serial_no_ != &::google::protobuf::internal::kEmptyString) {
    serial_no_->clear();
  }
  clear_has_serial_no();
}
inline const ::std::string& AdbDevice::serial_no() const {
  return *serial_no_;
}
inline void AdbDevice::set_serial_no(const ::std::string& value) {
  set_has_serial_no();
  if (serial_no_ == &::google::protobuf::internal::kEmptyString) {
    serial_no_ = new ::std::string;
  }
  serial_no_->assign(value);
}
inline void AdbDevice::set_serial_no(const char* value) {
  set_has_serial_no();
  if (serial_no_ == &::google::protobuf::internal::kEmptyString) {
    serial_no_ = new ::std::string;
  }
  serial_no_->assign(value);
}
inline void AdbDevice::set_serial_no(const char* value, size_t size) {
  set_has_serial_no();
  if (serial_no_ == &::google::protobuf::internal::kEmptyString) {
    serial_no_ = new ::std::string;
  }
  serial_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdbDevice::mutable_serial_no() {
  set_has_serial_no();
  if (serial_no_ == &::google::protobuf::internal::kEmptyString) {
    serial_no_ = new ::std::string;
  }
  return serial_no_;
}
inline ::std::string* AdbDevice::release_serial_no() {
  clear_has_serial_no();
  if (serial_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serial_no_;
    serial_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdbDevice::set_allocated_serial_no(::std::string* serial_no) {
  if (serial_no_ != &::google::protobuf::internal::kEmptyString) {
    delete serial_no_;
  }
  if (serial_no) {
    set_has_serial_no();
    serial_no_ = serial_no;
  } else {
    clear_has_serial_no();
    serial_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string state = 2;
inline bool AdbDevice::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdbDevice::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdbDevice::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdbDevice::clear_state() {
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    state_->clear();
  }
  clear_has_state();
}
inline const ::std::string& AdbDevice::state() const {
  return *state_;
}
inline void AdbDevice::set_state(const ::std::string& value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  state_->assign(value);
}
inline void AdbDevice::set_state(const char* value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  state_->assign(value);
}
inline void AdbDevice::set_state(const char* value, size_t size) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  state_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdbDevice::mutable_state() {
  set_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    state_ = new ::std::string;
  }
  return state_;
}
inline ::std::string* AdbDevice::release_state() {
  clear_has_state();
  if (state_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = state_;
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdbDevice::set_allocated_state(::std::string* state) {
  if (state_ != &::google::protobuf::internal::kEmptyString) {
    delete state_;
  }
  if (state) {
    set_has_state();
    state_ = state;
  } else {
    clear_has_state();
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string model = 3;
inline bool AdbDevice::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdbDevice::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdbDevice::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdbDevice::clear_model() {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& AdbDevice::model() const {
  return *model_;
}
inline void AdbDevice::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void AdbDevice::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void AdbDevice::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdbDevice::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  return model_;
}
inline ::std::string* AdbDevice::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdbDevice::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string product = 4;
inline bool AdbDevice::has_product() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdbDevice::set_has_product() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdbDevice::clear_has_product() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdbDevice::clear_product() {
  if (product_ != &::google::protobuf::internal::kEmptyString) {
    product_->clear();
  }
  clear_has_product();
}
inline const ::std::string& AdbDevice::product() const {
  return *product_;
}
inline void AdbDevice::set_product(const ::std::string& value) {
  set_has_product();
  if (product_ == &::google::protobuf::internal::kEmptyString) {
    product_ = new ::std::string;
  }
  product_->assign(value);
}
inline void AdbDevice::set_product(const char* value) {
  set_has_product();
  if (product_ == &::google::protobuf::internal::kEmptyString) {
    product_ = new ::std::string;
  }
  product_->assign(value);
}
inline void AdbDevice::set_product(const char* value, size_t size) {
  set_has_product();
  if (product_ == &::google::protobuf::internal::kEmptyString) {
    product_ = new ::std::string;
  }
  product_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdbDevice::mutable_product() {
  set_has_product();
  if (product_ == &::google::protobuf::internal::kEmptyString) {
    product_ = new ::std::string;
  }
  return product_;
}
inline ::std::string* AdbDevice::release_product() {
  clear_has_product();
  if (product_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = product_;
    product_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdbDevice::set_allocated_product(::std::string* product) {
  if (product_ != &::google::protobuf::internal::kEmptyString) {
    delete product_;
  }
  if (product) {
    set_has_product();
    product_ = product;
  } else {
    clear_has_product();
    product_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string device = 5;
inline bool AdbDevice::has_device() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdbDevice::set_has_device() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdbDevice::clear_has_device() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdbDevice::clear_device() {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& AdbDevice::device() const {
  return *device_;
}
inline void AdbDevice::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(value);
}
inline void AdbDevice::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(value);
}
inline void AdbDevice::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdbDevice::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    device_ = new ::std::string;
  }
  return device_;
}
inline ::std::string* AdbDevice::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdbDevice::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DevicesList

// required .apk.CommandResponse head = 1;
inline bool DevicesList::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DevicesList::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DevicesList::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DevicesList::clear_head() {
  if (head_ != NULL) head_->::apk::CommandResponse::Clear();
  clear_has_head();
}
inline const ::apk::CommandResponse& DevicesList::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::apk::CommandResponse* DevicesList::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::apk::CommandResponse;
  return head_;
}
inline ::apk::CommandResponse* DevicesList::release_head() {
  clear_has_head();
  ::apk::CommandResponse* temp = head_;
  head_ = NULL;
  return temp;
}
inline void DevicesList::set_allocated_head(::apk::CommandResponse* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// repeated .apk.AdbDevice devices_list = 2;
inline int DevicesList::devices_list_size() const {
  return devices_list_.size();
}
inline void DevicesList::clear_devices_list() {
  devices_list_.Clear();
}
inline const ::apk::AdbDevice& DevicesList::devices_list(int index) const {
  return devices_list_.Get(index);
}
inline ::apk::AdbDevice* DevicesList::mutable_devices_list(int index) {
  return devices_list_.Mutable(index);
}
inline ::apk::AdbDevice* DevicesList::add_devices_list() {
  return devices_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apk::AdbDevice >&
DevicesList::devices_list() const {
  return devices_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::apk::AdbDevice >*
DevicesList::mutable_devices_list() {
  return &devices_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace apk

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_apk_5fprotomsg_2eproto__INCLUDED
