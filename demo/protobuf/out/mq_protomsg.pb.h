// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mq_protomsg.proto

#ifndef PROTOBUF_mq_5fprotomsg_2eproto__INCLUDED
#define PROTOBUF_mq_5fprotomsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ctp {
namespace mq {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mq_5fprotomsg_2eproto();
void protobuf_AssignDesc_mq_5fprotomsg_2eproto();
void protobuf_ShutdownFile_mq_5fprotomsg_2eproto();

class BasicMQ;
class LevelMQ;
class QueryLevelMQ;
class LevelMQTotal;
class BacktestingLevelMQ;
class BacktestingLevelMQList;
class BacktestingLevelMQ2;
class BacktestingLevelMQList2;

// ===================================================================

class BasicMQ : public ::google::protobuf::Message {
 public:
  BasicMQ();
  virtual ~BasicMQ();

  BasicMQ(const BasicMQ& from);

  inline BasicMQ& operator=(const BasicMQ& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicMQ& default_instance();

  void Swap(BasicMQ* other);

  // implements Message ----------------------------------------------

  BasicMQ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BasicMQ& from);
  void MergeFrom(const BasicMQ& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // required string time_string = 2;
  inline bool has_time_string() const;
  inline void clear_time_string();
  static const int kTimeStringFieldNumber = 2;
  inline const ::std::string& time_string() const;
  inline void set_time_string(const ::std::string& value);
  inline void set_time_string(const char* value);
  inline void set_time_string(const char* value, size_t size);
  inline ::std::string* mutable_time_string();
  inline ::std::string* release_time_string();
  inline void set_allocated_time_string(::std::string* time_string);

  // required string tradingday = 3;
  inline bool has_tradingday() const;
  inline void clear_tradingday();
  static const int kTradingdayFieldNumber = 3;
  inline const ::std::string& tradingday() const;
  inline void set_tradingday(const ::std::string& value);
  inline void set_tradingday(const char* value);
  inline void set_tradingday(const char* value, size_t size);
  inline ::std::string* mutable_tradingday();
  inline ::std::string* release_tradingday();
  inline void set_allocated_tradingday(::std::string* tradingday);

  // required string type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required string exchangeid = 5;
  inline bool has_exchangeid() const;
  inline void clear_exchangeid();
  static const int kExchangeidFieldNumber = 5;
  inline const ::std::string& exchangeid() const;
  inline void set_exchangeid(const ::std::string& value);
  inline void set_exchangeid(const char* value);
  inline void set_exchangeid(const char* value, size_t size);
  inline ::std::string* mutable_exchangeid();
  inline ::std::string* release_exchangeid();
  inline void set_allocated_exchangeid(::std::string* exchangeid);

  // required string exchangeinstid = 6;
  inline bool has_exchangeinstid() const;
  inline void clear_exchangeinstid();
  static const int kExchangeinstidFieldNumber = 6;
  inline const ::std::string& exchangeinstid() const;
  inline void set_exchangeinstid(const ::std::string& value);
  inline void set_exchangeinstid(const char* value);
  inline void set_exchangeinstid(const char* value, size_t size);
  inline ::std::string* mutable_exchangeinstid();
  inline ::std::string* release_exchangeinstid();
  inline void set_allocated_exchangeinstid(::std::string* exchangeinstid);

  // required double lastprice = 7;
  inline bool has_lastprice() const;
  inline void clear_lastprice();
  static const int kLastpriceFieldNumber = 7;
  inline double lastprice() const;
  inline void set_lastprice(double value);

  // required double presettlementprice = 8;
  inline bool has_presettlementprice() const;
  inline void clear_presettlementprice();
  static const int kPresettlementpriceFieldNumber = 8;
  inline double presettlementprice() const;
  inline void set_presettlementprice(double value);

  // required double precloseprice = 9;
  inline bool has_precloseprice() const;
  inline void clear_precloseprice();
  static const int kPreclosepriceFieldNumber = 9;
  inline double precloseprice() const;
  inline void set_precloseprice(double value);

  // required double preopeninterest = 10;
  inline bool has_preopeninterest() const;
  inline void clear_preopeninterest();
  static const int kPreopeninterestFieldNumber = 10;
  inline double preopeninterest() const;
  inline void set_preopeninterest(double value);

  // required double openprice = 11;
  inline bool has_openprice() const;
  inline void clear_openprice();
  static const int kOpenpriceFieldNumber = 11;
  inline double openprice() const;
  inline void set_openprice(double value);

  // required double highestprice = 12;
  inline bool has_highestprice() const;
  inline void clear_highestprice();
  static const int kHighestpriceFieldNumber = 12;
  inline double highestprice() const;
  inline void set_highestprice(double value);

  // required double lowestprice = 13;
  inline bool has_lowestprice() const;
  inline void clear_lowestprice();
  static const int kLowestpriceFieldNumber = 13;
  inline double lowestprice() const;
  inline void set_lowestprice(double value);

  // required int32 volume = 14;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 14;
  inline ::google::protobuf::int32 volume() const;
  inline void set_volume(::google::protobuf::int32 value);

  // required double turnover = 15;
  inline bool has_turnover() const;
  inline void clear_turnover();
  static const int kTurnoverFieldNumber = 15;
  inline double turnover() const;
  inline void set_turnover(double value);

  // required double openinterest = 16;
  inline bool has_openinterest() const;
  inline void clear_openinterest();
  static const int kOpeninterestFieldNumber = 16;
  inline double openinterest() const;
  inline void set_openinterest(double value);

  // required double closeprice = 17;
  inline bool has_closeprice() const;
  inline void clear_closeprice();
  static const int kClosepriceFieldNumber = 17;
  inline double closeprice() const;
  inline void set_closeprice(double value);

  // required double settlementprice = 18;
  inline bool has_settlementprice() const;
  inline void clear_settlementprice();
  static const int kSettlementpriceFieldNumber = 18;
  inline double settlementprice() const;
  inline void set_settlementprice(double value);

  // required double upperlimitprice = 19;
  inline bool has_upperlimitprice() const;
  inline void clear_upperlimitprice();
  static const int kUpperlimitpriceFieldNumber = 19;
  inline double upperlimitprice() const;
  inline void set_upperlimitprice(double value);

  // required double lowerlimitprice = 20;
  inline bool has_lowerlimitprice() const;
  inline void clear_lowerlimitprice();
  static const int kLowerlimitpriceFieldNumber = 20;
  inline double lowerlimitprice() const;
  inline void set_lowerlimitprice(double value);

  // required double predelta = 21;
  inline bool has_predelta() const;
  inline void clear_predelta();
  static const int kPredeltaFieldNumber = 21;
  inline double predelta() const;
  inline void set_predelta(double value);

  // required double currdelta = 22;
  inline bool has_currdelta() const;
  inline void clear_currdelta();
  static const int kCurrdeltaFieldNumber = 22;
  inline double currdelta() const;
  inline void set_currdelta(double value);

  // required string updatetime = 23;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdatetimeFieldNumber = 23;
  inline const ::std::string& updatetime() const;
  inline void set_updatetime(const ::std::string& value);
  inline void set_updatetime(const char* value);
  inline void set_updatetime(const char* value, size_t size);
  inline ::std::string* mutable_updatetime();
  inline ::std::string* release_updatetime();
  inline void set_allocated_updatetime(::std::string* updatetime);

  // required int32 updatemillisec = 24;
  inline bool has_updatemillisec() const;
  inline void clear_updatemillisec();
  static const int kUpdatemillisecFieldNumber = 24;
  inline ::google::protobuf::int32 updatemillisec() const;
  inline void set_updatemillisec(::google::protobuf::int32 value);

  // required double bidprice1 = 25;
  inline bool has_bidprice1() const;
  inline void clear_bidprice1();
  static const int kBidprice1FieldNumber = 25;
  inline double bidprice1() const;
  inline void set_bidprice1(double value);

  // required int32 bidvolume1 = 26;
  inline bool has_bidvolume1() const;
  inline void clear_bidvolume1();
  static const int kBidvolume1FieldNumber = 26;
  inline ::google::protobuf::int32 bidvolume1() const;
  inline void set_bidvolume1(::google::protobuf::int32 value);

  // required double askprice1 = 27;
  inline bool has_askprice1() const;
  inline void clear_askprice1();
  static const int kAskprice1FieldNumber = 27;
  inline double askprice1() const;
  inline void set_askprice1(double value);

  // required int32 askvolume1 = 28;
  inline bool has_askvolume1() const;
  inline void clear_askvolume1();
  static const int kAskvolume1FieldNumber = 28;
  inline ::google::protobuf::int32 askvolume1() const;
  inline void set_askvolume1(::google::protobuf::int32 value);

  // required double bidprice2 = 29;
  inline bool has_bidprice2() const;
  inline void clear_bidprice2();
  static const int kBidprice2FieldNumber = 29;
  inline double bidprice2() const;
  inline void set_bidprice2(double value);

  // required int32 bidvolume2 = 30;
  inline bool has_bidvolume2() const;
  inline void clear_bidvolume2();
  static const int kBidvolume2FieldNumber = 30;
  inline ::google::protobuf::int32 bidvolume2() const;
  inline void set_bidvolume2(::google::protobuf::int32 value);

  // required double askprice2 = 31;
  inline bool has_askprice2() const;
  inline void clear_askprice2();
  static const int kAskprice2FieldNumber = 31;
  inline double askprice2() const;
  inline void set_askprice2(double value);

  // required int32 askvolume2 = 32;
  inline bool has_askvolume2() const;
  inline void clear_askvolume2();
  static const int kAskvolume2FieldNumber = 32;
  inline ::google::protobuf::int32 askvolume2() const;
  inline void set_askvolume2(::google::protobuf::int32 value);

  // required double bidprice3 = 33;
  inline bool has_bidprice3() const;
  inline void clear_bidprice3();
  static const int kBidprice3FieldNumber = 33;
  inline double bidprice3() const;
  inline void set_bidprice3(double value);

  // required int32 bidvolume3 = 34;
  inline bool has_bidvolume3() const;
  inline void clear_bidvolume3();
  static const int kBidvolume3FieldNumber = 34;
  inline ::google::protobuf::int32 bidvolume3() const;
  inline void set_bidvolume3(::google::protobuf::int32 value);

  // required double askprice3 = 35;
  inline bool has_askprice3() const;
  inline void clear_askprice3();
  static const int kAskprice3FieldNumber = 35;
  inline double askprice3() const;
  inline void set_askprice3(double value);

  // required int32 askvolume3 = 36;
  inline bool has_askvolume3() const;
  inline void clear_askvolume3();
  static const int kAskvolume3FieldNumber = 36;
  inline ::google::protobuf::int32 askvolume3() const;
  inline void set_askvolume3(::google::protobuf::int32 value);

  // required double bidprice4 = 37;
  inline bool has_bidprice4() const;
  inline void clear_bidprice4();
  static const int kBidprice4FieldNumber = 37;
  inline double bidprice4() const;
  inline void set_bidprice4(double value);

  // required int32 bidvolume4 = 38;
  inline bool has_bidvolume4() const;
  inline void clear_bidvolume4();
  static const int kBidvolume4FieldNumber = 38;
  inline ::google::protobuf::int32 bidvolume4() const;
  inline void set_bidvolume4(::google::protobuf::int32 value);

  // required double askprice4 = 39;
  inline bool has_askprice4() const;
  inline void clear_askprice4();
  static const int kAskprice4FieldNumber = 39;
  inline double askprice4() const;
  inline void set_askprice4(double value);

  // required int32 askvolume4 = 40;
  inline bool has_askvolume4() const;
  inline void clear_askvolume4();
  static const int kAskvolume4FieldNumber = 40;
  inline ::google::protobuf::int32 askvolume4() const;
  inline void set_askvolume4(::google::protobuf::int32 value);

  // required double bidprice5 = 41;
  inline bool has_bidprice5() const;
  inline void clear_bidprice5();
  static const int kBidprice5FieldNumber = 41;
  inline double bidprice5() const;
  inline void set_bidprice5(double value);

  // required int32 bidvolume5 = 42;
  inline bool has_bidvolume5() const;
  inline void clear_bidvolume5();
  static const int kBidvolume5FieldNumber = 42;
  inline ::google::protobuf::int32 bidvolume5() const;
  inline void set_bidvolume5(::google::protobuf::int32 value);

  // required double askprice5 = 43;
  inline bool has_askprice5() const;
  inline void clear_askprice5();
  static const int kAskprice5FieldNumber = 43;
  inline double askprice5() const;
  inline void set_askprice5(double value);

  // required int32 askvolume5 = 44;
  inline bool has_askvolume5() const;
  inline void clear_askvolume5();
  static const int kAskvolume5FieldNumber = 44;
  inline ::google::protobuf::int32 askvolume5() const;
  inline void set_askvolume5(::google::protobuf::int32 value);

  // required double averageprice = 45;
  inline bool has_averageprice() const;
  inline void clear_averageprice();
  static const int kAveragepriceFieldNumber = 45;
  inline double averageprice() const;
  inline void set_averageprice(double value);

  // @@protoc_insertion_point(class_scope:ctp.mq.BasicMQ)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_time_string();
  inline void clear_has_time_string();
  inline void set_has_tradingday();
  inline void clear_has_tradingday();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_exchangeid();
  inline void clear_has_exchangeid();
  inline void set_has_exchangeinstid();
  inline void clear_has_exchangeinstid();
  inline void set_has_lastprice();
  inline void clear_has_lastprice();
  inline void set_has_presettlementprice();
  inline void clear_has_presettlementprice();
  inline void set_has_precloseprice();
  inline void clear_has_precloseprice();
  inline void set_has_preopeninterest();
  inline void clear_has_preopeninterest();
  inline void set_has_openprice();
  inline void clear_has_openprice();
  inline void set_has_highestprice();
  inline void clear_has_highestprice();
  inline void set_has_lowestprice();
  inline void clear_has_lowestprice();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_turnover();
  inline void clear_has_turnover();
  inline void set_has_openinterest();
  inline void clear_has_openinterest();
  inline void set_has_closeprice();
  inline void clear_has_closeprice();
  inline void set_has_settlementprice();
  inline void clear_has_settlementprice();
  inline void set_has_upperlimitprice();
  inline void clear_has_upperlimitprice();
  inline void set_has_lowerlimitprice();
  inline void clear_has_lowerlimitprice();
  inline void set_has_predelta();
  inline void clear_has_predelta();
  inline void set_has_currdelta();
  inline void clear_has_currdelta();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_updatemillisec();
  inline void clear_has_updatemillisec();
  inline void set_has_bidprice1();
  inline void clear_has_bidprice1();
  inline void set_has_bidvolume1();
  inline void clear_has_bidvolume1();
  inline void set_has_askprice1();
  inline void clear_has_askprice1();
  inline void set_has_askvolume1();
  inline void clear_has_askvolume1();
  inline void set_has_bidprice2();
  inline void clear_has_bidprice2();
  inline void set_has_bidvolume2();
  inline void clear_has_bidvolume2();
  inline void set_has_askprice2();
  inline void clear_has_askprice2();
  inline void set_has_askvolume2();
  inline void clear_has_askvolume2();
  inline void set_has_bidprice3();
  inline void clear_has_bidprice3();
  inline void set_has_bidvolume3();
  inline void clear_has_bidvolume3();
  inline void set_has_askprice3();
  inline void clear_has_askprice3();
  inline void set_has_askvolume3();
  inline void clear_has_askvolume3();
  inline void set_has_bidprice4();
  inline void clear_has_bidprice4();
  inline void set_has_bidvolume4();
  inline void clear_has_bidvolume4();
  inline void set_has_askprice4();
  inline void clear_has_askprice4();
  inline void set_has_askvolume4();
  inline void clear_has_askvolume4();
  inline void set_has_bidprice5();
  inline void clear_has_bidprice5();
  inline void set_has_bidvolume5();
  inline void clear_has_bidvolume5();
  inline void set_has_askprice5();
  inline void clear_has_askprice5();
  inline void set_has_askvolume5();
  inline void clear_has_askvolume5();
  inline void set_has_averageprice();
  inline void clear_has_averageprice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 time_;
  ::std::string* time_string_;
  ::std::string* tradingday_;
  ::std::string* type_;
  ::std::string* exchangeid_;
  ::std::string* exchangeinstid_;
  double lastprice_;
  double presettlementprice_;
  double precloseprice_;
  double preopeninterest_;
  double openprice_;
  double highestprice_;
  double lowestprice_;
  double turnover_;
  double openinterest_;
  double closeprice_;
  double settlementprice_;
  double upperlimitprice_;
  ::google::protobuf::int32 volume_;
  ::google::protobuf::int32 updatemillisec_;
  double lowerlimitprice_;
  double predelta_;
  double currdelta_;
  ::std::string* updatetime_;
  double bidprice1_;
  double askprice1_;
  ::google::protobuf::int32 bidvolume1_;
  ::google::protobuf::int32 askvolume1_;
  double bidprice2_;
  double askprice2_;
  ::google::protobuf::int32 bidvolume2_;
  ::google::protobuf::int32 askvolume2_;
  double bidprice3_;
  double askprice3_;
  ::google::protobuf::int32 bidvolume3_;
  ::google::protobuf::int32 askvolume3_;
  double bidprice4_;
  double askprice4_;
  ::google::protobuf::int32 bidvolume4_;
  ::google::protobuf::int32 askvolume4_;
  double bidprice5_;
  double askprice5_;
  ::google::protobuf::int32 bidvolume5_;
  ::google::protobuf::int32 askvolume5_;
  double averageprice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(45 + 31) / 32];

  friend void  protobuf_AddDesc_mq_5fprotomsg_2eproto();
  friend void protobuf_AssignDesc_mq_5fprotomsg_2eproto();
  friend void protobuf_ShutdownFile_mq_5fprotomsg_2eproto();

  void InitAsDefaultInstance();
  static BasicMQ* default_instance_;
};
// -------------------------------------------------------------------

class LevelMQ : public ::google::protobuf::Message {
 public:
  LevelMQ();
  virtual ~LevelMQ();

  LevelMQ(const LevelMQ& from);

  inline LevelMQ& operator=(const LevelMQ& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelMQ& default_instance();

  void Swap(LevelMQ* other);

  // implements Message ----------------------------------------------

  LevelMQ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LevelMQ& from);
  void MergeFrom(const LevelMQ& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // required string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required double open = 4;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 4;
  inline double open() const;
  inline void set_open(double value);

  // required double high = 5;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 5;
  inline double high() const;
  inline void set_high(double value);

  // required double low = 6;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 6;
  inline double low() const;
  inline void set_low(double value);

  // required double close = 7;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 7;
  inline double close() const;
  inline void set_close(double value);

  // required double close_ask1 = 8;
  inline bool has_close_ask1() const;
  inline void clear_close_ask1();
  static const int kCloseAsk1FieldNumber = 8;
  inline double close_ask1() const;
  inline void set_close_ask1(double value);

  // required double close_bid1 = 9;
  inline bool has_close_bid1() const;
  inline void clear_close_bid1();
  static const int kCloseBid1FieldNumber = 9;
  inline double close_bid1() const;
  inline void set_close_bid1(double value);

  // required int32 volumn = 10;
  inline bool has_volumn() const;
  inline void clear_volumn();
  static const int kVolumnFieldNumber = 10;
  inline ::google::protobuf::int32 volumn() const;
  inline void set_volumn(::google::protobuf::int32 value);

  // required int32 counter = 11;
  inline bool has_counter() const;
  inline void clear_counter();
  static const int kCounterFieldNumber = 11;
  inline ::google::protobuf::int32 counter() const;
  inline void set_counter(::google::protobuf::int32 value);

  // required string time_string = 12;
  inline bool has_time_string() const;
  inline void clear_time_string();
  static const int kTimeStringFieldNumber = 12;
  inline const ::std::string& time_string() const;
  inline void set_time_string(const ::std::string& value);
  inline void set_time_string(const char* value);
  inline void set_time_string(const char* value, size_t size);
  inline ::std::string* mutable_time_string();
  inline ::std::string* release_time_string();
  inline void set_allocated_time_string(::std::string* time_string);

  // @@protoc_insertion_point(class_scope:ctp.mq.LevelMQ)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_close_ask1();
  inline void clear_has_close_ask1();
  inline void set_has_close_bid1();
  inline void clear_has_close_bid1();
  inline void set_has_volumn();
  inline void clear_has_volumn();
  inline void set_has_counter();
  inline void clear_has_counter();
  inline void set_has_time_string();
  inline void clear_has_time_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 time_;
  ::std::string* type_;
  double open_;
  double high_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 volumn_;
  double low_;
  double close_;
  double close_ask1_;
  double close_bid1_;
  ::std::string* time_string_;
  ::google::protobuf::int32 counter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_mq_5fprotomsg_2eproto();
  friend void protobuf_AssignDesc_mq_5fprotomsg_2eproto();
  friend void protobuf_ShutdownFile_mq_5fprotomsg_2eproto();

  void InitAsDefaultInstance();
  static LevelMQ* default_instance_;
};
// -------------------------------------------------------------------

class QueryLevelMQ : public ::google::protobuf::Message {
 public:
  QueryLevelMQ();
  virtual ~QueryLevelMQ();

  QueryLevelMQ(const QueryLevelMQ& from);

  inline QueryLevelMQ& operator=(const QueryLevelMQ& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryLevelMQ& default_instance();

  void Swap(QueryLevelMQ* other);

  // implements Message ----------------------------------------------

  QueryLevelMQ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryLevelMQ& from);
  void MergeFrom(const QueryLevelMQ& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required int64 start = 3;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 3;
  inline ::google::protobuf::int64 start() const;
  inline void set_start(::google::protobuf::int64 value);

  // required int64 end = 4;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 4;
  inline ::google::protobuf::int64 end() const;
  inline void set_end(::google::protobuf::int64 value);

  // required int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 number = 6;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 6;
  inline ::google::protobuf::int32 number() const;
  inline void set_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ctp.mq.QueryLevelMQ)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_number();
  inline void clear_has_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::std::string* type_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int64 end_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_mq_5fprotomsg_2eproto();
  friend void protobuf_AssignDesc_mq_5fprotomsg_2eproto();
  friend void protobuf_ShutdownFile_mq_5fprotomsg_2eproto();

  void InitAsDefaultInstance();
  static QueryLevelMQ* default_instance_;
};
// -------------------------------------------------------------------

class LevelMQTotal : public ::google::protobuf::Message {
 public:
  LevelMQTotal();
  virtual ~LevelMQTotal();

  LevelMQTotal(const LevelMQTotal& from);

  inline LevelMQTotal& operator=(const LevelMQTotal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelMQTotal& default_instance();

  void Swap(LevelMQTotal* other);

  // implements Message ----------------------------------------------

  LevelMQTotal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LevelMQTotal& from);
  void MergeFrom(const LevelMQTotal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 total = 4;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 4;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ctp.mq.LevelMQTotal)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_total();
  inline void clear_has_total();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::std::string* type_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 total_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_mq_5fprotomsg_2eproto();
  friend void protobuf_AssignDesc_mq_5fprotomsg_2eproto();
  friend void protobuf_ShutdownFile_mq_5fprotomsg_2eproto();

  void InitAsDefaultInstance();
  static LevelMQTotal* default_instance_;
};
// -------------------------------------------------------------------

class BacktestingLevelMQ : public ::google::protobuf::Message {
 public:
  BacktestingLevelMQ();
  virtual ~BacktestingLevelMQ();

  BacktestingLevelMQ(const BacktestingLevelMQ& from);

  inline BacktestingLevelMQ& operator=(const BacktestingLevelMQ& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BacktestingLevelMQ& default_instance();

  void Swap(BacktestingLevelMQ* other);

  // implements Message ----------------------------------------------

  BacktestingLevelMQ* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BacktestingLevelMQ& from);
  void MergeFrom(const BacktestingLevelMQ& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // required string time_string = 2;
  inline bool has_time_string() const;
  inline void clear_time_string();
  static const int kTimeStringFieldNumber = 2;
  inline const ::std::string& time_string() const;
  inline void set_time_string(const ::std::string& value);
  inline void set_time_string(const char* value);
  inline void set_time_string(const char* value, size_t size);
  inline ::std::string* mutable_time_string();
  inline ::std::string* release_time_string();
  inline void set_allocated_time_string(::std::string* time_string);

  // required double open = 3;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 3;
  inline double open() const;
  inline void set_open(double value);

  // required double high = 4;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 4;
  inline double high() const;
  inline void set_high(double value);

  // required double low = 5;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 5;
  inline double low() const;
  inline void set_low(double value);

  // required double close = 6;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 6;
  inline double close() const;
  inline void set_close(double value);

  // @@protoc_insertion_point(class_scope:ctp.mq.BacktestingLevelMQ)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_time_string();
  inline void clear_has_time_string();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_close();
  inline void clear_has_close();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 time_;
  ::std::string* time_string_;
  double open_;
  double high_;
  double low_;
  double close_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_mq_5fprotomsg_2eproto();
  friend void protobuf_AssignDesc_mq_5fprotomsg_2eproto();
  friend void protobuf_ShutdownFile_mq_5fprotomsg_2eproto();

  void InitAsDefaultInstance();
  static BacktestingLevelMQ* default_instance_;
};
// -------------------------------------------------------------------

class BacktestingLevelMQList : public ::google::protobuf::Message {
 public:
  BacktestingLevelMQList();
  virtual ~BacktestingLevelMQList();

  BacktestingLevelMQList(const BacktestingLevelMQList& from);

  inline BacktestingLevelMQList& operator=(const BacktestingLevelMQList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BacktestingLevelMQList& default_instance();

  void Swap(BacktestingLevelMQList* other);

  // implements Message ----------------------------------------------

  BacktestingLevelMQList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BacktestingLevelMQList& from);
  void MergeFrom(const BacktestingLevelMQList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 total = 4;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 4;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);

  // required int32 index = 5;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // repeated .ctp.mq.BacktestingLevelMQ data = 6;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::ctp::mq::BacktestingLevelMQ& data(int index) const;
  inline ::ctp::mq::BacktestingLevelMQ* mutable_data(int index);
  inline ::ctp::mq::BacktestingLevelMQ* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ctp::mq::BacktestingLevelMQ >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ctp::mq::BacktestingLevelMQ >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:ctp.mq.BacktestingLevelMQList)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::std::string* type_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 total_;
  ::google::protobuf::RepeatedPtrField< ::ctp::mq::BacktestingLevelMQ > data_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_mq_5fprotomsg_2eproto();
  friend void protobuf_AssignDesc_mq_5fprotomsg_2eproto();
  friend void protobuf_ShutdownFile_mq_5fprotomsg_2eproto();

  void InitAsDefaultInstance();
  static BacktestingLevelMQList* default_instance_;
};
// -------------------------------------------------------------------

class BacktestingLevelMQ2 : public ::google::protobuf::Message {
 public:
  BacktestingLevelMQ2();
  virtual ~BacktestingLevelMQ2();

  BacktestingLevelMQ2(const BacktestingLevelMQ2& from);

  inline BacktestingLevelMQ2& operator=(const BacktestingLevelMQ2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BacktestingLevelMQ2& default_instance();

  void Swap(BacktestingLevelMQ2* other);

  // implements Message ----------------------------------------------

  BacktestingLevelMQ2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BacktestingLevelMQ2& from);
  void MergeFrom(const BacktestingLevelMQ2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // required string time_string = 2;
  inline bool has_time_string() const;
  inline void clear_time_string();
  static const int kTimeStringFieldNumber = 2;
  inline const ::std::string& time_string() const;
  inline void set_time_string(const ::std::string& value);
  inline void set_time_string(const char* value);
  inline void set_time_string(const char* value, size_t size);
  inline ::std::string* mutable_time_string();
  inline ::std::string* release_time_string();
  inline void set_allocated_time_string(::std::string* time_string);

  // required double open = 3;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 3;
  inline double open() const;
  inline void set_open(double value);

  // required double high = 4;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 4;
  inline double high() const;
  inline void set_high(double value);

  // required double low = 5;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 5;
  inline double low() const;
  inline void set_low(double value);

  // required double close = 6;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 6;
  inline double close() const;
  inline void set_close(double value);

  // required int32 next_level_mq_index = 7;
  inline bool has_next_level_mq_index() const;
  inline void clear_next_level_mq_index();
  static const int kNextLevelMqIndexFieldNumber = 7;
  inline ::google::protobuf::int32 next_level_mq_index() const;
  inline void set_next_level_mq_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ctp.mq.BacktestingLevelMQ2)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_time_string();
  inline void clear_has_time_string();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_next_level_mq_index();
  inline void clear_has_next_level_mq_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 time_;
  ::std::string* time_string_;
  double open_;
  double high_;
  double low_;
  double close_;
  ::google::protobuf::int32 next_level_mq_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_mq_5fprotomsg_2eproto();
  friend void protobuf_AssignDesc_mq_5fprotomsg_2eproto();
  friend void protobuf_ShutdownFile_mq_5fprotomsg_2eproto();

  void InitAsDefaultInstance();
  static BacktestingLevelMQ2* default_instance_;
};
// -------------------------------------------------------------------

class BacktestingLevelMQList2 : public ::google::protobuf::Message {
 public:
  BacktestingLevelMQList2();
  virtual ~BacktestingLevelMQList2();

  BacktestingLevelMQList2(const BacktestingLevelMQList2& from);

  inline BacktestingLevelMQList2& operator=(const BacktestingLevelMQList2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BacktestingLevelMQList2& default_instance();

  void Swap(BacktestingLevelMQList2* other);

  // implements Message ----------------------------------------------

  BacktestingLevelMQList2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BacktestingLevelMQList2& from);
  void MergeFrom(const BacktestingLevelMQList2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  inline void set_allocated_table_name(::std::string* table_name);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 total = 4;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 4;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);

  // required int32 index = 5;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // repeated .ctp.mq.BacktestingLevelMQ2 data = 6;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::ctp::mq::BacktestingLevelMQ2& data(int index) const;
  inline ::ctp::mq::BacktestingLevelMQ2* mutable_data(int index);
  inline ::ctp::mq::BacktestingLevelMQ2* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ctp::mq::BacktestingLevelMQ2 >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ctp::mq::BacktestingLevelMQ2 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:ctp.mq.BacktestingLevelMQList2)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* table_name_;
  ::std::string* type_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 total_;
  ::google::protobuf::RepeatedPtrField< ::ctp::mq::BacktestingLevelMQ2 > data_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_mq_5fprotomsg_2eproto();
  friend void protobuf_AssignDesc_mq_5fprotomsg_2eproto();
  friend void protobuf_ShutdownFile_mq_5fprotomsg_2eproto();

  void InitAsDefaultInstance();
  static BacktestingLevelMQList2* default_instance_;
};
// ===================================================================


// ===================================================================

// BasicMQ

// required int64 time = 1;
inline bool BasicMQ::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BasicMQ::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BasicMQ::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BasicMQ::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 BasicMQ::time() const {
  return time_;
}
inline void BasicMQ::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// required string time_string = 2;
inline bool BasicMQ::has_time_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BasicMQ::set_has_time_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BasicMQ::clear_has_time_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BasicMQ::clear_time_string() {
  if (time_string_ != &::google::protobuf::internal::kEmptyString) {
    time_string_->clear();
  }
  clear_has_time_string();
}
inline const ::std::string& BasicMQ::time_string() const {
  return *time_string_;
}
inline void BasicMQ::set_time_string(const ::std::string& value) {
  set_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    time_string_ = new ::std::string;
  }
  time_string_->assign(value);
}
inline void BasicMQ::set_time_string(const char* value) {
  set_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    time_string_ = new ::std::string;
  }
  time_string_->assign(value);
}
inline void BasicMQ::set_time_string(const char* value, size_t size) {
  set_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    time_string_ = new ::std::string;
  }
  time_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BasicMQ::mutable_time_string() {
  set_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    time_string_ = new ::std::string;
  }
  return time_string_;
}
inline ::std::string* BasicMQ::release_time_string() {
  clear_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_string_;
    time_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BasicMQ::set_allocated_time_string(::std::string* time_string) {
  if (time_string_ != &::google::protobuf::internal::kEmptyString) {
    delete time_string_;
  }
  if (time_string) {
    set_has_time_string();
    time_string_ = time_string;
  } else {
    clear_has_time_string();
    time_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string tradingday = 3;
inline bool BasicMQ::has_tradingday() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BasicMQ::set_has_tradingday() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BasicMQ::clear_has_tradingday() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BasicMQ::clear_tradingday() {
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    tradingday_->clear();
  }
  clear_has_tradingday();
}
inline const ::std::string& BasicMQ::tradingday() const {
  return *tradingday_;
}
inline void BasicMQ::set_tradingday(const ::std::string& value) {
  set_has_tradingday();
  if (tradingday_ == &::google::protobuf::internal::kEmptyString) {
    tradingday_ = new ::std::string;
  }
  tradingday_->assign(value);
}
inline void BasicMQ::set_tradingday(const char* value) {
  set_has_tradingday();
  if (tradingday_ == &::google::protobuf::internal::kEmptyString) {
    tradingday_ = new ::std::string;
  }
  tradingday_->assign(value);
}
inline void BasicMQ::set_tradingday(const char* value, size_t size) {
  set_has_tradingday();
  if (tradingday_ == &::google::protobuf::internal::kEmptyString) {
    tradingday_ = new ::std::string;
  }
  tradingday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BasicMQ::mutable_tradingday() {
  set_has_tradingday();
  if (tradingday_ == &::google::protobuf::internal::kEmptyString) {
    tradingday_ = new ::std::string;
  }
  return tradingday_;
}
inline ::std::string* BasicMQ::release_tradingday() {
  clear_has_tradingday();
  if (tradingday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tradingday_;
    tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BasicMQ::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (tradingday) {
    set_has_tradingday();
    tradingday_ = tradingday;
  } else {
    clear_has_tradingday();
    tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 4;
inline bool BasicMQ::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BasicMQ::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BasicMQ::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BasicMQ::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& BasicMQ::type() const {
  return *type_;
}
inline void BasicMQ::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void BasicMQ::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void BasicMQ::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BasicMQ::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* BasicMQ::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BasicMQ::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string exchangeid = 5;
inline bool BasicMQ::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BasicMQ::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BasicMQ::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BasicMQ::clear_exchangeid() {
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    exchangeid_->clear();
  }
  clear_has_exchangeid();
}
inline const ::std::string& BasicMQ::exchangeid() const {
  return *exchangeid_;
}
inline void BasicMQ::set_exchangeid(const ::std::string& value) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::kEmptyString) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(value);
}
inline void BasicMQ::set_exchangeid(const char* value) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::kEmptyString) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(value);
}
inline void BasicMQ::set_exchangeid(const char* value, size_t size) {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::kEmptyString) {
    exchangeid_ = new ::std::string;
  }
  exchangeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BasicMQ::mutable_exchangeid() {
  set_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::kEmptyString) {
    exchangeid_ = new ::std::string;
  }
  return exchangeid_;
}
inline ::std::string* BasicMQ::release_exchangeid() {
  clear_has_exchangeid();
  if (exchangeid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exchangeid_;
    exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BasicMQ::set_allocated_exchangeid(::std::string* exchangeid) {
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (exchangeid) {
    set_has_exchangeid();
    exchangeid_ = exchangeid;
  } else {
    clear_has_exchangeid();
    exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string exchangeinstid = 6;
inline bool BasicMQ::has_exchangeinstid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BasicMQ::set_has_exchangeinstid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BasicMQ::clear_has_exchangeinstid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BasicMQ::clear_exchangeinstid() {
  if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
    exchangeinstid_->clear();
  }
  clear_has_exchangeinstid();
}
inline const ::std::string& BasicMQ::exchangeinstid() const {
  return *exchangeinstid_;
}
inline void BasicMQ::set_exchangeinstid(const ::std::string& value) {
  set_has_exchangeinstid();
  if (exchangeinstid_ == &::google::protobuf::internal::kEmptyString) {
    exchangeinstid_ = new ::std::string;
  }
  exchangeinstid_->assign(value);
}
inline void BasicMQ::set_exchangeinstid(const char* value) {
  set_has_exchangeinstid();
  if (exchangeinstid_ == &::google::protobuf::internal::kEmptyString) {
    exchangeinstid_ = new ::std::string;
  }
  exchangeinstid_->assign(value);
}
inline void BasicMQ::set_exchangeinstid(const char* value, size_t size) {
  set_has_exchangeinstid();
  if (exchangeinstid_ == &::google::protobuf::internal::kEmptyString) {
    exchangeinstid_ = new ::std::string;
  }
  exchangeinstid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BasicMQ::mutable_exchangeinstid() {
  set_has_exchangeinstid();
  if (exchangeinstid_ == &::google::protobuf::internal::kEmptyString) {
    exchangeinstid_ = new ::std::string;
  }
  return exchangeinstid_;
}
inline ::std::string* BasicMQ::release_exchangeinstid() {
  clear_has_exchangeinstid();
  if (exchangeinstid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exchangeinstid_;
    exchangeinstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BasicMQ::set_allocated_exchangeinstid(::std::string* exchangeinstid) {
  if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeinstid_;
  }
  if (exchangeinstid) {
    set_has_exchangeinstid();
    exchangeinstid_ = exchangeinstid;
  } else {
    clear_has_exchangeinstid();
    exchangeinstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double lastprice = 7;
inline bool BasicMQ::has_lastprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BasicMQ::set_has_lastprice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BasicMQ::clear_has_lastprice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BasicMQ::clear_lastprice() {
  lastprice_ = 0;
  clear_has_lastprice();
}
inline double BasicMQ::lastprice() const {
  return lastprice_;
}
inline void BasicMQ::set_lastprice(double value) {
  set_has_lastprice();
  lastprice_ = value;
}

// required double presettlementprice = 8;
inline bool BasicMQ::has_presettlementprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BasicMQ::set_has_presettlementprice() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BasicMQ::clear_has_presettlementprice() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BasicMQ::clear_presettlementprice() {
  presettlementprice_ = 0;
  clear_has_presettlementprice();
}
inline double BasicMQ::presettlementprice() const {
  return presettlementprice_;
}
inline void BasicMQ::set_presettlementprice(double value) {
  set_has_presettlementprice();
  presettlementprice_ = value;
}

// required double precloseprice = 9;
inline bool BasicMQ::has_precloseprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BasicMQ::set_has_precloseprice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BasicMQ::clear_has_precloseprice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BasicMQ::clear_precloseprice() {
  precloseprice_ = 0;
  clear_has_precloseprice();
}
inline double BasicMQ::precloseprice() const {
  return precloseprice_;
}
inline void BasicMQ::set_precloseprice(double value) {
  set_has_precloseprice();
  precloseprice_ = value;
}

// required double preopeninterest = 10;
inline bool BasicMQ::has_preopeninterest() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BasicMQ::set_has_preopeninterest() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BasicMQ::clear_has_preopeninterest() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BasicMQ::clear_preopeninterest() {
  preopeninterest_ = 0;
  clear_has_preopeninterest();
}
inline double BasicMQ::preopeninterest() const {
  return preopeninterest_;
}
inline void BasicMQ::set_preopeninterest(double value) {
  set_has_preopeninterest();
  preopeninterest_ = value;
}

// required double openprice = 11;
inline bool BasicMQ::has_openprice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BasicMQ::set_has_openprice() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BasicMQ::clear_has_openprice() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BasicMQ::clear_openprice() {
  openprice_ = 0;
  clear_has_openprice();
}
inline double BasicMQ::openprice() const {
  return openprice_;
}
inline void BasicMQ::set_openprice(double value) {
  set_has_openprice();
  openprice_ = value;
}

// required double highestprice = 12;
inline bool BasicMQ::has_highestprice() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BasicMQ::set_has_highestprice() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BasicMQ::clear_has_highestprice() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BasicMQ::clear_highestprice() {
  highestprice_ = 0;
  clear_has_highestprice();
}
inline double BasicMQ::highestprice() const {
  return highestprice_;
}
inline void BasicMQ::set_highestprice(double value) {
  set_has_highestprice();
  highestprice_ = value;
}

// required double lowestprice = 13;
inline bool BasicMQ::has_lowestprice() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BasicMQ::set_has_lowestprice() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BasicMQ::clear_has_lowestprice() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BasicMQ::clear_lowestprice() {
  lowestprice_ = 0;
  clear_has_lowestprice();
}
inline double BasicMQ::lowestprice() const {
  return lowestprice_;
}
inline void BasicMQ::set_lowestprice(double value) {
  set_has_lowestprice();
  lowestprice_ = value;
}

// required int32 volume = 14;
inline bool BasicMQ::has_volume() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BasicMQ::set_has_volume() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BasicMQ::clear_has_volume() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BasicMQ::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
inline ::google::protobuf::int32 BasicMQ::volume() const {
  return volume_;
}
inline void BasicMQ::set_volume(::google::protobuf::int32 value) {
  set_has_volume();
  volume_ = value;
}

// required double turnover = 15;
inline bool BasicMQ::has_turnover() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BasicMQ::set_has_turnover() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BasicMQ::clear_has_turnover() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BasicMQ::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double BasicMQ::turnover() const {
  return turnover_;
}
inline void BasicMQ::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
}

// required double openinterest = 16;
inline bool BasicMQ::has_openinterest() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BasicMQ::set_has_openinterest() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BasicMQ::clear_has_openinterest() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BasicMQ::clear_openinterest() {
  openinterest_ = 0;
  clear_has_openinterest();
}
inline double BasicMQ::openinterest() const {
  return openinterest_;
}
inline void BasicMQ::set_openinterest(double value) {
  set_has_openinterest();
  openinterest_ = value;
}

// required double closeprice = 17;
inline bool BasicMQ::has_closeprice() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BasicMQ::set_has_closeprice() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BasicMQ::clear_has_closeprice() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BasicMQ::clear_closeprice() {
  closeprice_ = 0;
  clear_has_closeprice();
}
inline double BasicMQ::closeprice() const {
  return closeprice_;
}
inline void BasicMQ::set_closeprice(double value) {
  set_has_closeprice();
  closeprice_ = value;
}

// required double settlementprice = 18;
inline bool BasicMQ::has_settlementprice() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BasicMQ::set_has_settlementprice() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BasicMQ::clear_has_settlementprice() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BasicMQ::clear_settlementprice() {
  settlementprice_ = 0;
  clear_has_settlementprice();
}
inline double BasicMQ::settlementprice() const {
  return settlementprice_;
}
inline void BasicMQ::set_settlementprice(double value) {
  set_has_settlementprice();
  settlementprice_ = value;
}

// required double upperlimitprice = 19;
inline bool BasicMQ::has_upperlimitprice() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BasicMQ::set_has_upperlimitprice() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BasicMQ::clear_has_upperlimitprice() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BasicMQ::clear_upperlimitprice() {
  upperlimitprice_ = 0;
  clear_has_upperlimitprice();
}
inline double BasicMQ::upperlimitprice() const {
  return upperlimitprice_;
}
inline void BasicMQ::set_upperlimitprice(double value) {
  set_has_upperlimitprice();
  upperlimitprice_ = value;
}

// required double lowerlimitprice = 20;
inline bool BasicMQ::has_lowerlimitprice() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BasicMQ::set_has_lowerlimitprice() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BasicMQ::clear_has_lowerlimitprice() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BasicMQ::clear_lowerlimitprice() {
  lowerlimitprice_ = 0;
  clear_has_lowerlimitprice();
}
inline double BasicMQ::lowerlimitprice() const {
  return lowerlimitprice_;
}
inline void BasicMQ::set_lowerlimitprice(double value) {
  set_has_lowerlimitprice();
  lowerlimitprice_ = value;
}

// required double predelta = 21;
inline bool BasicMQ::has_predelta() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BasicMQ::set_has_predelta() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BasicMQ::clear_has_predelta() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BasicMQ::clear_predelta() {
  predelta_ = 0;
  clear_has_predelta();
}
inline double BasicMQ::predelta() const {
  return predelta_;
}
inline void BasicMQ::set_predelta(double value) {
  set_has_predelta();
  predelta_ = value;
}

// required double currdelta = 22;
inline bool BasicMQ::has_currdelta() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BasicMQ::set_has_currdelta() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BasicMQ::clear_has_currdelta() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BasicMQ::clear_currdelta() {
  currdelta_ = 0;
  clear_has_currdelta();
}
inline double BasicMQ::currdelta() const {
  return currdelta_;
}
inline void BasicMQ::set_currdelta(double value) {
  set_has_currdelta();
  currdelta_ = value;
}

// required string updatetime = 23;
inline bool BasicMQ::has_updatetime() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BasicMQ::set_has_updatetime() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BasicMQ::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BasicMQ::clear_updatetime() {
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    updatetime_->clear();
  }
  clear_has_updatetime();
}
inline const ::std::string& BasicMQ::updatetime() const {
  return *updatetime_;
}
inline void BasicMQ::set_updatetime(const ::std::string& value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
}
inline void BasicMQ::set_updatetime(const char* value) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(value);
}
inline void BasicMQ::set_updatetime(const char* value, size_t size) {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  updatetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BasicMQ::mutable_updatetime() {
  set_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    updatetime_ = new ::std::string;
  }
  return updatetime_;
}
inline ::std::string* BasicMQ::release_updatetime() {
  clear_has_updatetime();
  if (updatetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updatetime_;
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BasicMQ::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updatetime_;
  }
  if (updatetime) {
    set_has_updatetime();
    updatetime_ = updatetime;
  } else {
    clear_has_updatetime();
    updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 updatemillisec = 24;
inline bool BasicMQ::has_updatemillisec() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BasicMQ::set_has_updatemillisec() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BasicMQ::clear_has_updatemillisec() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BasicMQ::clear_updatemillisec() {
  updatemillisec_ = 0;
  clear_has_updatemillisec();
}
inline ::google::protobuf::int32 BasicMQ::updatemillisec() const {
  return updatemillisec_;
}
inline void BasicMQ::set_updatemillisec(::google::protobuf::int32 value) {
  set_has_updatemillisec();
  updatemillisec_ = value;
}

// required double bidprice1 = 25;
inline bool BasicMQ::has_bidprice1() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void BasicMQ::set_has_bidprice1() {
  _has_bits_[0] |= 0x01000000u;
}
inline void BasicMQ::clear_has_bidprice1() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void BasicMQ::clear_bidprice1() {
  bidprice1_ = 0;
  clear_has_bidprice1();
}
inline double BasicMQ::bidprice1() const {
  return bidprice1_;
}
inline void BasicMQ::set_bidprice1(double value) {
  set_has_bidprice1();
  bidprice1_ = value;
}

// required int32 bidvolume1 = 26;
inline bool BasicMQ::has_bidvolume1() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BasicMQ::set_has_bidvolume1() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BasicMQ::clear_has_bidvolume1() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BasicMQ::clear_bidvolume1() {
  bidvolume1_ = 0;
  clear_has_bidvolume1();
}
inline ::google::protobuf::int32 BasicMQ::bidvolume1() const {
  return bidvolume1_;
}
inline void BasicMQ::set_bidvolume1(::google::protobuf::int32 value) {
  set_has_bidvolume1();
  bidvolume1_ = value;
}

// required double askprice1 = 27;
inline bool BasicMQ::has_askprice1() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BasicMQ::set_has_askprice1() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BasicMQ::clear_has_askprice1() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BasicMQ::clear_askprice1() {
  askprice1_ = 0;
  clear_has_askprice1();
}
inline double BasicMQ::askprice1() const {
  return askprice1_;
}
inline void BasicMQ::set_askprice1(double value) {
  set_has_askprice1();
  askprice1_ = value;
}

// required int32 askvolume1 = 28;
inline bool BasicMQ::has_askvolume1() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void BasicMQ::set_has_askvolume1() {
  _has_bits_[0] |= 0x08000000u;
}
inline void BasicMQ::clear_has_askvolume1() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void BasicMQ::clear_askvolume1() {
  askvolume1_ = 0;
  clear_has_askvolume1();
}
inline ::google::protobuf::int32 BasicMQ::askvolume1() const {
  return askvolume1_;
}
inline void BasicMQ::set_askvolume1(::google::protobuf::int32 value) {
  set_has_askvolume1();
  askvolume1_ = value;
}

// required double bidprice2 = 29;
inline bool BasicMQ::has_bidprice2() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BasicMQ::set_has_bidprice2() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BasicMQ::clear_has_bidprice2() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BasicMQ::clear_bidprice2() {
  bidprice2_ = 0;
  clear_has_bidprice2();
}
inline double BasicMQ::bidprice2() const {
  return bidprice2_;
}
inline void BasicMQ::set_bidprice2(double value) {
  set_has_bidprice2();
  bidprice2_ = value;
}

// required int32 bidvolume2 = 30;
inline bool BasicMQ::has_bidvolume2() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void BasicMQ::set_has_bidvolume2() {
  _has_bits_[0] |= 0x20000000u;
}
inline void BasicMQ::clear_has_bidvolume2() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void BasicMQ::clear_bidvolume2() {
  bidvolume2_ = 0;
  clear_has_bidvolume2();
}
inline ::google::protobuf::int32 BasicMQ::bidvolume2() const {
  return bidvolume2_;
}
inline void BasicMQ::set_bidvolume2(::google::protobuf::int32 value) {
  set_has_bidvolume2();
  bidvolume2_ = value;
}

// required double askprice2 = 31;
inline bool BasicMQ::has_askprice2() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void BasicMQ::set_has_askprice2() {
  _has_bits_[0] |= 0x40000000u;
}
inline void BasicMQ::clear_has_askprice2() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void BasicMQ::clear_askprice2() {
  askprice2_ = 0;
  clear_has_askprice2();
}
inline double BasicMQ::askprice2() const {
  return askprice2_;
}
inline void BasicMQ::set_askprice2(double value) {
  set_has_askprice2();
  askprice2_ = value;
}

// required int32 askvolume2 = 32;
inline bool BasicMQ::has_askvolume2() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void BasicMQ::set_has_askvolume2() {
  _has_bits_[0] |= 0x80000000u;
}
inline void BasicMQ::clear_has_askvolume2() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void BasicMQ::clear_askvolume2() {
  askvolume2_ = 0;
  clear_has_askvolume2();
}
inline ::google::protobuf::int32 BasicMQ::askvolume2() const {
  return askvolume2_;
}
inline void BasicMQ::set_askvolume2(::google::protobuf::int32 value) {
  set_has_askvolume2();
  askvolume2_ = value;
}

// required double bidprice3 = 33;
inline bool BasicMQ::has_bidprice3() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void BasicMQ::set_has_bidprice3() {
  _has_bits_[1] |= 0x00000001u;
}
inline void BasicMQ::clear_has_bidprice3() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void BasicMQ::clear_bidprice3() {
  bidprice3_ = 0;
  clear_has_bidprice3();
}
inline double BasicMQ::bidprice3() const {
  return bidprice3_;
}
inline void BasicMQ::set_bidprice3(double value) {
  set_has_bidprice3();
  bidprice3_ = value;
}

// required int32 bidvolume3 = 34;
inline bool BasicMQ::has_bidvolume3() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void BasicMQ::set_has_bidvolume3() {
  _has_bits_[1] |= 0x00000002u;
}
inline void BasicMQ::clear_has_bidvolume3() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void BasicMQ::clear_bidvolume3() {
  bidvolume3_ = 0;
  clear_has_bidvolume3();
}
inline ::google::protobuf::int32 BasicMQ::bidvolume3() const {
  return bidvolume3_;
}
inline void BasicMQ::set_bidvolume3(::google::protobuf::int32 value) {
  set_has_bidvolume3();
  bidvolume3_ = value;
}

// required double askprice3 = 35;
inline bool BasicMQ::has_askprice3() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void BasicMQ::set_has_askprice3() {
  _has_bits_[1] |= 0x00000004u;
}
inline void BasicMQ::clear_has_askprice3() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void BasicMQ::clear_askprice3() {
  askprice3_ = 0;
  clear_has_askprice3();
}
inline double BasicMQ::askprice3() const {
  return askprice3_;
}
inline void BasicMQ::set_askprice3(double value) {
  set_has_askprice3();
  askprice3_ = value;
}

// required int32 askvolume3 = 36;
inline bool BasicMQ::has_askvolume3() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void BasicMQ::set_has_askvolume3() {
  _has_bits_[1] |= 0x00000008u;
}
inline void BasicMQ::clear_has_askvolume3() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void BasicMQ::clear_askvolume3() {
  askvolume3_ = 0;
  clear_has_askvolume3();
}
inline ::google::protobuf::int32 BasicMQ::askvolume3() const {
  return askvolume3_;
}
inline void BasicMQ::set_askvolume3(::google::protobuf::int32 value) {
  set_has_askvolume3();
  askvolume3_ = value;
}

// required double bidprice4 = 37;
inline bool BasicMQ::has_bidprice4() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void BasicMQ::set_has_bidprice4() {
  _has_bits_[1] |= 0x00000010u;
}
inline void BasicMQ::clear_has_bidprice4() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void BasicMQ::clear_bidprice4() {
  bidprice4_ = 0;
  clear_has_bidprice4();
}
inline double BasicMQ::bidprice4() const {
  return bidprice4_;
}
inline void BasicMQ::set_bidprice4(double value) {
  set_has_bidprice4();
  bidprice4_ = value;
}

// required int32 bidvolume4 = 38;
inline bool BasicMQ::has_bidvolume4() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void BasicMQ::set_has_bidvolume4() {
  _has_bits_[1] |= 0x00000020u;
}
inline void BasicMQ::clear_has_bidvolume4() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void BasicMQ::clear_bidvolume4() {
  bidvolume4_ = 0;
  clear_has_bidvolume4();
}
inline ::google::protobuf::int32 BasicMQ::bidvolume4() const {
  return bidvolume4_;
}
inline void BasicMQ::set_bidvolume4(::google::protobuf::int32 value) {
  set_has_bidvolume4();
  bidvolume4_ = value;
}

// required double askprice4 = 39;
inline bool BasicMQ::has_askprice4() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void BasicMQ::set_has_askprice4() {
  _has_bits_[1] |= 0x00000040u;
}
inline void BasicMQ::clear_has_askprice4() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void BasicMQ::clear_askprice4() {
  askprice4_ = 0;
  clear_has_askprice4();
}
inline double BasicMQ::askprice4() const {
  return askprice4_;
}
inline void BasicMQ::set_askprice4(double value) {
  set_has_askprice4();
  askprice4_ = value;
}

// required int32 askvolume4 = 40;
inline bool BasicMQ::has_askvolume4() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void BasicMQ::set_has_askvolume4() {
  _has_bits_[1] |= 0x00000080u;
}
inline void BasicMQ::clear_has_askvolume4() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void BasicMQ::clear_askvolume4() {
  askvolume4_ = 0;
  clear_has_askvolume4();
}
inline ::google::protobuf::int32 BasicMQ::askvolume4() const {
  return askvolume4_;
}
inline void BasicMQ::set_askvolume4(::google::protobuf::int32 value) {
  set_has_askvolume4();
  askvolume4_ = value;
}

// required double bidprice5 = 41;
inline bool BasicMQ::has_bidprice5() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void BasicMQ::set_has_bidprice5() {
  _has_bits_[1] |= 0x00000100u;
}
inline void BasicMQ::clear_has_bidprice5() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void BasicMQ::clear_bidprice5() {
  bidprice5_ = 0;
  clear_has_bidprice5();
}
inline double BasicMQ::bidprice5() const {
  return bidprice5_;
}
inline void BasicMQ::set_bidprice5(double value) {
  set_has_bidprice5();
  bidprice5_ = value;
}

// required int32 bidvolume5 = 42;
inline bool BasicMQ::has_bidvolume5() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void BasicMQ::set_has_bidvolume5() {
  _has_bits_[1] |= 0x00000200u;
}
inline void BasicMQ::clear_has_bidvolume5() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void BasicMQ::clear_bidvolume5() {
  bidvolume5_ = 0;
  clear_has_bidvolume5();
}
inline ::google::protobuf::int32 BasicMQ::bidvolume5() const {
  return bidvolume5_;
}
inline void BasicMQ::set_bidvolume5(::google::protobuf::int32 value) {
  set_has_bidvolume5();
  bidvolume5_ = value;
}

// required double askprice5 = 43;
inline bool BasicMQ::has_askprice5() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void BasicMQ::set_has_askprice5() {
  _has_bits_[1] |= 0x00000400u;
}
inline void BasicMQ::clear_has_askprice5() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void BasicMQ::clear_askprice5() {
  askprice5_ = 0;
  clear_has_askprice5();
}
inline double BasicMQ::askprice5() const {
  return askprice5_;
}
inline void BasicMQ::set_askprice5(double value) {
  set_has_askprice5();
  askprice5_ = value;
}

// required int32 askvolume5 = 44;
inline bool BasicMQ::has_askvolume5() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void BasicMQ::set_has_askvolume5() {
  _has_bits_[1] |= 0x00000800u;
}
inline void BasicMQ::clear_has_askvolume5() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void BasicMQ::clear_askvolume5() {
  askvolume5_ = 0;
  clear_has_askvolume5();
}
inline ::google::protobuf::int32 BasicMQ::askvolume5() const {
  return askvolume5_;
}
inline void BasicMQ::set_askvolume5(::google::protobuf::int32 value) {
  set_has_askvolume5();
  askvolume5_ = value;
}

// required double averageprice = 45;
inline bool BasicMQ::has_averageprice() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void BasicMQ::set_has_averageprice() {
  _has_bits_[1] |= 0x00001000u;
}
inline void BasicMQ::clear_has_averageprice() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void BasicMQ::clear_averageprice() {
  averageprice_ = 0;
  clear_has_averageprice();
}
inline double BasicMQ::averageprice() const {
  return averageprice_;
}
inline void BasicMQ::set_averageprice(double value) {
  set_has_averageprice();
  averageprice_ = value;
}

// -------------------------------------------------------------------

// LevelMQ

// required int32 level = 1;
inline bool LevelMQ::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LevelMQ::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LevelMQ::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LevelMQ::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 LevelMQ::level() const {
  return level_;
}
inline void LevelMQ::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int64 time = 2;
inline bool LevelMQ::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LevelMQ::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LevelMQ::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LevelMQ::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 LevelMQ::time() const {
  return time_;
}
inline void LevelMQ::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// required string type = 3;
inline bool LevelMQ::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LevelMQ::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LevelMQ::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LevelMQ::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& LevelMQ::type() const {
  return *type_;
}
inline void LevelMQ::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void LevelMQ::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void LevelMQ::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LevelMQ::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* LevelMQ::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LevelMQ::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double open = 4;
inline bool LevelMQ::has_open() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LevelMQ::set_has_open() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LevelMQ::clear_has_open() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LevelMQ::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline double LevelMQ::open() const {
  return open_;
}
inline void LevelMQ::set_open(double value) {
  set_has_open();
  open_ = value;
}

// required double high = 5;
inline bool LevelMQ::has_high() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LevelMQ::set_has_high() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LevelMQ::clear_has_high() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LevelMQ::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline double LevelMQ::high() const {
  return high_;
}
inline void LevelMQ::set_high(double value) {
  set_has_high();
  high_ = value;
}

// required double low = 6;
inline bool LevelMQ::has_low() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LevelMQ::set_has_low() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LevelMQ::clear_has_low() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LevelMQ::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline double LevelMQ::low() const {
  return low_;
}
inline void LevelMQ::set_low(double value) {
  set_has_low();
  low_ = value;
}

// required double close = 7;
inline bool LevelMQ::has_close() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LevelMQ::set_has_close() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LevelMQ::clear_has_close() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LevelMQ::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline double LevelMQ::close() const {
  return close_;
}
inline void LevelMQ::set_close(double value) {
  set_has_close();
  close_ = value;
}

// required double close_ask1 = 8;
inline bool LevelMQ::has_close_ask1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LevelMQ::set_has_close_ask1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LevelMQ::clear_has_close_ask1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LevelMQ::clear_close_ask1() {
  close_ask1_ = 0;
  clear_has_close_ask1();
}
inline double LevelMQ::close_ask1() const {
  return close_ask1_;
}
inline void LevelMQ::set_close_ask1(double value) {
  set_has_close_ask1();
  close_ask1_ = value;
}

// required double close_bid1 = 9;
inline bool LevelMQ::has_close_bid1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LevelMQ::set_has_close_bid1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LevelMQ::clear_has_close_bid1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LevelMQ::clear_close_bid1() {
  close_bid1_ = 0;
  clear_has_close_bid1();
}
inline double LevelMQ::close_bid1() const {
  return close_bid1_;
}
inline void LevelMQ::set_close_bid1(double value) {
  set_has_close_bid1();
  close_bid1_ = value;
}

// required int32 volumn = 10;
inline bool LevelMQ::has_volumn() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LevelMQ::set_has_volumn() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LevelMQ::clear_has_volumn() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LevelMQ::clear_volumn() {
  volumn_ = 0;
  clear_has_volumn();
}
inline ::google::protobuf::int32 LevelMQ::volumn() const {
  return volumn_;
}
inline void LevelMQ::set_volumn(::google::protobuf::int32 value) {
  set_has_volumn();
  volumn_ = value;
}

// required int32 counter = 11;
inline bool LevelMQ::has_counter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LevelMQ::set_has_counter() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LevelMQ::clear_has_counter() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LevelMQ::clear_counter() {
  counter_ = 0;
  clear_has_counter();
}
inline ::google::protobuf::int32 LevelMQ::counter() const {
  return counter_;
}
inline void LevelMQ::set_counter(::google::protobuf::int32 value) {
  set_has_counter();
  counter_ = value;
}

// required string time_string = 12;
inline bool LevelMQ::has_time_string() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LevelMQ::set_has_time_string() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LevelMQ::clear_has_time_string() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LevelMQ::clear_time_string() {
  if (time_string_ != &::google::protobuf::internal::kEmptyString) {
    time_string_->clear();
  }
  clear_has_time_string();
}
inline const ::std::string& LevelMQ::time_string() const {
  return *time_string_;
}
inline void LevelMQ::set_time_string(const ::std::string& value) {
  set_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    time_string_ = new ::std::string;
  }
  time_string_->assign(value);
}
inline void LevelMQ::set_time_string(const char* value) {
  set_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    time_string_ = new ::std::string;
  }
  time_string_->assign(value);
}
inline void LevelMQ::set_time_string(const char* value, size_t size) {
  set_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    time_string_ = new ::std::string;
  }
  time_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LevelMQ::mutable_time_string() {
  set_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    time_string_ = new ::std::string;
  }
  return time_string_;
}
inline ::std::string* LevelMQ::release_time_string() {
  clear_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_string_;
    time_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LevelMQ::set_allocated_time_string(::std::string* time_string) {
  if (time_string_ != &::google::protobuf::internal::kEmptyString) {
    delete time_string_;
  }
  if (time_string) {
    set_has_time_string();
    time_string_ = time_string;
  } else {
    clear_has_time_string();
    time_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// QueryLevelMQ

// required string table_name = 1;
inline bool QueryLevelMQ::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryLevelMQ::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryLevelMQ::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryLevelMQ::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& QueryLevelMQ::table_name() const {
  return *table_name_;
}
inline void QueryLevelMQ::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void QueryLevelMQ::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void QueryLevelMQ::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryLevelMQ::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* QueryLevelMQ::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QueryLevelMQ::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 2;
inline bool QueryLevelMQ::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryLevelMQ::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryLevelMQ::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryLevelMQ::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& QueryLevelMQ::type() const {
  return *type_;
}
inline void QueryLevelMQ::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void QueryLevelMQ::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void QueryLevelMQ::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryLevelMQ::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* QueryLevelMQ::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void QueryLevelMQ::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 start = 3;
inline bool QueryLevelMQ::has_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryLevelMQ::set_has_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryLevelMQ::clear_has_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryLevelMQ::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
  clear_has_start();
}
inline ::google::protobuf::int64 QueryLevelMQ::start() const {
  return start_;
}
inline void QueryLevelMQ::set_start(::google::protobuf::int64 value) {
  set_has_start();
  start_ = value;
}

// required int64 end = 4;
inline bool QueryLevelMQ::has_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryLevelMQ::set_has_end() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryLevelMQ::clear_has_end() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryLevelMQ::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
  clear_has_end();
}
inline ::google::protobuf::int64 QueryLevelMQ::end() const {
  return end_;
}
inline void QueryLevelMQ::set_end(::google::protobuf::int64 value) {
  set_has_end();
  end_ = value;
}

// required int32 level = 5;
inline bool QueryLevelMQ::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryLevelMQ::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryLevelMQ::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryLevelMQ::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 QueryLevelMQ::level() const {
  return level_;
}
inline void QueryLevelMQ::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 number = 6;
inline bool QueryLevelMQ::has_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryLevelMQ::set_has_number() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryLevelMQ::clear_has_number() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryLevelMQ::clear_number() {
  number_ = 0;
  clear_has_number();
}
inline ::google::protobuf::int32 QueryLevelMQ::number() const {
  return number_;
}
inline void QueryLevelMQ::set_number(::google::protobuf::int32 value) {
  set_has_number();
  number_ = value;
}

// -------------------------------------------------------------------

// LevelMQTotal

// required string table_name = 1;
inline bool LevelMQTotal::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LevelMQTotal::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LevelMQTotal::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LevelMQTotal::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& LevelMQTotal::table_name() const {
  return *table_name_;
}
inline void LevelMQTotal::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void LevelMQTotal::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void LevelMQTotal::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LevelMQTotal::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* LevelMQTotal::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LevelMQTotal::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 2;
inline bool LevelMQTotal::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LevelMQTotal::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LevelMQTotal::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LevelMQTotal::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& LevelMQTotal::type() const {
  return *type_;
}
inline void LevelMQTotal::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void LevelMQTotal::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void LevelMQTotal::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LevelMQTotal::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* LevelMQTotal::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LevelMQTotal::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 3;
inline bool LevelMQTotal::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LevelMQTotal::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LevelMQTotal::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LevelMQTotal::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 LevelMQTotal::level() const {
  return level_;
}
inline void LevelMQTotal::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 total = 4;
inline bool LevelMQTotal::has_total() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LevelMQTotal::set_has_total() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LevelMQTotal::clear_has_total() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LevelMQTotal::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 LevelMQTotal::total() const {
  return total_;
}
inline void LevelMQTotal::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
}

// -------------------------------------------------------------------

// BacktestingLevelMQ

// required int64 time = 1;
inline bool BacktestingLevelMQ::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BacktestingLevelMQ::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BacktestingLevelMQ::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BacktestingLevelMQ::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 BacktestingLevelMQ::time() const {
  return time_;
}
inline void BacktestingLevelMQ::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// required string time_string = 2;
inline bool BacktestingLevelMQ::has_time_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BacktestingLevelMQ::set_has_time_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BacktestingLevelMQ::clear_has_time_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BacktestingLevelMQ::clear_time_string() {
  if (time_string_ != &::google::protobuf::internal::kEmptyString) {
    time_string_->clear();
  }
  clear_has_time_string();
}
inline const ::std::string& BacktestingLevelMQ::time_string() const {
  return *time_string_;
}
inline void BacktestingLevelMQ::set_time_string(const ::std::string& value) {
  set_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    time_string_ = new ::std::string;
  }
  time_string_->assign(value);
}
inline void BacktestingLevelMQ::set_time_string(const char* value) {
  set_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    time_string_ = new ::std::string;
  }
  time_string_->assign(value);
}
inline void BacktestingLevelMQ::set_time_string(const char* value, size_t size) {
  set_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    time_string_ = new ::std::string;
  }
  time_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BacktestingLevelMQ::mutable_time_string() {
  set_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    time_string_ = new ::std::string;
  }
  return time_string_;
}
inline ::std::string* BacktestingLevelMQ::release_time_string() {
  clear_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_string_;
    time_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BacktestingLevelMQ::set_allocated_time_string(::std::string* time_string) {
  if (time_string_ != &::google::protobuf::internal::kEmptyString) {
    delete time_string_;
  }
  if (time_string) {
    set_has_time_string();
    time_string_ = time_string;
  } else {
    clear_has_time_string();
    time_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double open = 3;
inline bool BacktestingLevelMQ::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BacktestingLevelMQ::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BacktestingLevelMQ::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BacktestingLevelMQ::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline double BacktestingLevelMQ::open() const {
  return open_;
}
inline void BacktestingLevelMQ::set_open(double value) {
  set_has_open();
  open_ = value;
}

// required double high = 4;
inline bool BacktestingLevelMQ::has_high() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BacktestingLevelMQ::set_has_high() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BacktestingLevelMQ::clear_has_high() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BacktestingLevelMQ::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline double BacktestingLevelMQ::high() const {
  return high_;
}
inline void BacktestingLevelMQ::set_high(double value) {
  set_has_high();
  high_ = value;
}

// required double low = 5;
inline bool BacktestingLevelMQ::has_low() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BacktestingLevelMQ::set_has_low() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BacktestingLevelMQ::clear_has_low() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BacktestingLevelMQ::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline double BacktestingLevelMQ::low() const {
  return low_;
}
inline void BacktestingLevelMQ::set_low(double value) {
  set_has_low();
  low_ = value;
}

// required double close = 6;
inline bool BacktestingLevelMQ::has_close() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BacktestingLevelMQ::set_has_close() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BacktestingLevelMQ::clear_has_close() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BacktestingLevelMQ::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline double BacktestingLevelMQ::close() const {
  return close_;
}
inline void BacktestingLevelMQ::set_close(double value) {
  set_has_close();
  close_ = value;
}

// -------------------------------------------------------------------

// BacktestingLevelMQList

// required string table_name = 1;
inline bool BacktestingLevelMQList::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BacktestingLevelMQList::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BacktestingLevelMQList::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BacktestingLevelMQList::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& BacktestingLevelMQList::table_name() const {
  return *table_name_;
}
inline void BacktestingLevelMQList::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void BacktestingLevelMQList::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void BacktestingLevelMQList::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BacktestingLevelMQList::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* BacktestingLevelMQList::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BacktestingLevelMQList::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 2;
inline bool BacktestingLevelMQList::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BacktestingLevelMQList::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BacktestingLevelMQList::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BacktestingLevelMQList::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& BacktestingLevelMQList::type() const {
  return *type_;
}
inline void BacktestingLevelMQList::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void BacktestingLevelMQList::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void BacktestingLevelMQList::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BacktestingLevelMQList::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* BacktestingLevelMQList::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BacktestingLevelMQList::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 3;
inline bool BacktestingLevelMQList::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BacktestingLevelMQList::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BacktestingLevelMQList::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BacktestingLevelMQList::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 BacktestingLevelMQList::level() const {
  return level_;
}
inline void BacktestingLevelMQList::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 total = 4;
inline bool BacktestingLevelMQList::has_total() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BacktestingLevelMQList::set_has_total() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BacktestingLevelMQList::clear_has_total() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BacktestingLevelMQList::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 BacktestingLevelMQList::total() const {
  return total_;
}
inline void BacktestingLevelMQList::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
}

// required int32 index = 5;
inline bool BacktestingLevelMQList::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BacktestingLevelMQList::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BacktestingLevelMQList::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BacktestingLevelMQList::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 BacktestingLevelMQList::index() const {
  return index_;
}
inline void BacktestingLevelMQList::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// repeated .ctp.mq.BacktestingLevelMQ data = 6;
inline int BacktestingLevelMQList::data_size() const {
  return data_.size();
}
inline void BacktestingLevelMQList::clear_data() {
  data_.Clear();
}
inline const ::ctp::mq::BacktestingLevelMQ& BacktestingLevelMQList::data(int index) const {
  return data_.Get(index);
}
inline ::ctp::mq::BacktestingLevelMQ* BacktestingLevelMQList::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::ctp::mq::BacktestingLevelMQ* BacktestingLevelMQList::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ctp::mq::BacktestingLevelMQ >&
BacktestingLevelMQList::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ctp::mq::BacktestingLevelMQ >*
BacktestingLevelMQList::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// BacktestingLevelMQ2

// required int64 time = 1;
inline bool BacktestingLevelMQ2::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BacktestingLevelMQ2::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BacktestingLevelMQ2::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BacktestingLevelMQ2::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 BacktestingLevelMQ2::time() const {
  return time_;
}
inline void BacktestingLevelMQ2::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// required string time_string = 2;
inline bool BacktestingLevelMQ2::has_time_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BacktestingLevelMQ2::set_has_time_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BacktestingLevelMQ2::clear_has_time_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BacktestingLevelMQ2::clear_time_string() {
  if (time_string_ != &::google::protobuf::internal::kEmptyString) {
    time_string_->clear();
  }
  clear_has_time_string();
}
inline const ::std::string& BacktestingLevelMQ2::time_string() const {
  return *time_string_;
}
inline void BacktestingLevelMQ2::set_time_string(const ::std::string& value) {
  set_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    time_string_ = new ::std::string;
  }
  time_string_->assign(value);
}
inline void BacktestingLevelMQ2::set_time_string(const char* value) {
  set_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    time_string_ = new ::std::string;
  }
  time_string_->assign(value);
}
inline void BacktestingLevelMQ2::set_time_string(const char* value, size_t size) {
  set_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    time_string_ = new ::std::string;
  }
  time_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BacktestingLevelMQ2::mutable_time_string() {
  set_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    time_string_ = new ::std::string;
  }
  return time_string_;
}
inline ::std::string* BacktestingLevelMQ2::release_time_string() {
  clear_has_time_string();
  if (time_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_string_;
    time_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BacktestingLevelMQ2::set_allocated_time_string(::std::string* time_string) {
  if (time_string_ != &::google::protobuf::internal::kEmptyString) {
    delete time_string_;
  }
  if (time_string) {
    set_has_time_string();
    time_string_ = time_string;
  } else {
    clear_has_time_string();
    time_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double open = 3;
inline bool BacktestingLevelMQ2::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BacktestingLevelMQ2::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BacktestingLevelMQ2::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BacktestingLevelMQ2::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline double BacktestingLevelMQ2::open() const {
  return open_;
}
inline void BacktestingLevelMQ2::set_open(double value) {
  set_has_open();
  open_ = value;
}

// required double high = 4;
inline bool BacktestingLevelMQ2::has_high() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BacktestingLevelMQ2::set_has_high() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BacktestingLevelMQ2::clear_has_high() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BacktestingLevelMQ2::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline double BacktestingLevelMQ2::high() const {
  return high_;
}
inline void BacktestingLevelMQ2::set_high(double value) {
  set_has_high();
  high_ = value;
}

// required double low = 5;
inline bool BacktestingLevelMQ2::has_low() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BacktestingLevelMQ2::set_has_low() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BacktestingLevelMQ2::clear_has_low() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BacktestingLevelMQ2::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline double BacktestingLevelMQ2::low() const {
  return low_;
}
inline void BacktestingLevelMQ2::set_low(double value) {
  set_has_low();
  low_ = value;
}

// required double close = 6;
inline bool BacktestingLevelMQ2::has_close() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BacktestingLevelMQ2::set_has_close() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BacktestingLevelMQ2::clear_has_close() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BacktestingLevelMQ2::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline double BacktestingLevelMQ2::close() const {
  return close_;
}
inline void BacktestingLevelMQ2::set_close(double value) {
  set_has_close();
  close_ = value;
}

// required int32 next_level_mq_index = 7;
inline bool BacktestingLevelMQ2::has_next_level_mq_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BacktestingLevelMQ2::set_has_next_level_mq_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BacktestingLevelMQ2::clear_has_next_level_mq_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BacktestingLevelMQ2::clear_next_level_mq_index() {
  next_level_mq_index_ = 0;
  clear_has_next_level_mq_index();
}
inline ::google::protobuf::int32 BacktestingLevelMQ2::next_level_mq_index() const {
  return next_level_mq_index_;
}
inline void BacktestingLevelMQ2::set_next_level_mq_index(::google::protobuf::int32 value) {
  set_has_next_level_mq_index();
  next_level_mq_index_ = value;
}

// -------------------------------------------------------------------

// BacktestingLevelMQList2

// required string table_name = 1;
inline bool BacktestingLevelMQList2::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BacktestingLevelMQList2::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BacktestingLevelMQList2::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BacktestingLevelMQList2::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& BacktestingLevelMQList2::table_name() const {
  return *table_name_;
}
inline void BacktestingLevelMQList2::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void BacktestingLevelMQList2::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void BacktestingLevelMQList2::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BacktestingLevelMQList2::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* BacktestingLevelMQList2::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BacktestingLevelMQList2::set_allocated_table_name(::std::string* table_name) {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (table_name) {
    set_has_table_name();
    table_name_ = table_name;
  } else {
    clear_has_table_name();
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 2;
inline bool BacktestingLevelMQList2::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BacktestingLevelMQList2::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BacktestingLevelMQList2::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BacktestingLevelMQList2::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& BacktestingLevelMQList2::type() const {
  return *type_;
}
inline void BacktestingLevelMQList2::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void BacktestingLevelMQList2::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void BacktestingLevelMQList2::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BacktestingLevelMQList2::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* BacktestingLevelMQList2::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BacktestingLevelMQList2::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 3;
inline bool BacktestingLevelMQList2::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BacktestingLevelMQList2::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BacktestingLevelMQList2::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BacktestingLevelMQList2::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 BacktestingLevelMQList2::level() const {
  return level_;
}
inline void BacktestingLevelMQList2::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 total = 4;
inline bool BacktestingLevelMQList2::has_total() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BacktestingLevelMQList2::set_has_total() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BacktestingLevelMQList2::clear_has_total() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BacktestingLevelMQList2::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 BacktestingLevelMQList2::total() const {
  return total_;
}
inline void BacktestingLevelMQList2::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
}

// required int32 index = 5;
inline bool BacktestingLevelMQList2::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BacktestingLevelMQList2::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BacktestingLevelMQList2::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BacktestingLevelMQList2::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 BacktestingLevelMQList2::index() const {
  return index_;
}
inline void BacktestingLevelMQList2::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// repeated .ctp.mq.BacktestingLevelMQ2 data = 6;
inline int BacktestingLevelMQList2::data_size() const {
  return data_.size();
}
inline void BacktestingLevelMQList2::clear_data() {
  data_.Clear();
}
inline const ::ctp::mq::BacktestingLevelMQ2& BacktestingLevelMQList2::data(int index) const {
  return data_.Get(index);
}
inline ::ctp::mq::BacktestingLevelMQ2* BacktestingLevelMQList2::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::ctp::mq::BacktestingLevelMQ2* BacktestingLevelMQList2::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ctp::mq::BacktestingLevelMQ2 >&
BacktestingLevelMQList2::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ctp::mq::BacktestingLevelMQ2 >*
BacktestingLevelMQList2::mutable_data() {
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mq
}  // namespace ctp

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mq_5fprotomsg_2eproto__INCLUDED
