// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cp_comunication.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cp_comunication.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ctp {
namespace cp {

namespace {

const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* MQLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MQLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* Account_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Account_reflection_ = NULL;
const ::google::protobuf::Descriptor* BacktestingExpectAssetList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BacktestingExpectAssetList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BacktestingExpectAssetQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BacktestingExpectAssetQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* BacktestingResultSave2DBRequery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BacktestingResultSave2DBRequery_reflection_ = NULL;
const ::google::protobuf::Descriptor* BacktestingResultSave2DBRequery_BacktestingResultItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BacktestingResultSave2DBRequery_BacktestingResultItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BacktestingResultSave2DBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BacktestingResultSave2DBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* test1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test1_reflection_ = NULL;
const ::google::protobuf::Descriptor* test2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test2_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cp_5fcomunication_2eproto() {
  protobuf_AddDesc_cp_5fcomunication_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cp_comunication.proto");
  GOOGLE_CHECK(file != NULL);
  Command_descriptor_ = file->message_type(0);
  static const int Command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, params_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  MQLevel_descriptor_ = file->message_type(1);
  static const int MQLevel_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MQLevel, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MQLevel, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MQLevel, utc_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MQLevel, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MQLevel, open_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MQLevel, high_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MQLevel, low_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MQLevel, close_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MQLevel, volumn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MQLevel, counter_),
  };
  MQLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MQLevel_descriptor_,
      MQLevel::default_instance_,
      MQLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MQLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MQLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MQLevel));
  TradeResult_descriptor_ = file->message_type(2);
  static const int TradeResult_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, ms_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, os_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, ms_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, os_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, ms_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, total_cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, average_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, ms_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, total_volumn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, traded_volumn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, oc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, bs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, over_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, cost_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, last_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, withdraw_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, level_),
  };
  TradeResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeResult_descriptor_,
      TradeResult::default_instance_,
      TradeResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeResult));
  LoginStatus_descriptor_ = file->message_type(3);
  static const int LoginStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginStatus, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginStatus, time_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginStatus, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginStatus, error_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginStatus, error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginStatus, ip_),
  };
  LoginStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginStatus_descriptor_,
      LoginStatus::default_instance_,
      LoginStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginStatus));
  Position_descriptor_ = file->message_type(4);
  static const int Position_offsets_[45] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, time_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, price_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, stop_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, posidirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, hedgeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, positiondate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, ydposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, longfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, shortfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, longfrozenamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, shortfrozenamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, openvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, closevolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, openamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, closeamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, positioncost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, premargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, usemargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, frozenmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, frozencash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, frozencommission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, cashin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, commission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, closeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, positionprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, presettlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, settlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, opencost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, exchangemargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, combposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, comblongfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, combshortfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, closeprofitbydate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, closeprofitbytrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, todayposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, marginratebymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, marginratebyvolume_),
  };
  Position_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Position));
  Account_descriptor_ = file->message_type(5);
  static const int Account_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, time_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, premortgage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, precredit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, predeposit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, prebalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, premargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, interestbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, deposit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, withdraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, frozenmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, frozencash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, frozencommission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, currmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, cashin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, commission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, closeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, positionprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, withdrawquota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, reserve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, mortgage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, exchangemargin_),
  };
  Account_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Account_descriptor_,
      Account::default_instance_,
      Account_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Account));
  BacktestingExpectAssetList_descriptor_ = file->message_type(6);
  static const int BacktestingExpectAssetList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingExpectAssetList, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingExpectAssetList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingExpectAssetList, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingExpectAssetList, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingExpectAssetList, data_),
  };
  BacktestingExpectAssetList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BacktestingExpectAssetList_descriptor_,
      BacktestingExpectAssetList::default_instance_,
      BacktestingExpectAssetList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingExpectAssetList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingExpectAssetList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BacktestingExpectAssetList));
  BacktestingExpectAssetQuery_descriptor_ = file->message_type(7);
  static const int BacktestingExpectAssetQuery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingExpectAssetQuery, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingExpectAssetQuery, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingExpectAssetQuery, level_),
  };
  BacktestingExpectAssetQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BacktestingExpectAssetQuery_descriptor_,
      BacktestingExpectAssetQuery::default_instance_,
      BacktestingExpectAssetQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingExpectAssetQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingExpectAssetQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BacktestingExpectAssetQuery));
  BacktestingResultSave2DBRequery_descriptor_ = file->message_type(8);
  static const int BacktestingResultSave2DBRequery_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingResultSave2DBRequery, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingResultSave2DBRequery, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingResultSave2DBRequery, chart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingResultSave2DBRequery, data_),
  };
  BacktestingResultSave2DBRequery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BacktestingResultSave2DBRequery_descriptor_,
      BacktestingResultSave2DBRequery::default_instance_,
      BacktestingResultSave2DBRequery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingResultSave2DBRequery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingResultSave2DBRequery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BacktestingResultSave2DBRequery));
  BacktestingResultSave2DBRequery_BacktestingResultItem_descriptor_ = BacktestingResultSave2DBRequery_descriptor_->nested_type(0);
  static const int BacktestingResultSave2DBRequery_BacktestingResultItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingResultSave2DBRequery_BacktestingResultItem, time_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingResultSave2DBRequery_BacktestingResultItem, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingResultSave2DBRequery_BacktestingResultItem, money_),
  };
  BacktestingResultSave2DBRequery_BacktestingResultItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BacktestingResultSave2DBRequery_BacktestingResultItem_descriptor_,
      BacktestingResultSave2DBRequery_BacktestingResultItem::default_instance_,
      BacktestingResultSave2DBRequery_BacktestingResultItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingResultSave2DBRequery_BacktestingResultItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingResultSave2DBRequery_BacktestingResultItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BacktestingResultSave2DBRequery_BacktestingResultItem));
  BacktestingResultSave2DBResponse_descriptor_ = file->message_type(9);
  static const int BacktestingResultSave2DBResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingResultSave2DBResponse, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingResultSave2DBResponse, progress_),
  };
  BacktestingResultSave2DBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BacktestingResultSave2DBResponse_descriptor_,
      BacktestingResultSave2DBResponse::default_instance_,
      BacktestingResultSave2DBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingResultSave2DBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingResultSave2DBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BacktestingResultSave2DBResponse));
  test1_descriptor_ = file->message_type(10);
  static const int test1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test1, s_),
  };
  test1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test1_descriptor_,
      test1::default_instance_,
      test1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test1));
  test2_descriptor_ = file->message_type(11);
  static const int test2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test2, s2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test2, t2_),
  };
  test2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test2_descriptor_,
      test2::default_instance_,
      test2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test2));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cp_5fcomunication_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MQLevel_descriptor_, &MQLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeResult_descriptor_, &TradeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginStatus_descriptor_, &LoginStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Account_descriptor_, &Account::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BacktestingExpectAssetList_descriptor_, &BacktestingExpectAssetList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BacktestingExpectAssetQuery_descriptor_, &BacktestingExpectAssetQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BacktestingResultSave2DBRequery_descriptor_, &BacktestingResultSave2DBRequery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BacktestingResultSave2DBRequery_BacktestingResultItem_descriptor_, &BacktestingResultSave2DBRequery_BacktestingResultItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BacktestingResultSave2DBResponse_descriptor_, &BacktestingResultSave2DBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test1_descriptor_, &test1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test2_descriptor_, &test2::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cp_5fcomunication_2eproto() {
  delete Command::default_instance_;
  delete Command_reflection_;
  delete MQLevel::default_instance_;
  delete MQLevel_reflection_;
  delete TradeResult::default_instance_;
  delete TradeResult_reflection_;
  delete LoginStatus::default_instance_;
  delete LoginStatus_reflection_;
  delete Position::default_instance_;
  delete Position_reflection_;
  delete Account::default_instance_;
  delete Account_reflection_;
  delete BacktestingExpectAssetList::default_instance_;
  delete BacktestingExpectAssetList_reflection_;
  delete BacktestingExpectAssetQuery::default_instance_;
  delete BacktestingExpectAssetQuery_reflection_;
  delete BacktestingResultSave2DBRequery::default_instance_;
  delete BacktestingResultSave2DBRequery_reflection_;
  delete BacktestingResultSave2DBRequery_BacktestingResultItem::default_instance_;
  delete BacktestingResultSave2DBRequery_BacktestingResultItem_reflection_;
  delete BacktestingResultSave2DBResponse::default_instance_;
  delete BacktestingResultSave2DBResponse_reflection_;
  delete test1::default_instance_;
  delete test1_reflection_;
  delete test2::default_instance_;
  delete test2_reflection_;
}

void protobuf_AddDesc_cp_5fcomunication_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025cp_comunication.proto\022\006ctp.cp\"&\n\007Comma"
    "nd\022\013\n\003cmd\030\001 \002(\t\022\016\n\006params\030\002 \003(\t\"\270\001\n\007MQLe"
    "vel\022\014\n\004type\030\001 \002(\t\022\r\n\005level\030\002 \002(\005\022\022\n\nutc_"
    "string\030\003 \002(\t\022\013\n\003utc\030\004 \002(\003\022\022\n\nopen_price\030"
    "\005 \002(\001\022\022\n\nhigh_price\030\006 \002(\001\022\021\n\tlow_price\030\007"
    " \002(\001\022\023\n\013close_price\030\010 \002(\001\022\016\n\006volumn\030\t \002("
    "\005\022\017\n\007counter\030\n \002(\005\"\361\002\n\013TradeResult\022\014\n\004us"
    "er\030\001 \002(\t\022\014\n\004type\030\002 \002(\t\022\017\n\007ms_name\030\003 \002(\t\022"
    "\017\n\007os_name\030\004 \002(\t\022\r\n\005ms_id\030\005 \002(\t\022\r\n\005os_id"
    "\030\006 \002(\t\022\017\n\007ms_time\030\007 \002(\003\022\022\n\ntotal_cash\030\010 "
    "\002(\001\022\025\n\raverage_price\030\t \002(\001\022\020\n\010ms_price\030\n"
    " \002(\001\022\024\n\014total_volumn\030\013 \002(\005\022\025\n\rtraded_vol"
    "umn\030\014 \002(\005\022\n\n\002oc\030\r \002(\005\022\n\n\002bs\030\016 \002(\005\022\022\n\nsta"
    "rt_time\030\017 \002(\003\022\021\n\tover_time\030\020 \002(\003\022\021\n\tcost"
    "_time\030\021 \002(\003\022\022\n\nlast_error\030\022 \002(\t\022\026\n\016withd"
    "raw_times\030\023 \002(\005\022\r\n\005level\030\024 \002(\005\"o\n\013LoginS"
    "tatus\022\014\n\004time\030\001 \002(\003\022\023\n\013time_string\030\002 \002(\t"
    "\022\014\n\004user\030\003 \002(\t\022\020\n\010error_id\030\004 \002(\005\022\021\n\terro"
    "r_msg\030\005 \002(\t\022\n\n\002ip\030\006 \002(\t\"\334\007\n\010Position\022\014\n\004"
    "time\030\001 \002(\003\022\023\n\013time_string\030\002 \002(\t\022\014\n\004user\030"
    "\003 \002(\t\022\023\n\013price_index\030\004 \002(\001\022\022\n\nstop_price"
    "\030\005 \002(\001\022\024\n\014instrumentid\030\006 \002(\t\022\020\n\010brokerid"
    "\030\007 \002(\t\022\022\n\ninvestorid\030\010 \002(\t\022\025\n\rposidirect"
    "ion\030\t \002(\005\022\021\n\thedgeflag\030\n \002(\005\022\024\n\014position"
    "date\030\013 \002(\005\022\022\n\nydposition\030\014 \002(\005\022\020\n\010positi"
    "on\030\r \002(\005\022\022\n\nlongfrozen\030\016 \002(\005\022\023\n\013shortfro"
    "zen\030\017 \002(\005\022\030\n\020longfrozenamount\030\020 \002(\001\022\031\n\021s"
    "hortfrozenamount\030\021 \002(\001\022\022\n\nopenvolume\030\022 \002"
    "(\005\022\023\n\013closevolume\030\023 \002(\005\022\022\n\nopenamount\030\024 "
    "\002(\001\022\023\n\013closeamount\030\025 \002(\001\022\024\n\014positioncost"
    "\030\026 \002(\001\022\021\n\tpremargin\030\027 \002(\001\022\021\n\tusemargin\030\030"
    " \002(\001\022\024\n\014frozenmargin\030\031 \002(\001\022\022\n\nfrozencash"
    "\030\032 \002(\001\022\030\n\020frozencommission\030\033 \002(\001\022\016\n\006cash"
    "in\030\034 \002(\001\022\022\n\ncommission\030\035 \002(\001\022\023\n\013closepro"
    "fit\030\036 \002(\001\022\026\n\016positionprofit\030\037 \002(\001\022\032\n\022pre"
    "settlementprice\030  \002(\001\022\027\n\017settlementprice"
    "\030! \002(\001\022\022\n\ntradingday\030\" \002(\t\022\024\n\014settlement"
    "id\030# \002(\005\022\020\n\010opencost\030$ \002(\001\022\026\n\016exchangema"
    "rgin\030% \002(\001\022\024\n\014combposition\030& \002(\005\022\026\n\016comb"
    "longfrozen\030\' \002(\005\022\027\n\017combshortfrozen\030( \002("
    "\005\022\031\n\021closeprofitbydate\030) \002(\001\022\032\n\022closepro"
    "fitbytrade\030* \002(\001\022\025\n\rtodayposition\030+ \002(\005\022"
    "\031\n\021marginratebymoney\030, \002(\001\022\032\n\022marginrate"
    "byvolume\030- \002(\001\"\346\004\n\007Account\022\014\n\004time\030\001 \002(\003"
    "\022\023\n\013time_string\030\002 \002(\t\022\014\n\004user\030\003 \002(\t\022\020\n\010b"
    "rokerid\030\004 \002(\t\022\021\n\taccountid\030\005 \002(\t\022\023\n\013prem"
    "ortgage\030\006 \002(\001\022\021\n\tprecredit\030\007 \002(\001\022\022\n\npred"
    "eposit\030\010 \002(\001\022\022\n\nprebalance\030\t \002(\001\022\021\n\tprem"
    "argin\030\n \002(\001\022\024\n\014interestbase\030\013 \002(\001\022\020\n\010int"
    "erest\030\014 \002(\001\022\017\n\007deposit\030\r \002(\001\022\020\n\010withdraw"
    "\030\016 \002(\001\022\024\n\014frozenmargin\030\017 \002(\001\022\022\n\nfrozenca"
    "sh\030\020 \002(\001\022\030\n\020frozencommission\030\021 \002(\001\022\022\n\ncu"
    "rrmargin\030\022 \002(\001\022\016\n\006cashin\030\023 \002(\001\022\022\n\ncommis"
    "sion\030\024 \002(\001\022\023\n\013closeprofit\030\025 \002(\001\022\026\n\016posit"
    "ionprofit\030\026 \002(\001\022\017\n\007balance\030\027 \002(\001\022\021\n\tavai"
    "lable\030\030 \002(\001\022\025\n\rwithdrawquota\030\031 \002(\001\022\017\n\007re"
    "serve\030\032 \002(\001\022\022\n\ntradingday\030\033 \002(\t\022\024\n\014settl"
    "ementid\030\034 \002(\005\022\016\n\006credit\030\035 \002(\001\022\020\n\010mortgag"
    "e\030\036 \002(\001\022\026\n\016exchangemargin\030\037 \002(\001\"j\n\032Backt"
    "estingExpectAssetList\022\022\n\ntable_name\030\001 \002("
    "\t\022\014\n\004type\030\002 \002(\t\022\r\n\005level\030\003 \002(\005\022\r\n\005total\030"
    "\004 \002(\005\022\014\n\004data\030\005 \003(\001\"N\n\033BacktestingExpect"
    "AssetQuery\022\022\n\ntable_name\030\001 \002(\t\022\014\n\004type\030\002"
    " \002(\t\022\r\n\005level\030\003 \002(\005\"\353\001\n\037BacktestingResul"
    "tSave2DBRequery\022\022\n\ntable_name\030\001 \002(\t\022\r\n\005t"
    "otal\030\002 \002(\005\022\r\n\005chart\030\003 \002(\005\022K\n\004data\030\004 \003(\0132"
    "=.ctp.cp.BacktestingResultSave2DBRequery"
    ".BacktestingResultItem\032I\n\025BacktestingRes"
    "ultItem\022\023\n\013time_string\030\001 \002(\t\022\014\n\004time\030\002 \002"
    "(\003\022\r\n\005money\030\003 \002(\001\"H\n BacktestingResultSa"
    "ve2DBResponse\022\022\n\ntable_name\030\001 \002(\t\022\020\n\010pro"
    "gress\030\002 \002(\005\"\022\n\005test1\022\t\n\001s\030\001 \002(\t\".\n\005test2"
    "\022\n\n\002s2\030\001 \002(\t\022\031\n\002t2\030\002 \002(\0132\r.ctp.cp.test1", 2919);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cp_comunication.proto", &protobuf_RegisterTypes);
  Command::default_instance_ = new Command();
  MQLevel::default_instance_ = new MQLevel();
  TradeResult::default_instance_ = new TradeResult();
  LoginStatus::default_instance_ = new LoginStatus();
  Position::default_instance_ = new Position();
  Account::default_instance_ = new Account();
  BacktestingExpectAssetList::default_instance_ = new BacktestingExpectAssetList();
  BacktestingExpectAssetQuery::default_instance_ = new BacktestingExpectAssetQuery();
  BacktestingResultSave2DBRequery::default_instance_ = new BacktestingResultSave2DBRequery();
  BacktestingResultSave2DBRequery_BacktestingResultItem::default_instance_ = new BacktestingResultSave2DBRequery_BacktestingResultItem();
  BacktestingResultSave2DBResponse::default_instance_ = new BacktestingResultSave2DBResponse();
  test1::default_instance_ = new test1();
  test2::default_instance_ = new test2();
  Command::default_instance_->InitAsDefaultInstance();
  MQLevel::default_instance_->InitAsDefaultInstance();
  TradeResult::default_instance_->InitAsDefaultInstance();
  LoginStatus::default_instance_->InitAsDefaultInstance();
  Position::default_instance_->InitAsDefaultInstance();
  Account::default_instance_->InitAsDefaultInstance();
  BacktestingExpectAssetList::default_instance_->InitAsDefaultInstance();
  BacktestingExpectAssetQuery::default_instance_->InitAsDefaultInstance();
  BacktestingResultSave2DBRequery::default_instance_->InitAsDefaultInstance();
  BacktestingResultSave2DBRequery_BacktestingResultItem::default_instance_->InitAsDefaultInstance();
  BacktestingResultSave2DBResponse::default_instance_->InitAsDefaultInstance();
  test1::default_instance_->InitAsDefaultInstance();
  test2::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cp_5fcomunication_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cp_5fcomunication_2eproto {
  StaticDescriptorInitializer_cp_5fcomunication_2eproto() {
    protobuf_AddDesc_cp_5fcomunication_2eproto();
  }
} static_descriptor_initializer_cp_5fcomunication_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Command::kCmdFieldNumber;
const int Command::kParamsFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cp_5fcomunication_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_params;
        break;
      }

      // repeated string params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->params(this->params_size() - 1).data(),
            this->params(this->params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmd(), output);
  }

  // repeated string params = 2;
  for (int i = 0; i < this->params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->params(i).data(), this->params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }

  // repeated string params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params(i).data(), this->params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }

  }
  // repeated string params = 2;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MQLevel::kTypeFieldNumber;
const int MQLevel::kLevelFieldNumber;
const int MQLevel::kUtcStringFieldNumber;
const int MQLevel::kUtcFieldNumber;
const int MQLevel::kOpenPriceFieldNumber;
const int MQLevel::kHighPriceFieldNumber;
const int MQLevel::kLowPriceFieldNumber;
const int MQLevel::kClosePriceFieldNumber;
const int MQLevel::kVolumnFieldNumber;
const int MQLevel::kCounterFieldNumber;
#endif  // !_MSC_VER

MQLevel::MQLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MQLevel::InitAsDefaultInstance() {
}

MQLevel::MQLevel(const MQLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MQLevel::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  utc_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  utc_ = GOOGLE_LONGLONG(0);
  open_price_ = 0;
  high_price_ = 0;
  low_price_ = 0;
  close_price_ = 0;
  volumn_ = 0;
  counter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MQLevel::~MQLevel() {
  SharedDtor();
}

void MQLevel::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (utc_string_ != &::google::protobuf::internal::kEmptyString) {
    delete utc_string_;
  }
  if (this != default_instance_) {
  }
}

void MQLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MQLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MQLevel_descriptor_;
}

const MQLevel& MQLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cp_5fcomunication_2eproto();
  return *default_instance_;
}

MQLevel* MQLevel::default_instance_ = NULL;

MQLevel* MQLevel::New() const {
  return new MQLevel;
}

void MQLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    level_ = 0;
    if (has_utc_string()) {
      if (utc_string_ != &::google::protobuf::internal::kEmptyString) {
        utc_string_->clear();
      }
    }
    utc_ = GOOGLE_LONGLONG(0);
    open_price_ = 0;
    high_price_ = 0;
    low_price_ = 0;
    close_price_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    volumn_ = 0;
    counter_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MQLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_utc_string;
        break;
      }

      // required string utc_string = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_utc_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_utc_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->utc_string().data(), this->utc_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_utc;
        break;
      }

      // required int64 utc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_utc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_open_price;
        break;
      }

      // required double open_price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_open_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_price_)));
          set_has_open_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_high_price;
        break;
      }

      // required double high_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_high_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_price_)));
          set_has_high_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_low_price;
        break;
      }

      // required double low_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_low_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_price_)));
          set_has_low_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_close_price;
        break;
      }

      // required double close_price = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_close_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_price_)));
          set_has_close_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_volumn;
        break;
      }

      // required int32 volumn = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volumn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumn_)));
          set_has_volumn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_counter;
        break;
      }

      // required int32 counter = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counter_)));
          set_has_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MQLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required string utc_string = 3;
  if (has_utc_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->utc_string().data(), this->utc_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->utc_string(), output);
  }

  // required int64 utc = 4;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->utc(), output);
  }

  // required double open_price = 5;
  if (has_open_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->open_price(), output);
  }

  // required double high_price = 6;
  if (has_high_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->high_price(), output);
  }

  // required double low_price = 7;
  if (has_low_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->low_price(), output);
  }

  // required double close_price = 8;
  if (has_close_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->close_price(), output);
  }

  // required int32 volumn = 9;
  if (has_volumn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->volumn(), output);
  }

  // required int32 counter = 10;
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->counter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MQLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required string utc_string = 3;
  if (has_utc_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->utc_string().data(), this->utc_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->utc_string(), target);
  }

  // required int64 utc = 4;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->utc(), target);
  }

  // required double open_price = 5;
  if (has_open_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->open_price(), target);
  }

  // required double high_price = 6;
  if (has_high_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->high_price(), target);
  }

  // required double low_price = 7;
  if (has_low_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->low_price(), target);
  }

  // required double close_price = 8;
  if (has_close_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->close_price(), target);
  }

  // required int32 volumn = 9;
  if (has_volumn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->volumn(), target);
  }

  // required int32 counter = 10;
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->counter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MQLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required string utc_string = 3;
    if (has_utc_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->utc_string());
    }

    // required int64 utc = 4;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->utc());
    }

    // required double open_price = 5;
    if (has_open_price()) {
      total_size += 1 + 8;
    }

    // required double high_price = 6;
    if (has_high_price()) {
      total_size += 1 + 8;
    }

    // required double low_price = 7;
    if (has_low_price()) {
      total_size += 1 + 8;
    }

    // required double close_price = 8;
    if (has_close_price()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 volumn = 9;
    if (has_volumn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumn());
    }

    // required int32 counter = 10;
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MQLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MQLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MQLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MQLevel::MergeFrom(const MQLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_utc_string()) {
      set_utc_string(from.utc_string());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
    if (from.has_open_price()) {
      set_open_price(from.open_price());
    }
    if (from.has_high_price()) {
      set_high_price(from.high_price());
    }
    if (from.has_low_price()) {
      set_low_price(from.low_price());
    }
    if (from.has_close_price()) {
      set_close_price(from.close_price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_volumn()) {
      set_volumn(from.volumn());
    }
    if (from.has_counter()) {
      set_counter(from.counter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MQLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MQLevel::CopyFrom(const MQLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MQLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void MQLevel::Swap(MQLevel* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(utc_string_, other->utc_string_);
    std::swap(utc_, other->utc_);
    std::swap(open_price_, other->open_price_);
    std::swap(high_price_, other->high_price_);
    std::swap(low_price_, other->low_price_);
    std::swap(close_price_, other->close_price_);
    std::swap(volumn_, other->volumn_);
    std::swap(counter_, other->counter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MQLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MQLevel_descriptor_;
  metadata.reflection = MQLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeResult::kUserFieldNumber;
const int TradeResult::kTypeFieldNumber;
const int TradeResult::kMsNameFieldNumber;
const int TradeResult::kOsNameFieldNumber;
const int TradeResult::kMsIdFieldNumber;
const int TradeResult::kOsIdFieldNumber;
const int TradeResult::kMsTimeFieldNumber;
const int TradeResult::kTotalCashFieldNumber;
const int TradeResult::kAveragePriceFieldNumber;
const int TradeResult::kMsPriceFieldNumber;
const int TradeResult::kTotalVolumnFieldNumber;
const int TradeResult::kTradedVolumnFieldNumber;
const int TradeResult::kOcFieldNumber;
const int TradeResult::kBsFieldNumber;
const int TradeResult::kStartTimeFieldNumber;
const int TradeResult::kOverTimeFieldNumber;
const int TradeResult::kCostTimeFieldNumber;
const int TradeResult::kLastErrorFieldNumber;
const int TradeResult::kWithdrawTimesFieldNumber;
const int TradeResult::kLevelFieldNumber;
#endif  // !_MSC_VER

TradeResult::TradeResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeResult::InitAsDefaultInstance() {
}

TradeResult::TradeResult(const TradeResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeResult::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ms_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ms_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ms_time_ = GOOGLE_LONGLONG(0);
  total_cash_ = 0;
  average_price_ = 0;
  ms_price_ = 0;
  total_volumn_ = 0;
  traded_volumn_ = 0;
  oc_ = 0;
  bs_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  over_time_ = GOOGLE_LONGLONG(0);
  cost_time_ = GOOGLE_LONGLONG(0);
  last_error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  withdraw_times_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeResult::~TradeResult() {
  SharedDtor();
}

void TradeResult::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (ms_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ms_name_;
  }
  if (os_name_ != &::google::protobuf::internal::kEmptyString) {
    delete os_name_;
  }
  if (ms_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ms_id_;
  }
  if (os_id_ != &::google::protobuf::internal::kEmptyString) {
    delete os_id_;
  }
  if (last_error_ != &::google::protobuf::internal::kEmptyString) {
    delete last_error_;
  }
  if (this != default_instance_) {
  }
}

void TradeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeResult_descriptor_;
}

const TradeResult& TradeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cp_5fcomunication_2eproto();
  return *default_instance_;
}

TradeResult* TradeResult::default_instance_ = NULL;

TradeResult* TradeResult::New() const {
  return new TradeResult;
}

void TradeResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_ms_name()) {
      if (ms_name_ != &::google::protobuf::internal::kEmptyString) {
        ms_name_->clear();
      }
    }
    if (has_os_name()) {
      if (os_name_ != &::google::protobuf::internal::kEmptyString) {
        os_name_->clear();
      }
    }
    if (has_ms_id()) {
      if (ms_id_ != &::google::protobuf::internal::kEmptyString) {
        ms_id_->clear();
      }
    }
    if (has_os_id()) {
      if (os_id_ != &::google::protobuf::internal::kEmptyString) {
        os_id_->clear();
      }
    }
    ms_time_ = GOOGLE_LONGLONG(0);
    total_cash_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    average_price_ = 0;
    ms_price_ = 0;
    total_volumn_ = 0;
    traded_volumn_ = 0;
    oc_ = 0;
    bs_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
    over_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    cost_time_ = GOOGLE_LONGLONG(0);
    if (has_last_error()) {
      if (last_error_ != &::google::protobuf::internal::kEmptyString) {
        last_error_->clear();
      }
    }
    withdraw_times_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ms_name;
        break;
      }

      // required string ms_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ms_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ms_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ms_name().data(), this->ms_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_os_name;
        break;
      }

      // required string os_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_name().data(), this->os_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ms_id;
        break;
      }

      // required string ms_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ms_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ms_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ms_id().data(), this->ms_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_os_id;
        break;
      }

      // required string os_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_id().data(), this->os_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ms_time;
        break;
      }

      // required int64 ms_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ms_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ms_time_)));
          set_has_ms_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_total_cash;
        break;
      }

      // required double total_cash = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_total_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_cash_)));
          set_has_total_cash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_average_price;
        break;
      }

      // required double average_price = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_average_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &average_price_)));
          set_has_average_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_ms_price;
        break;
      }

      // required double ms_price = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ms_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ms_price_)));
          set_has_ms_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_total_volumn;
        break;
      }

      // required int32 total_volumn = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_volumn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_volumn_)));
          set_has_total_volumn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_traded_volumn;
        break;
      }

      // required int32 traded_volumn = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_traded_volumn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &traded_volumn_)));
          set_has_traded_volumn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_oc;
        break;
      }

      // required int32 oc = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oc_)));
          set_has_oc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_bs;
        break;
      }

      // required int32 bs = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bs_)));
          set_has_bs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_over_time;
        break;
      }

      // required int64 over_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_over_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &over_time_)));
          set_has_over_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cost_time;
        break;
      }

      // required int64 cost_time = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cost_time_)));
          set_has_cost_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_last_error;
        break;
      }

      // required string last_error = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_error().data(), this->last_error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_withdraw_times;
        break;
      }

      // required int32 withdraw_times = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_withdraw_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &withdraw_times_)));
          set_has_withdraw_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_level;
        break;
      }

      // required int32 level = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // required string ms_name = 3;
  if (has_ms_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ms_name().data(), this->ms_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ms_name(), output);
  }

  // required string os_name = 4;
  if (has_os_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_name().data(), this->os_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->os_name(), output);
  }

  // required string ms_id = 5;
  if (has_ms_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ms_id().data(), this->ms_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ms_id(), output);
  }

  // required string os_id = 6;
  if (has_os_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_id().data(), this->os_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->os_id(), output);
  }

  // required int64 ms_time = 7;
  if (has_ms_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->ms_time(), output);
  }

  // required double total_cash = 8;
  if (has_total_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->total_cash(), output);
  }

  // required double average_price = 9;
  if (has_average_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->average_price(), output);
  }

  // required double ms_price = 10;
  if (has_ms_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->ms_price(), output);
  }

  // required int32 total_volumn = 11;
  if (has_total_volumn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->total_volumn(), output);
  }

  // required int32 traded_volumn = 12;
  if (has_traded_volumn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->traded_volumn(), output);
  }

  // required int32 oc = 13;
  if (has_oc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->oc(), output);
  }

  // required int32 bs = 14;
  if (has_bs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->bs(), output);
  }

  // required int64 start_time = 15;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->start_time(), output);
  }

  // required int64 over_time = 16;
  if (has_over_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->over_time(), output);
  }

  // required int64 cost_time = 17;
  if (has_cost_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->cost_time(), output);
  }

  // required string last_error = 18;
  if (has_last_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_error().data(), this->last_error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->last_error(), output);
  }

  // required int32 withdraw_times = 19;
  if (has_withdraw_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->withdraw_times(), output);
  }

  // required int32 level = 20;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required string ms_name = 3;
  if (has_ms_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ms_name().data(), this->ms_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ms_name(), target);
  }

  // required string os_name = 4;
  if (has_os_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_name().data(), this->os_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->os_name(), target);
  }

  // required string ms_id = 5;
  if (has_ms_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ms_id().data(), this->ms_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ms_id(), target);
  }

  // required string os_id = 6;
  if (has_os_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_id().data(), this->os_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->os_id(), target);
  }

  // required int64 ms_time = 7;
  if (has_ms_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->ms_time(), target);
  }

  // required double total_cash = 8;
  if (has_total_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->total_cash(), target);
  }

  // required double average_price = 9;
  if (has_average_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->average_price(), target);
  }

  // required double ms_price = 10;
  if (has_ms_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->ms_price(), target);
  }

  // required int32 total_volumn = 11;
  if (has_total_volumn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->total_volumn(), target);
  }

  // required int32 traded_volumn = 12;
  if (has_traded_volumn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->traded_volumn(), target);
  }

  // required int32 oc = 13;
  if (has_oc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->oc(), target);
  }

  // required int32 bs = 14;
  if (has_bs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->bs(), target);
  }

  // required int64 start_time = 15;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->start_time(), target);
  }

  // required int64 over_time = 16;
  if (has_over_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->over_time(), target);
  }

  // required int64 cost_time = 17;
  if (has_cost_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->cost_time(), target);
  }

  // required string last_error = 18;
  if (has_last_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_error().data(), this->last_error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->last_error(), target);
  }

  // required int32 withdraw_times = 19;
  if (has_withdraw_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->withdraw_times(), target);
  }

  // required int32 level = 20;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string ms_name = 3;
    if (has_ms_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ms_name());
    }

    // required string os_name = 4;
    if (has_os_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_name());
    }

    // required string ms_id = 5;
    if (has_ms_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ms_id());
    }

    // required string os_id = 6;
    if (has_os_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_id());
    }

    // required int64 ms_time = 7;
    if (has_ms_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ms_time());
    }

    // required double total_cash = 8;
    if (has_total_cash()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double average_price = 9;
    if (has_average_price()) {
      total_size += 1 + 8;
    }

    // required double ms_price = 10;
    if (has_ms_price()) {
      total_size += 1 + 8;
    }

    // required int32 total_volumn = 11;
    if (has_total_volumn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_volumn());
    }

    // required int32 traded_volumn = 12;
    if (has_traded_volumn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->traded_volumn());
    }

    // required int32 oc = 13;
    if (has_oc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oc());
    }

    // required int32 bs = 14;
    if (has_bs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bs());
    }

    // required int64 start_time = 15;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required int64 over_time = 16;
    if (has_over_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->over_time());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int64 cost_time = 17;
    if (has_cost_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cost_time());
    }

    // required string last_error = 18;
    if (has_last_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_error());
    }

    // required int32 withdraw_times = 19;
    if (has_withdraw_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->withdraw_times());
    }

    // required int32 level = 20;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeResult::MergeFrom(const TradeResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ms_name()) {
      set_ms_name(from.ms_name());
    }
    if (from.has_os_name()) {
      set_os_name(from.os_name());
    }
    if (from.has_ms_id()) {
      set_ms_id(from.ms_id());
    }
    if (from.has_os_id()) {
      set_os_id(from.os_id());
    }
    if (from.has_ms_time()) {
      set_ms_time(from.ms_time());
    }
    if (from.has_total_cash()) {
      set_total_cash(from.total_cash());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_average_price()) {
      set_average_price(from.average_price());
    }
    if (from.has_ms_price()) {
      set_ms_price(from.ms_price());
    }
    if (from.has_total_volumn()) {
      set_total_volumn(from.total_volumn());
    }
    if (from.has_traded_volumn()) {
      set_traded_volumn(from.traded_volumn());
    }
    if (from.has_oc()) {
      set_oc(from.oc());
    }
    if (from.has_bs()) {
      set_bs(from.bs());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_over_time()) {
      set_over_time(from.over_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cost_time()) {
      set_cost_time(from.cost_time());
    }
    if (from.has_last_error()) {
      set_last_error(from.last_error());
    }
    if (from.has_withdraw_times()) {
      set_withdraw_times(from.withdraw_times());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeResult::CopyFrom(const TradeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x000fffff) != 0x000fffff) return false;

  return true;
}

void TradeResult::Swap(TradeResult* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(type_, other->type_);
    std::swap(ms_name_, other->ms_name_);
    std::swap(os_name_, other->os_name_);
    std::swap(ms_id_, other->ms_id_);
    std::swap(os_id_, other->os_id_);
    std::swap(ms_time_, other->ms_time_);
    std::swap(total_cash_, other->total_cash_);
    std::swap(average_price_, other->average_price_);
    std::swap(ms_price_, other->ms_price_);
    std::swap(total_volumn_, other->total_volumn_);
    std::swap(traded_volumn_, other->traded_volumn_);
    std::swap(oc_, other->oc_);
    std::swap(bs_, other->bs_);
    std::swap(start_time_, other->start_time_);
    std::swap(over_time_, other->over_time_);
    std::swap(cost_time_, other->cost_time_);
    std::swap(last_error_, other->last_error_);
    std::swap(withdraw_times_, other->withdraw_times_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeResult_descriptor_;
  metadata.reflection = TradeResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginStatus::kTimeFieldNumber;
const int LoginStatus::kTimeStringFieldNumber;
const int LoginStatus::kUserFieldNumber;
const int LoginStatus::kErrorIdFieldNumber;
const int LoginStatus::kErrorMsgFieldNumber;
const int LoginStatus::kIpFieldNumber;
#endif  // !_MSC_VER

LoginStatus::LoginStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginStatus::InitAsDefaultInstance() {
}

LoginStatus::LoginStatus(const LoginStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginStatus::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  time_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_id_ = 0;
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginStatus::~LoginStatus() {
  SharedDtor();
}

void LoginStatus::SharedDtor() {
  if (time_string_ != &::google::protobuf::internal::kEmptyString) {
    delete time_string_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void LoginStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginStatus_descriptor_;
}

const LoginStatus& LoginStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cp_5fcomunication_2eproto();
  return *default_instance_;
}

LoginStatus* LoginStatus::default_instance_ = NULL;

LoginStatus* LoginStatus::New() const {
  return new LoginStatus;
}

void LoginStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_time_string()) {
      if (time_string_ != &::google::protobuf::internal::kEmptyString) {
        time_string_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    error_id_ = 0;
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
        error_msg_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_time_string;
        break;
      }

      // required string time_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time_string().data(), this->time_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // required string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_id;
        break;
      }

      // required int32 error_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_id_)));
          set_has_error_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error_msg;
        break;
      }

      // required string error_msg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // required string ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // required string time_string = 2;
  if (has_time_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_string().data(), this->time_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->time_string(), output);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }

  // required int32 error_id = 4;
  if (has_error_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->error_id(), output);
  }

  // required string error_msg = 5;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->error_msg(), output);
  }

  // required string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // required string time_string = 2;
  if (has_time_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_string().data(), this->time_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time_string(), target);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  // required int32 error_id = 4;
  if (has_error_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->error_id(), target);
  }

  // required string error_msg = 5;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->error_msg(), target);
  }

  // required string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required string time_string = 2;
    if (has_time_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_string());
    }

    // required string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required int32 error_id = 4;
    if (has_error_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_id());
    }

    // required string error_msg = 5;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }

    // required string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginStatus::MergeFrom(const LoginStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_time_string()) {
      set_time_string(from.time_string());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_error_id()) {
      set_error_id(from.error_id());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginStatus::CopyFrom(const LoginStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void LoginStatus::Swap(LoginStatus* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(time_string_, other->time_string_);
    std::swap(user_, other->user_);
    std::swap(error_id_, other->error_id_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginStatus_descriptor_;
  metadata.reflection = LoginStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Position::kTimeFieldNumber;
const int Position::kTimeStringFieldNumber;
const int Position::kUserFieldNumber;
const int Position::kPriceIndexFieldNumber;
const int Position::kStopPriceFieldNumber;
const int Position::kInstrumentidFieldNumber;
const int Position::kBrokeridFieldNumber;
const int Position::kInvestoridFieldNumber;
const int Position::kPosidirectionFieldNumber;
const int Position::kHedgeflagFieldNumber;
const int Position::kPositiondateFieldNumber;
const int Position::kYdpositionFieldNumber;
const int Position::kPositionFieldNumber;
const int Position::kLongfrozenFieldNumber;
const int Position::kShortfrozenFieldNumber;
const int Position::kLongfrozenamountFieldNumber;
const int Position::kShortfrozenamountFieldNumber;
const int Position::kOpenvolumeFieldNumber;
const int Position::kClosevolumeFieldNumber;
const int Position::kOpenamountFieldNumber;
const int Position::kCloseamountFieldNumber;
const int Position::kPositioncostFieldNumber;
const int Position::kPremarginFieldNumber;
const int Position::kUsemarginFieldNumber;
const int Position::kFrozenmarginFieldNumber;
const int Position::kFrozencashFieldNumber;
const int Position::kFrozencommissionFieldNumber;
const int Position::kCashinFieldNumber;
const int Position::kCommissionFieldNumber;
const int Position::kCloseprofitFieldNumber;
const int Position::kPositionprofitFieldNumber;
const int Position::kPresettlementpriceFieldNumber;
const int Position::kSettlementpriceFieldNumber;
const int Position::kTradingdayFieldNumber;
const int Position::kSettlementidFieldNumber;
const int Position::kOpencostFieldNumber;
const int Position::kExchangemarginFieldNumber;
const int Position::kCombpositionFieldNumber;
const int Position::kComblongfrozenFieldNumber;
const int Position::kCombshortfrozenFieldNumber;
const int Position::kCloseprofitbydateFieldNumber;
const int Position::kCloseprofitbytradeFieldNumber;
const int Position::kTodaypositionFieldNumber;
const int Position::kMarginratebymoneyFieldNumber;
const int Position::kMarginratebyvolumeFieldNumber;
#endif  // !_MSC_VER

Position::Position()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  time_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_index_ = 0;
  stop_price_ = 0;
  instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  posidirection_ = 0;
  hedgeflag_ = 0;
  positiondate_ = 0;
  ydposition_ = 0;
  position_ = 0;
  longfrozen_ = 0;
  shortfrozen_ = 0;
  longfrozenamount_ = 0;
  shortfrozenamount_ = 0;
  openvolume_ = 0;
  closevolume_ = 0;
  openamount_ = 0;
  closeamount_ = 0;
  positioncost_ = 0;
  premargin_ = 0;
  usemargin_ = 0;
  frozenmargin_ = 0;
  frozencash_ = 0;
  frozencommission_ = 0;
  cashin_ = 0;
  commission_ = 0;
  closeprofit_ = 0;
  positionprofit_ = 0;
  presettlementprice_ = 0;
  settlementprice_ = 0;
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  settlementid_ = 0;
  opencost_ = 0;
  exchangemargin_ = 0;
  combposition_ = 0;
  comblongfrozen_ = 0;
  combshortfrozen_ = 0;
  closeprofitbydate_ = 0;
  closeprofitbytrade_ = 0;
  todayposition_ = 0;
  marginratebymoney_ = 0;
  marginratebyvolume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position::~Position() {
  SharedDtor();
}

void Position::SharedDtor() {
  if (time_string_ != &::google::protobuf::internal::kEmptyString) {
    delete time_string_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentid_;
  }
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (investorid_ != &::google::protobuf::internal::kEmptyString) {
    delete investorid_;
  }
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cp_5fcomunication_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New() const {
  return new Position;
}

void Position::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_time_string()) {
      if (time_string_ != &::google::protobuf::internal::kEmptyString) {
        time_string_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    price_index_ = 0;
    stop_price_ = 0;
    if (has_instrumentid()) {
      if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
        instrumentid_->clear();
      }
    }
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_investorid()) {
      if (investorid_ != &::google::protobuf::internal::kEmptyString) {
        investorid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    posidirection_ = 0;
    hedgeflag_ = 0;
    positiondate_ = 0;
    ydposition_ = 0;
    position_ = 0;
    longfrozen_ = 0;
    shortfrozen_ = 0;
    longfrozenamount_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    shortfrozenamount_ = 0;
    openvolume_ = 0;
    closevolume_ = 0;
    openamount_ = 0;
    closeamount_ = 0;
    positioncost_ = 0;
    premargin_ = 0;
    usemargin_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    frozenmargin_ = 0;
    frozencash_ = 0;
    frozencommission_ = 0;
    cashin_ = 0;
    commission_ = 0;
    closeprofit_ = 0;
    positionprofit_ = 0;
    presettlementprice_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    settlementprice_ = 0;
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
    settlementid_ = 0;
    opencost_ = 0;
    exchangemargin_ = 0;
    combposition_ = 0;
    comblongfrozen_ = 0;
    combshortfrozen_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    closeprofitbydate_ = 0;
    closeprofitbytrade_ = 0;
    todayposition_ = 0;
    marginratebymoney_ = 0;
    marginratebyvolume_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_time_string;
        break;
      }

      // required string time_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time_string().data(), this->time_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // required string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_price_index;
        break;
      }

      // required double price_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_index_)));
          set_has_price_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_stop_price;
        break;
      }

      // required double stop_price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stop_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_price_)));
          set_has_stop_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_instrumentid;
        break;
      }

      // required string instrumentid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrumentid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_brokerid;
        break;
      }

      // required string brokerid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brokerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_investorid;
        break;
      }

      // required string investorid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_investorid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_posidirection;
        break;
      }

      // required int32 posidirection = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posidirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posidirection_)));
          set_has_posidirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hedgeflag;
        break;
      }

      // required int32 hedgeflag = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hedgeflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hedgeflag_)));
          set_has_hedgeflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_positiondate;
        break;
      }

      // required int32 positiondate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_positiondate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positiondate_)));
          set_has_positiondate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ydposition;
        break;
      }

      // required int32 ydposition = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ydposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydposition_)));
          set_has_ydposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_position;
        break;
      }

      // required int32 position = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_longfrozen;
        break;
      }

      // required int32 longfrozen = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_longfrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longfrozen_)));
          set_has_longfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_shortfrozen;
        break;
      }

      // required int32 shortfrozen = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shortfrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shortfrozen_)));
          set_has_shortfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_longfrozenamount;
        break;
      }

      // required double longfrozenamount = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longfrozenamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longfrozenamount_)));
          set_has_longfrozenamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_shortfrozenamount;
        break;
      }

      // required double shortfrozenamount = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_shortfrozenamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shortfrozenamount_)));
          set_has_shortfrozenamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_openvolume;
        break;
      }

      // required int32 openvolume = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openvolume_)));
          set_has_openvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_closevolume;
        break;
      }

      // required int32 closevolume = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closevolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closevolume_)));
          set_has_closevolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_openamount;
        break;
      }

      // required double openamount = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_openamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openamount_)));
          set_has_openamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_closeamount;
        break;
      }

      // required double closeamount = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_closeamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeamount_)));
          set_has_closeamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_positioncost;
        break;
      }

      // required double positioncost = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_positioncost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positioncost_)));
          set_has_positioncost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_premargin;
        break;
      }

      // required double premargin = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_premargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premargin_)));
          set_has_premargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_usemargin;
        break;
      }

      // required double usemargin = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usemargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usemargin_)));
          set_has_usemargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_frozenmargin;
        break;
      }

      // required double frozenmargin = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_frozenmargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozenmargin_)));
          set_has_frozenmargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_frozencash;
        break;
      }

      // required double frozencash = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_frozencash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencash_)));
          set_has_frozencash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_frozencommission;
        break;
      }

      // required double frozencommission = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_frozencommission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencommission_)));
          set_has_frozencommission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_cashin;
        break;
      }

      // required double cashin = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cashin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashin_)));
          set_has_cashin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_commission;
        break;
      }

      // required double commission = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
          set_has_commission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_closeprofit;
        break;
      }

      // required double closeprofit = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_closeprofit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofit_)));
          set_has_closeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_positionprofit;
        break;
      }

      // required double positionprofit = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_positionprofit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofit_)));
          set_has_positionprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_presettlementprice;
        break;
      }

      // required double presettlementprice = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_presettlementprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presettlementprice_)));
          set_has_presettlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_settlementprice;
        break;
      }

      // required double settlementprice = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_settlementprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlementprice_)));
          set_has_settlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_tradingday;
        break;
      }

      // required string tradingday = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tradingday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_settlementid;
        break;
      }

      // required int32 settlementid = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_settlementid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));
          set_has_settlementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(289)) goto parse_opencost;
        break;
      }

      // required double opencost = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_opencost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opencost_)));
          set_has_opencost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(297)) goto parse_exchangemargin;
        break;
      }

      // required double exchangemargin = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_exchangemargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangemargin_)));
          set_has_exchangemargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_combposition;
        break;
      }

      // required int32 combposition = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combposition_)));
          set_has_combposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_comblongfrozen;
        break;
      }

      // required int32 comblongfrozen = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comblongfrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comblongfrozen_)));
          set_has_comblongfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_combshortfrozen;
        break;
      }

      // required int32 combshortfrozen = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combshortfrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combshortfrozen_)));
          set_has_combshortfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(329)) goto parse_closeprofitbydate;
        break;
      }

      // required double closeprofitbydate = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_closeprofitbydate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofitbydate_)));
          set_has_closeprofitbydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(337)) goto parse_closeprofitbytrade;
        break;
      }

      // required double closeprofitbytrade = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_closeprofitbytrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofitbytrade_)));
          set_has_closeprofitbytrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_todayposition;
        break;
      }

      // required int32 todayposition = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &todayposition_)));
          set_has_todayposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(353)) goto parse_marginratebymoney;
        break;
      }

      // required double marginratebymoney = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_marginratebymoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginratebymoney_)));
          set_has_marginratebymoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(361)) goto parse_marginratebyvolume;
        break;
      }

      // required double marginratebyvolume = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_marginratebyvolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginratebyvolume_)));
          set_has_marginratebyvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // required string time_string = 2;
  if (has_time_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_string().data(), this->time_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->time_string(), output);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }

  // required double price_index = 4;
  if (has_price_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->price_index(), output);
  }

  // required double stop_price = 5;
  if (has_stop_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->stop_price(), output);
  }

  // required string instrumentid = 6;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->instrumentid(), output);
  }

  // required string brokerid = 7;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->brokerid(), output);
  }

  // required string investorid = 8;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->investorid(), output);
  }

  // required int32 posidirection = 9;
  if (has_posidirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->posidirection(), output);
  }

  // required int32 hedgeflag = 10;
  if (has_hedgeflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hedgeflag(), output);
  }

  // required int32 positiondate = 11;
  if (has_positiondate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->positiondate(), output);
  }

  // required int32 ydposition = 12;
  if (has_ydposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ydposition(), output);
  }

  // required int32 position = 13;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->position(), output);
  }

  // required int32 longfrozen = 14;
  if (has_longfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->longfrozen(), output);
  }

  // required int32 shortfrozen = 15;
  if (has_shortfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->shortfrozen(), output);
  }

  // required double longfrozenamount = 16;
  if (has_longfrozenamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->longfrozenamount(), output);
  }

  // required double shortfrozenamount = 17;
  if (has_shortfrozenamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->shortfrozenamount(), output);
  }

  // required int32 openvolume = 18;
  if (has_openvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->openvolume(), output);
  }

  // required int32 closevolume = 19;
  if (has_closevolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->closevolume(), output);
  }

  // required double openamount = 20;
  if (has_openamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->openamount(), output);
  }

  // required double closeamount = 21;
  if (has_closeamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->closeamount(), output);
  }

  // required double positioncost = 22;
  if (has_positioncost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->positioncost(), output);
  }

  // required double premargin = 23;
  if (has_premargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->premargin(), output);
  }

  // required double usemargin = 24;
  if (has_usemargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->usemargin(), output);
  }

  // required double frozenmargin = 25;
  if (has_frozenmargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->frozenmargin(), output);
  }

  // required double frozencash = 26;
  if (has_frozencash()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->frozencash(), output);
  }

  // required double frozencommission = 27;
  if (has_frozencommission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->frozencommission(), output);
  }

  // required double cashin = 28;
  if (has_cashin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->cashin(), output);
  }

  // required double commission = 29;
  if (has_commission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->commission(), output);
  }

  // required double closeprofit = 30;
  if (has_closeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->closeprofit(), output);
  }

  // required double positionprofit = 31;
  if (has_positionprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->positionprofit(), output);
  }

  // required double presettlementprice = 32;
  if (has_presettlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->presettlementprice(), output);
  }

  // required double settlementprice = 33;
  if (has_settlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->settlementprice(), output);
  }

  // required string tradingday = 34;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->tradingday(), output);
  }

  // required int32 settlementid = 35;
  if (has_settlementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->settlementid(), output);
  }

  // required double opencost = 36;
  if (has_opencost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->opencost(), output);
  }

  // required double exchangemargin = 37;
  if (has_exchangemargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->exchangemargin(), output);
  }

  // required int32 combposition = 38;
  if (has_combposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->combposition(), output);
  }

  // required int32 comblongfrozen = 39;
  if (has_comblongfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->comblongfrozen(), output);
  }

  // required int32 combshortfrozen = 40;
  if (has_combshortfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->combshortfrozen(), output);
  }

  // required double closeprofitbydate = 41;
  if (has_closeprofitbydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->closeprofitbydate(), output);
  }

  // required double closeprofitbytrade = 42;
  if (has_closeprofitbytrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->closeprofitbytrade(), output);
  }

  // required int32 todayposition = 43;
  if (has_todayposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->todayposition(), output);
  }

  // required double marginratebymoney = 44;
  if (has_marginratebymoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(44, this->marginratebymoney(), output);
  }

  // required double marginratebyvolume = 45;
  if (has_marginratebyvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->marginratebyvolume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // required string time_string = 2;
  if (has_time_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_string().data(), this->time_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time_string(), target);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  // required double price_index = 4;
  if (has_price_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->price_index(), target);
  }

  // required double stop_price = 5;
  if (has_stop_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->stop_price(), target);
  }

  // required string instrumentid = 6;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->instrumentid(), target);
  }

  // required string brokerid = 7;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->brokerid(), target);
  }

  // required string investorid = 8;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->investorid(), target);
  }

  // required int32 posidirection = 9;
  if (has_posidirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->posidirection(), target);
  }

  // required int32 hedgeflag = 10;
  if (has_hedgeflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hedgeflag(), target);
  }

  // required int32 positiondate = 11;
  if (has_positiondate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->positiondate(), target);
  }

  // required int32 ydposition = 12;
  if (has_ydposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ydposition(), target);
  }

  // required int32 position = 13;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->position(), target);
  }

  // required int32 longfrozen = 14;
  if (has_longfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->longfrozen(), target);
  }

  // required int32 shortfrozen = 15;
  if (has_shortfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->shortfrozen(), target);
  }

  // required double longfrozenamount = 16;
  if (has_longfrozenamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->longfrozenamount(), target);
  }

  // required double shortfrozenamount = 17;
  if (has_shortfrozenamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->shortfrozenamount(), target);
  }

  // required int32 openvolume = 18;
  if (has_openvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->openvolume(), target);
  }

  // required int32 closevolume = 19;
  if (has_closevolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->closevolume(), target);
  }

  // required double openamount = 20;
  if (has_openamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->openamount(), target);
  }

  // required double closeamount = 21;
  if (has_closeamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->closeamount(), target);
  }

  // required double positioncost = 22;
  if (has_positioncost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->positioncost(), target);
  }

  // required double premargin = 23;
  if (has_premargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->premargin(), target);
  }

  // required double usemargin = 24;
  if (has_usemargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->usemargin(), target);
  }

  // required double frozenmargin = 25;
  if (has_frozenmargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->frozenmargin(), target);
  }

  // required double frozencash = 26;
  if (has_frozencash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->frozencash(), target);
  }

  // required double frozencommission = 27;
  if (has_frozencommission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->frozencommission(), target);
  }

  // required double cashin = 28;
  if (has_cashin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->cashin(), target);
  }

  // required double commission = 29;
  if (has_commission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->commission(), target);
  }

  // required double closeprofit = 30;
  if (has_closeprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->closeprofit(), target);
  }

  // required double positionprofit = 31;
  if (has_positionprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->positionprofit(), target);
  }

  // required double presettlementprice = 32;
  if (has_presettlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->presettlementprice(), target);
  }

  // required double settlementprice = 33;
  if (has_settlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->settlementprice(), target);
  }

  // required string tradingday = 34;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->tradingday(), target);
  }

  // required int32 settlementid = 35;
  if (has_settlementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->settlementid(), target);
  }

  // required double opencost = 36;
  if (has_opencost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->opencost(), target);
  }

  // required double exchangemargin = 37;
  if (has_exchangemargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->exchangemargin(), target);
  }

  // required int32 combposition = 38;
  if (has_combposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->combposition(), target);
  }

  // required int32 comblongfrozen = 39;
  if (has_comblongfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->comblongfrozen(), target);
  }

  // required int32 combshortfrozen = 40;
  if (has_combshortfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->combshortfrozen(), target);
  }

  // required double closeprofitbydate = 41;
  if (has_closeprofitbydate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->closeprofitbydate(), target);
  }

  // required double closeprofitbytrade = 42;
  if (has_closeprofitbytrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->closeprofitbytrade(), target);
  }

  // required int32 todayposition = 43;
  if (has_todayposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->todayposition(), target);
  }

  // required double marginratebymoney = 44;
  if (has_marginratebymoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(44, this->marginratebymoney(), target);
  }

  // required double marginratebyvolume = 45;
  if (has_marginratebyvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->marginratebyvolume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required string time_string = 2;
    if (has_time_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_string());
    }

    // required string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required double price_index = 4;
    if (has_price_index()) {
      total_size += 1 + 8;
    }

    // required double stop_price = 5;
    if (has_stop_price()) {
      total_size += 1 + 8;
    }

    // required string instrumentid = 6;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // required string brokerid = 7;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }

    // required string investorid = 8;
    if (has_investorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investorid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 posidirection = 9;
    if (has_posidirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posidirection());
    }

    // required int32 hedgeflag = 10;
    if (has_hedgeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hedgeflag());
    }

    // required int32 positiondate = 11;
    if (has_positiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positiondate());
    }

    // required int32 ydposition = 12;
    if (has_ydposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydposition());
    }

    // required int32 position = 13;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // required int32 longfrozen = 14;
    if (has_longfrozen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longfrozen());
    }

    // required int32 shortfrozen = 15;
    if (has_shortfrozen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shortfrozen());
    }

    // required double longfrozenamount = 16;
    if (has_longfrozenamount()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double shortfrozenamount = 17;
    if (has_shortfrozenamount()) {
      total_size += 2 + 8;
    }

    // required int32 openvolume = 18;
    if (has_openvolume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openvolume());
    }

    // required int32 closevolume = 19;
    if (has_closevolume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closevolume());
    }

    // required double openamount = 20;
    if (has_openamount()) {
      total_size += 2 + 8;
    }

    // required double closeamount = 21;
    if (has_closeamount()) {
      total_size += 2 + 8;
    }

    // required double positioncost = 22;
    if (has_positioncost()) {
      total_size += 2 + 8;
    }

    // required double premargin = 23;
    if (has_premargin()) {
      total_size += 2 + 8;
    }

    // required double usemargin = 24;
    if (has_usemargin()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double frozenmargin = 25;
    if (has_frozenmargin()) {
      total_size += 2 + 8;
    }

    // required double frozencash = 26;
    if (has_frozencash()) {
      total_size += 2 + 8;
    }

    // required double frozencommission = 27;
    if (has_frozencommission()) {
      total_size += 2 + 8;
    }

    // required double cashin = 28;
    if (has_cashin()) {
      total_size += 2 + 8;
    }

    // required double commission = 29;
    if (has_commission()) {
      total_size += 2 + 8;
    }

    // required double closeprofit = 30;
    if (has_closeprofit()) {
      total_size += 2 + 8;
    }

    // required double positionprofit = 31;
    if (has_positionprofit()) {
      total_size += 2 + 8;
    }

    // required double presettlementprice = 32;
    if (has_presettlementprice()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required double settlementprice = 33;
    if (has_settlementprice()) {
      total_size += 2 + 8;
    }

    // required string tradingday = 34;
    if (has_tradingday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }

    // required int32 settlementid = 35;
    if (has_settlementid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlementid());
    }

    // required double opencost = 36;
    if (has_opencost()) {
      total_size += 2 + 8;
    }

    // required double exchangemargin = 37;
    if (has_exchangemargin()) {
      total_size += 2 + 8;
    }

    // required int32 combposition = 38;
    if (has_combposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combposition());
    }

    // required int32 comblongfrozen = 39;
    if (has_comblongfrozen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comblongfrozen());
    }

    // required int32 combshortfrozen = 40;
    if (has_combshortfrozen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combshortfrozen());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required double closeprofitbydate = 41;
    if (has_closeprofitbydate()) {
      total_size += 2 + 8;
    }

    // required double closeprofitbytrade = 42;
    if (has_closeprofitbytrade()) {
      total_size += 2 + 8;
    }

    // required int32 todayposition = 43;
    if (has_todayposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->todayposition());
    }

    // required double marginratebymoney = 44;
    if (has_marginratebymoney()) {
      total_size += 2 + 8;
    }

    // required double marginratebyvolume = 45;
    if (has_marginratebyvolume()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Position* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Position*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_time_string()) {
      set_time_string(from.time_string());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_price_index()) {
      set_price_index(from.price_index());
    }
    if (from.has_stop_price()) {
      set_stop_price(from.stop_price());
    }
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_investorid()) {
      set_investorid(from.investorid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_posidirection()) {
      set_posidirection(from.posidirection());
    }
    if (from.has_hedgeflag()) {
      set_hedgeflag(from.hedgeflag());
    }
    if (from.has_positiondate()) {
      set_positiondate(from.positiondate());
    }
    if (from.has_ydposition()) {
      set_ydposition(from.ydposition());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_longfrozen()) {
      set_longfrozen(from.longfrozen());
    }
    if (from.has_shortfrozen()) {
      set_shortfrozen(from.shortfrozen());
    }
    if (from.has_longfrozenamount()) {
      set_longfrozenamount(from.longfrozenamount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_shortfrozenamount()) {
      set_shortfrozenamount(from.shortfrozenamount());
    }
    if (from.has_openvolume()) {
      set_openvolume(from.openvolume());
    }
    if (from.has_closevolume()) {
      set_closevolume(from.closevolume());
    }
    if (from.has_openamount()) {
      set_openamount(from.openamount());
    }
    if (from.has_closeamount()) {
      set_closeamount(from.closeamount());
    }
    if (from.has_positioncost()) {
      set_positioncost(from.positioncost());
    }
    if (from.has_premargin()) {
      set_premargin(from.premargin());
    }
    if (from.has_usemargin()) {
      set_usemargin(from.usemargin());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_frozenmargin()) {
      set_frozenmargin(from.frozenmargin());
    }
    if (from.has_frozencash()) {
      set_frozencash(from.frozencash());
    }
    if (from.has_frozencommission()) {
      set_frozencommission(from.frozencommission());
    }
    if (from.has_cashin()) {
      set_cashin(from.cashin());
    }
    if (from.has_commission()) {
      set_commission(from.commission());
    }
    if (from.has_closeprofit()) {
      set_closeprofit(from.closeprofit());
    }
    if (from.has_positionprofit()) {
      set_positionprofit(from.positionprofit());
    }
    if (from.has_presettlementprice()) {
      set_presettlementprice(from.presettlementprice());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_settlementprice()) {
      set_settlementprice(from.settlementprice());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_settlementid()) {
      set_settlementid(from.settlementid());
    }
    if (from.has_opencost()) {
      set_opencost(from.opencost());
    }
    if (from.has_exchangemargin()) {
      set_exchangemargin(from.exchangemargin());
    }
    if (from.has_combposition()) {
      set_combposition(from.combposition());
    }
    if (from.has_comblongfrozen()) {
      set_comblongfrozen(from.comblongfrozen());
    }
    if (from.has_combshortfrozen()) {
      set_combshortfrozen(from.combshortfrozen());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_closeprofitbydate()) {
      set_closeprofitbydate(from.closeprofitbydate());
    }
    if (from.has_closeprofitbytrade()) {
      set_closeprofitbytrade(from.closeprofitbytrade());
    }
    if (from.has_todayposition()) {
      set_todayposition(from.todayposition());
    }
    if (from.has_marginratebymoney()) {
      set_marginratebymoney(from.marginratebymoney());
    }
    if (from.has_marginratebyvolume()) {
      set_marginratebyvolume(from.marginratebyvolume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void Position::Swap(Position* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(time_string_, other->time_string_);
    std::swap(user_, other->user_);
    std::swap(price_index_, other->price_index_);
    std::swap(stop_price_, other->stop_price_);
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(brokerid_, other->brokerid_);
    std::swap(investorid_, other->investorid_);
    std::swap(posidirection_, other->posidirection_);
    std::swap(hedgeflag_, other->hedgeflag_);
    std::swap(positiondate_, other->positiondate_);
    std::swap(ydposition_, other->ydposition_);
    std::swap(position_, other->position_);
    std::swap(longfrozen_, other->longfrozen_);
    std::swap(shortfrozen_, other->shortfrozen_);
    std::swap(longfrozenamount_, other->longfrozenamount_);
    std::swap(shortfrozenamount_, other->shortfrozenamount_);
    std::swap(openvolume_, other->openvolume_);
    std::swap(closevolume_, other->closevolume_);
    std::swap(openamount_, other->openamount_);
    std::swap(closeamount_, other->closeamount_);
    std::swap(positioncost_, other->positioncost_);
    std::swap(premargin_, other->premargin_);
    std::swap(usemargin_, other->usemargin_);
    std::swap(frozenmargin_, other->frozenmargin_);
    std::swap(frozencash_, other->frozencash_);
    std::swap(frozencommission_, other->frozencommission_);
    std::swap(cashin_, other->cashin_);
    std::swap(commission_, other->commission_);
    std::swap(closeprofit_, other->closeprofit_);
    std::swap(positionprofit_, other->positionprofit_);
    std::swap(presettlementprice_, other->presettlementprice_);
    std::swap(settlementprice_, other->settlementprice_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(settlementid_, other->settlementid_);
    std::swap(opencost_, other->opencost_);
    std::swap(exchangemargin_, other->exchangemargin_);
    std::swap(combposition_, other->combposition_);
    std::swap(comblongfrozen_, other->comblongfrozen_);
    std::swap(combshortfrozen_, other->combshortfrozen_);
    std::swap(closeprofitbydate_, other->closeprofitbydate_);
    std::swap(closeprofitbytrade_, other->closeprofitbytrade_);
    std::swap(todayposition_, other->todayposition_);
    std::swap(marginratebymoney_, other->marginratebymoney_);
    std::swap(marginratebyvolume_, other->marginratebyvolume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Account::kTimeFieldNumber;
const int Account::kTimeStringFieldNumber;
const int Account::kUserFieldNumber;
const int Account::kBrokeridFieldNumber;
const int Account::kAccountidFieldNumber;
const int Account::kPremortgageFieldNumber;
const int Account::kPrecreditFieldNumber;
const int Account::kPredepositFieldNumber;
const int Account::kPrebalanceFieldNumber;
const int Account::kPremarginFieldNumber;
const int Account::kInterestbaseFieldNumber;
const int Account::kInterestFieldNumber;
const int Account::kDepositFieldNumber;
const int Account::kWithdrawFieldNumber;
const int Account::kFrozenmarginFieldNumber;
const int Account::kFrozencashFieldNumber;
const int Account::kFrozencommissionFieldNumber;
const int Account::kCurrmarginFieldNumber;
const int Account::kCashinFieldNumber;
const int Account::kCommissionFieldNumber;
const int Account::kCloseprofitFieldNumber;
const int Account::kPositionprofitFieldNumber;
const int Account::kBalanceFieldNumber;
const int Account::kAvailableFieldNumber;
const int Account::kWithdrawquotaFieldNumber;
const int Account::kReserveFieldNumber;
const int Account::kTradingdayFieldNumber;
const int Account::kSettlementidFieldNumber;
const int Account::kCreditFieldNumber;
const int Account::kMortgageFieldNumber;
const int Account::kExchangemarginFieldNumber;
#endif  // !_MSC_VER

Account::Account()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Account::InitAsDefaultInstance() {
}

Account::Account(const Account& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Account::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  time_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  premortgage_ = 0;
  precredit_ = 0;
  predeposit_ = 0;
  prebalance_ = 0;
  premargin_ = 0;
  interestbase_ = 0;
  interest_ = 0;
  deposit_ = 0;
  withdraw_ = 0;
  frozenmargin_ = 0;
  frozencash_ = 0;
  frozencommission_ = 0;
  currmargin_ = 0;
  cashin_ = 0;
  commission_ = 0;
  closeprofit_ = 0;
  positionprofit_ = 0;
  balance_ = 0;
  available_ = 0;
  withdrawquota_ = 0;
  reserve_ = 0;
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  settlementid_ = 0;
  credit_ = 0;
  mortgage_ = 0;
  exchangemargin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account::~Account() {
  SharedDtor();
}

void Account::SharedDtor() {
  if (time_string_ != &::google::protobuf::internal::kEmptyString) {
    delete time_string_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete accountid_;
  }
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (this != default_instance_) {
  }
}

void Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Account_descriptor_;
}

const Account& Account::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cp_5fcomunication_2eproto();
  return *default_instance_;
}

Account* Account::default_instance_ = NULL;

Account* Account::New() const {
  return new Account;
}

void Account::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_time_string()) {
      if (time_string_ != &::google::protobuf::internal::kEmptyString) {
        time_string_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_accountid()) {
      if (accountid_ != &::google::protobuf::internal::kEmptyString) {
        accountid_->clear();
      }
    }
    premortgage_ = 0;
    precredit_ = 0;
    predeposit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    prebalance_ = 0;
    premargin_ = 0;
    interestbase_ = 0;
    interest_ = 0;
    deposit_ = 0;
    withdraw_ = 0;
    frozenmargin_ = 0;
    frozencash_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    frozencommission_ = 0;
    currmargin_ = 0;
    cashin_ = 0;
    commission_ = 0;
    closeprofit_ = 0;
    positionprofit_ = 0;
    balance_ = 0;
    available_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    withdrawquota_ = 0;
    reserve_ = 0;
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
    settlementid_ = 0;
    credit_ = 0;
    mortgage_ = 0;
    exchangemargin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_time_string;
        break;
      }

      // required string time_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time_string().data(), this->time_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // required string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_brokerid;
        break;
      }

      // required string brokerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brokerid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_accountid;
        break;
      }

      // required string accountid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_premortgage;
        break;
      }

      // required double premortgage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_premortgage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premortgage_)));
          set_has_premortgage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_precredit;
        break;
      }

      // required double precredit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_precredit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precredit_)));
          set_has_precredit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_predeposit;
        break;
      }

      // required double predeposit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_predeposit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predeposit_)));
          set_has_predeposit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_prebalance;
        break;
      }

      // required double prebalance = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_prebalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prebalance_)));
          set_has_prebalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_premargin;
        break;
      }

      // required double premargin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_premargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premargin_)));
          set_has_premargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_interestbase;
        break;
      }

      // required double interestbase = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_interestbase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interestbase_)));
          set_has_interestbase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_interest;
        break;
      }

      // required double interest = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_interest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interest_)));
          set_has_interest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_deposit;
        break;
      }

      // required double deposit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deposit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deposit_)));
          set_has_deposit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_withdraw;
        break;
      }

      // required double withdraw = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_withdraw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdraw_)));
          set_has_withdraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_frozenmargin;
        break;
      }

      // required double frozenmargin = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_frozenmargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozenmargin_)));
          set_has_frozenmargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_frozencash;
        break;
      }

      // required double frozencash = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_frozencash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencash_)));
          set_has_frozencash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_frozencommission;
        break;
      }

      // required double frozencommission = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_frozencommission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencommission_)));
          set_has_frozencommission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_currmargin;
        break;
      }

      // required double currmargin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_currmargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currmargin_)));
          set_has_currmargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_cashin;
        break;
      }

      // required double cashin = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cashin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashin_)));
          set_has_cashin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_commission;
        break;
      }

      // required double commission = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
          set_has_commission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_closeprofit;
        break;
      }

      // required double closeprofit = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_closeprofit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofit_)));
          set_has_closeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_positionprofit;
        break;
      }

      // required double positionprofit = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_positionprofit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofit_)));
          set_has_positionprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_balance;
        break;
      }

      // required double balance = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_available;
        break;
      }

      // required double available = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_withdrawquota;
        break;
      }

      // required double withdrawquota = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_withdrawquota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdrawquota_)));
          set_has_withdrawquota();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_reserve;
        break;
      }

      // required double reserve = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_reserve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_tradingday;
        break;
      }

      // required string tradingday = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tradingday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_settlementid;
        break;
      }

      // required int32 settlementid = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_settlementid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));
          set_has_settlementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_credit;
        break;
      }

      // required double credit = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_mortgage;
        break;
      }

      // required double mortgage = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mortgage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mortgage_)));
          set_has_mortgage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_exchangemargin;
        break;
      }

      // required double exchangemargin = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_exchangemargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangemargin_)));
          set_has_exchangemargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // required string time_string = 2;
  if (has_time_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_string().data(), this->time_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->time_string(), output);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }

  // required string brokerid = 4;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->brokerid(), output);
  }

  // required string accountid = 5;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->accountid(), output);
  }

  // required double premortgage = 6;
  if (has_premortgage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->premortgage(), output);
  }

  // required double precredit = 7;
  if (has_precredit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->precredit(), output);
  }

  // required double predeposit = 8;
  if (has_predeposit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->predeposit(), output);
  }

  // required double prebalance = 9;
  if (has_prebalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->prebalance(), output);
  }

  // required double premargin = 10;
  if (has_premargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->premargin(), output);
  }

  // required double interestbase = 11;
  if (has_interestbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->interestbase(), output);
  }

  // required double interest = 12;
  if (has_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->interest(), output);
  }

  // required double deposit = 13;
  if (has_deposit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->deposit(), output);
  }

  // required double withdraw = 14;
  if (has_withdraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->withdraw(), output);
  }

  // required double frozenmargin = 15;
  if (has_frozenmargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->frozenmargin(), output);
  }

  // required double frozencash = 16;
  if (has_frozencash()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->frozencash(), output);
  }

  // required double frozencommission = 17;
  if (has_frozencommission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->frozencommission(), output);
  }

  // required double currmargin = 18;
  if (has_currmargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->currmargin(), output);
  }

  // required double cashin = 19;
  if (has_cashin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->cashin(), output);
  }

  // required double commission = 20;
  if (has_commission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->commission(), output);
  }

  // required double closeprofit = 21;
  if (has_closeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->closeprofit(), output);
  }

  // required double positionprofit = 22;
  if (has_positionprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->positionprofit(), output);
  }

  // required double balance = 23;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->balance(), output);
  }

  // required double available = 24;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->available(), output);
  }

  // required double withdrawquota = 25;
  if (has_withdrawquota()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->withdrawquota(), output);
  }

  // required double reserve = 26;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->reserve(), output);
  }

  // required string tradingday = 27;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->tradingday(), output);
  }

  // required int32 settlementid = 28;
  if (has_settlementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->settlementid(), output);
  }

  // required double credit = 29;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->credit(), output);
  }

  // required double mortgage = 30;
  if (has_mortgage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->mortgage(), output);
  }

  // required double exchangemargin = 31;
  if (has_exchangemargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->exchangemargin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Account::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // required string time_string = 2;
  if (has_time_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_string().data(), this->time_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time_string(), target);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  // required string brokerid = 4;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->brokerid(), target);
  }

  // required string accountid = 5;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->accountid(), target);
  }

  // required double premortgage = 6;
  if (has_premortgage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->premortgage(), target);
  }

  // required double precredit = 7;
  if (has_precredit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->precredit(), target);
  }

  // required double predeposit = 8;
  if (has_predeposit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->predeposit(), target);
  }

  // required double prebalance = 9;
  if (has_prebalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->prebalance(), target);
  }

  // required double premargin = 10;
  if (has_premargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->premargin(), target);
  }

  // required double interestbase = 11;
  if (has_interestbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->interestbase(), target);
  }

  // required double interest = 12;
  if (has_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->interest(), target);
  }

  // required double deposit = 13;
  if (has_deposit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->deposit(), target);
  }

  // required double withdraw = 14;
  if (has_withdraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->withdraw(), target);
  }

  // required double frozenmargin = 15;
  if (has_frozenmargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->frozenmargin(), target);
  }

  // required double frozencash = 16;
  if (has_frozencash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->frozencash(), target);
  }

  // required double frozencommission = 17;
  if (has_frozencommission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->frozencommission(), target);
  }

  // required double currmargin = 18;
  if (has_currmargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->currmargin(), target);
  }

  // required double cashin = 19;
  if (has_cashin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->cashin(), target);
  }

  // required double commission = 20;
  if (has_commission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->commission(), target);
  }

  // required double closeprofit = 21;
  if (has_closeprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->closeprofit(), target);
  }

  // required double positionprofit = 22;
  if (has_positionprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->positionprofit(), target);
  }

  // required double balance = 23;
  if (has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->balance(), target);
  }

  // required double available = 24;
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->available(), target);
  }

  // required double withdrawquota = 25;
  if (has_withdrawquota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->withdrawquota(), target);
  }

  // required double reserve = 26;
  if (has_reserve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->reserve(), target);
  }

  // required string tradingday = 27;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->tradingday(), target);
  }

  // required int32 settlementid = 28;
  if (has_settlementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->settlementid(), target);
  }

  // required double credit = 29;
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->credit(), target);
  }

  // required double mortgage = 30;
  if (has_mortgage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->mortgage(), target);
  }

  // required double exchangemargin = 31;
  if (has_exchangemargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->exchangemargin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Account::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required string time_string = 2;
    if (has_time_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_string());
    }

    // required string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string brokerid = 4;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }

    // required string accountid = 5;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountid());
    }

    // required double premortgage = 6;
    if (has_premortgage()) {
      total_size += 1 + 8;
    }

    // required double precredit = 7;
    if (has_precredit()) {
      total_size += 1 + 8;
    }

    // required double predeposit = 8;
    if (has_predeposit()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double prebalance = 9;
    if (has_prebalance()) {
      total_size += 1 + 8;
    }

    // required double premargin = 10;
    if (has_premargin()) {
      total_size += 1 + 8;
    }

    // required double interestbase = 11;
    if (has_interestbase()) {
      total_size += 1 + 8;
    }

    // required double interest = 12;
    if (has_interest()) {
      total_size += 1 + 8;
    }

    // required double deposit = 13;
    if (has_deposit()) {
      total_size += 1 + 8;
    }

    // required double withdraw = 14;
    if (has_withdraw()) {
      total_size += 1 + 8;
    }

    // required double frozenmargin = 15;
    if (has_frozenmargin()) {
      total_size += 1 + 8;
    }

    // required double frozencash = 16;
    if (has_frozencash()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double frozencommission = 17;
    if (has_frozencommission()) {
      total_size += 2 + 8;
    }

    // required double currmargin = 18;
    if (has_currmargin()) {
      total_size += 2 + 8;
    }

    // required double cashin = 19;
    if (has_cashin()) {
      total_size += 2 + 8;
    }

    // required double commission = 20;
    if (has_commission()) {
      total_size += 2 + 8;
    }

    // required double closeprofit = 21;
    if (has_closeprofit()) {
      total_size += 2 + 8;
    }

    // required double positionprofit = 22;
    if (has_positionprofit()) {
      total_size += 2 + 8;
    }

    // required double balance = 23;
    if (has_balance()) {
      total_size += 2 + 8;
    }

    // required double available = 24;
    if (has_available()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double withdrawquota = 25;
    if (has_withdrawquota()) {
      total_size += 2 + 8;
    }

    // required double reserve = 26;
    if (has_reserve()) {
      total_size += 2 + 8;
    }

    // required string tradingday = 27;
    if (has_tradingday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }

    // required int32 settlementid = 28;
    if (has_settlementid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlementid());
    }

    // required double credit = 29;
    if (has_credit()) {
      total_size += 2 + 8;
    }

    // required double mortgage = 30;
    if (has_mortgage()) {
      total_size += 2 + 8;
    }

    // required double exchangemargin = 31;
    if (has_exchangemargin()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Account* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Account*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_time_string()) {
      set_time_string(from.time_string());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_premortgage()) {
      set_premortgage(from.premortgage());
    }
    if (from.has_precredit()) {
      set_precredit(from.precredit());
    }
    if (from.has_predeposit()) {
      set_predeposit(from.predeposit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_prebalance()) {
      set_prebalance(from.prebalance());
    }
    if (from.has_premargin()) {
      set_premargin(from.premargin());
    }
    if (from.has_interestbase()) {
      set_interestbase(from.interestbase());
    }
    if (from.has_interest()) {
      set_interest(from.interest());
    }
    if (from.has_deposit()) {
      set_deposit(from.deposit());
    }
    if (from.has_withdraw()) {
      set_withdraw(from.withdraw());
    }
    if (from.has_frozenmargin()) {
      set_frozenmargin(from.frozenmargin());
    }
    if (from.has_frozencash()) {
      set_frozencash(from.frozencash());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_frozencommission()) {
      set_frozencommission(from.frozencommission());
    }
    if (from.has_currmargin()) {
      set_currmargin(from.currmargin());
    }
    if (from.has_cashin()) {
      set_cashin(from.cashin());
    }
    if (from.has_commission()) {
      set_commission(from.commission());
    }
    if (from.has_closeprofit()) {
      set_closeprofit(from.closeprofit());
    }
    if (from.has_positionprofit()) {
      set_positionprofit(from.positionprofit());
    }
    if (from.has_balance()) {
      set_balance(from.balance());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_withdrawquota()) {
      set_withdrawquota(from.withdrawquota());
    }
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_settlementid()) {
      set_settlementid(from.settlementid());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_mortgage()) {
      set_mortgage(from.mortgage());
    }
    if (from.has_exchangemargin()) {
      set_exchangemargin(from.exchangemargin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Account::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  if ((_has_bits_[0] & 0x7fffffff) != 0x7fffffff) return false;

  return true;
}

void Account::Swap(Account* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(time_string_, other->time_string_);
    std::swap(user_, other->user_);
    std::swap(brokerid_, other->brokerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(premortgage_, other->premortgage_);
    std::swap(precredit_, other->precredit_);
    std::swap(predeposit_, other->predeposit_);
    std::swap(prebalance_, other->prebalance_);
    std::swap(premargin_, other->premargin_);
    std::swap(interestbase_, other->interestbase_);
    std::swap(interest_, other->interest_);
    std::swap(deposit_, other->deposit_);
    std::swap(withdraw_, other->withdraw_);
    std::swap(frozenmargin_, other->frozenmargin_);
    std::swap(frozencash_, other->frozencash_);
    std::swap(frozencommission_, other->frozencommission_);
    std::swap(currmargin_, other->currmargin_);
    std::swap(cashin_, other->cashin_);
    std::swap(commission_, other->commission_);
    std::swap(closeprofit_, other->closeprofit_);
    std::swap(positionprofit_, other->positionprofit_);
    std::swap(balance_, other->balance_);
    std::swap(available_, other->available_);
    std::swap(withdrawquota_, other->withdrawquota_);
    std::swap(reserve_, other->reserve_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(settlementid_, other->settlementid_);
    std::swap(credit_, other->credit_);
    std::swap(mortgage_, other->mortgage_);
    std::swap(exchangemargin_, other->exchangemargin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Account_descriptor_;
  metadata.reflection = Account_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BacktestingExpectAssetList::kTableNameFieldNumber;
const int BacktestingExpectAssetList::kTypeFieldNumber;
const int BacktestingExpectAssetList::kLevelFieldNumber;
const int BacktestingExpectAssetList::kTotalFieldNumber;
const int BacktestingExpectAssetList::kDataFieldNumber;
#endif  // !_MSC_VER

BacktestingExpectAssetList::BacktestingExpectAssetList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BacktestingExpectAssetList::InitAsDefaultInstance() {
}

BacktestingExpectAssetList::BacktestingExpectAssetList(const BacktestingExpectAssetList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BacktestingExpectAssetList::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BacktestingExpectAssetList::~BacktestingExpectAssetList() {
  SharedDtor();
}

void BacktestingExpectAssetList::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void BacktestingExpectAssetList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BacktestingExpectAssetList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BacktestingExpectAssetList_descriptor_;
}

const BacktestingExpectAssetList& BacktestingExpectAssetList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cp_5fcomunication_2eproto();
  return *default_instance_;
}

BacktestingExpectAssetList* BacktestingExpectAssetList::default_instance_ = NULL;

BacktestingExpectAssetList* BacktestingExpectAssetList::New() const {
  return new BacktestingExpectAssetList;
}

void BacktestingExpectAssetList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    level_ = 0;
    total_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BacktestingExpectAssetList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total;
        break;
      }

      // required int32 total = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_data;
        break;
      }

      // repeated double data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BacktestingExpectAssetList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 total = 4;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total(), output);
  }

  // repeated double data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BacktestingExpectAssetList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 total = 4;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total(), target);
  }

  // repeated double data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BacktestingExpectAssetList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 total = 4;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  // repeated double data = 5;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BacktestingExpectAssetList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BacktestingExpectAssetList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BacktestingExpectAssetList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BacktestingExpectAssetList::MergeFrom(const BacktestingExpectAssetList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BacktestingExpectAssetList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BacktestingExpectAssetList::CopyFrom(const BacktestingExpectAssetList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BacktestingExpectAssetList::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BacktestingExpectAssetList::Swap(BacktestingExpectAssetList* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(total_, other->total_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BacktestingExpectAssetList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BacktestingExpectAssetList_descriptor_;
  metadata.reflection = BacktestingExpectAssetList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BacktestingExpectAssetQuery::kTableNameFieldNumber;
const int BacktestingExpectAssetQuery::kTypeFieldNumber;
const int BacktestingExpectAssetQuery::kLevelFieldNumber;
#endif  // !_MSC_VER

BacktestingExpectAssetQuery::BacktestingExpectAssetQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BacktestingExpectAssetQuery::InitAsDefaultInstance() {
}

BacktestingExpectAssetQuery::BacktestingExpectAssetQuery(const BacktestingExpectAssetQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BacktestingExpectAssetQuery::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BacktestingExpectAssetQuery::~BacktestingExpectAssetQuery() {
  SharedDtor();
}

void BacktestingExpectAssetQuery::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void BacktestingExpectAssetQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BacktestingExpectAssetQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BacktestingExpectAssetQuery_descriptor_;
}

const BacktestingExpectAssetQuery& BacktestingExpectAssetQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cp_5fcomunication_2eproto();
  return *default_instance_;
}

BacktestingExpectAssetQuery* BacktestingExpectAssetQuery::default_instance_ = NULL;

BacktestingExpectAssetQuery* BacktestingExpectAssetQuery::New() const {
  return new BacktestingExpectAssetQuery;
}

void BacktestingExpectAssetQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BacktestingExpectAssetQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BacktestingExpectAssetQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BacktestingExpectAssetQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BacktestingExpectAssetQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BacktestingExpectAssetQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BacktestingExpectAssetQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BacktestingExpectAssetQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BacktestingExpectAssetQuery::MergeFrom(const BacktestingExpectAssetQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BacktestingExpectAssetQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BacktestingExpectAssetQuery::CopyFrom(const BacktestingExpectAssetQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BacktestingExpectAssetQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BacktestingExpectAssetQuery::Swap(BacktestingExpectAssetQuery* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BacktestingExpectAssetQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BacktestingExpectAssetQuery_descriptor_;
  metadata.reflection = BacktestingExpectAssetQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BacktestingResultSave2DBRequery_BacktestingResultItem::kTimeStringFieldNumber;
const int BacktestingResultSave2DBRequery_BacktestingResultItem::kTimeFieldNumber;
const int BacktestingResultSave2DBRequery_BacktestingResultItem::kMoneyFieldNumber;
#endif  // !_MSC_VER

BacktestingResultSave2DBRequery_BacktestingResultItem::BacktestingResultSave2DBRequery_BacktestingResultItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BacktestingResultSave2DBRequery_BacktestingResultItem::InitAsDefaultInstance() {
}

BacktestingResultSave2DBRequery_BacktestingResultItem::BacktestingResultSave2DBRequery_BacktestingResultItem(const BacktestingResultSave2DBRequery_BacktestingResultItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BacktestingResultSave2DBRequery_BacktestingResultItem::SharedCtor() {
  _cached_size_ = 0;
  time_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_LONGLONG(0);
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BacktestingResultSave2DBRequery_BacktestingResultItem::~BacktestingResultSave2DBRequery_BacktestingResultItem() {
  SharedDtor();
}

void BacktestingResultSave2DBRequery_BacktestingResultItem::SharedDtor() {
  if (time_string_ != &::google::protobuf::internal::kEmptyString) {
    delete time_string_;
  }
  if (this != default_instance_) {
  }
}

void BacktestingResultSave2DBRequery_BacktestingResultItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BacktestingResultSave2DBRequery_BacktestingResultItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BacktestingResultSave2DBRequery_BacktestingResultItem_descriptor_;
}

const BacktestingResultSave2DBRequery_BacktestingResultItem& BacktestingResultSave2DBRequery_BacktestingResultItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cp_5fcomunication_2eproto();
  return *default_instance_;
}

BacktestingResultSave2DBRequery_BacktestingResultItem* BacktestingResultSave2DBRequery_BacktestingResultItem::default_instance_ = NULL;

BacktestingResultSave2DBRequery_BacktestingResultItem* BacktestingResultSave2DBRequery_BacktestingResultItem::New() const {
  return new BacktestingResultSave2DBRequery_BacktestingResultItem;
}

void BacktestingResultSave2DBRequery_BacktestingResultItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_time_string()) {
      if (time_string_ != &::google::protobuf::internal::kEmptyString) {
        time_string_->clear();
      }
    }
    time_ = GOOGLE_LONGLONG(0);
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BacktestingResultSave2DBRequery_BacktestingResultItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string time_string = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time_string().data(), this->time_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_money;
        break;
      }

      // required double money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BacktestingResultSave2DBRequery_BacktestingResultItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string time_string = 1;
  if (has_time_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_string().data(), this->time_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->time_string(), output);
  }

  // required int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // required double money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BacktestingResultSave2DBRequery_BacktestingResultItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string time_string = 1;
  if (has_time_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_string().data(), this->time_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->time_string(), target);
  }

  // required int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // required double money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BacktestingResultSave2DBRequery_BacktestingResultItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string time_string = 1;
    if (has_time_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_string());
    }

    // required int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required double money = 3;
    if (has_money()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BacktestingResultSave2DBRequery_BacktestingResultItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BacktestingResultSave2DBRequery_BacktestingResultItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BacktestingResultSave2DBRequery_BacktestingResultItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BacktestingResultSave2DBRequery_BacktestingResultItem::MergeFrom(const BacktestingResultSave2DBRequery_BacktestingResultItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_string()) {
      set_time_string(from.time_string());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BacktestingResultSave2DBRequery_BacktestingResultItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BacktestingResultSave2DBRequery_BacktestingResultItem::CopyFrom(const BacktestingResultSave2DBRequery_BacktestingResultItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BacktestingResultSave2DBRequery_BacktestingResultItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BacktestingResultSave2DBRequery_BacktestingResultItem::Swap(BacktestingResultSave2DBRequery_BacktestingResultItem* other) {
  if (other != this) {
    std::swap(time_string_, other->time_string_);
    std::swap(time_, other->time_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BacktestingResultSave2DBRequery_BacktestingResultItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BacktestingResultSave2DBRequery_BacktestingResultItem_descriptor_;
  metadata.reflection = BacktestingResultSave2DBRequery_BacktestingResultItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BacktestingResultSave2DBRequery::kTableNameFieldNumber;
const int BacktestingResultSave2DBRequery::kTotalFieldNumber;
const int BacktestingResultSave2DBRequery::kChartFieldNumber;
const int BacktestingResultSave2DBRequery::kDataFieldNumber;
#endif  // !_MSC_VER

BacktestingResultSave2DBRequery::BacktestingResultSave2DBRequery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BacktestingResultSave2DBRequery::InitAsDefaultInstance() {
}

BacktestingResultSave2DBRequery::BacktestingResultSave2DBRequery(const BacktestingResultSave2DBRequery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BacktestingResultSave2DBRequery::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_ = 0;
  chart_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BacktestingResultSave2DBRequery::~BacktestingResultSave2DBRequery() {
  SharedDtor();
}

void BacktestingResultSave2DBRequery::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void BacktestingResultSave2DBRequery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BacktestingResultSave2DBRequery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BacktestingResultSave2DBRequery_descriptor_;
}

const BacktestingResultSave2DBRequery& BacktestingResultSave2DBRequery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cp_5fcomunication_2eproto();
  return *default_instance_;
}

BacktestingResultSave2DBRequery* BacktestingResultSave2DBRequery::default_instance_ = NULL;

BacktestingResultSave2DBRequery* BacktestingResultSave2DBRequery::New() const {
  return new BacktestingResultSave2DBRequery;
}

void BacktestingResultSave2DBRequery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    total_ = 0;
    chart_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BacktestingResultSave2DBRequery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }

      // required int32 total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chart;
        break;
      }

      // required int32 chart = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chart_)));
          set_has_chart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .ctp.cp.BacktestingResultSave2DBRequery.BacktestingResultItem data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BacktestingResultSave2DBRequery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }

  // required int32 total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total(), output);
  }

  // required int32 chart = 3;
  if (has_chart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chart(), output);
  }

  // repeated .ctp.cp.BacktestingResultSave2DBRequery.BacktestingResultItem data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BacktestingResultSave2DBRequery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // required int32 total = 2;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total(), target);
  }

  // required int32 chart = 3;
  if (has_chart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chart(), target);
  }

  // repeated .ctp.cp.BacktestingResultSave2DBRequery.BacktestingResultItem data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BacktestingResultSave2DBRequery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // required int32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // required int32 chart = 3;
    if (has_chart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chart());
    }

  }
  // repeated .ctp.cp.BacktestingResultSave2DBRequery.BacktestingResultItem data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BacktestingResultSave2DBRequery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BacktestingResultSave2DBRequery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BacktestingResultSave2DBRequery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BacktestingResultSave2DBRequery::MergeFrom(const BacktestingResultSave2DBRequery& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_chart()) {
      set_chart(from.chart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BacktestingResultSave2DBRequery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BacktestingResultSave2DBRequery::CopyFrom(const BacktestingResultSave2DBRequery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BacktestingResultSave2DBRequery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void BacktestingResultSave2DBRequery::Swap(BacktestingResultSave2DBRequery* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(total_, other->total_);
    std::swap(chart_, other->chart_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BacktestingResultSave2DBRequery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BacktestingResultSave2DBRequery_descriptor_;
  metadata.reflection = BacktestingResultSave2DBRequery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BacktestingResultSave2DBResponse::kTableNameFieldNumber;
const int BacktestingResultSave2DBResponse::kProgressFieldNumber;
#endif  // !_MSC_VER

BacktestingResultSave2DBResponse::BacktestingResultSave2DBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BacktestingResultSave2DBResponse::InitAsDefaultInstance() {
}

BacktestingResultSave2DBResponse::BacktestingResultSave2DBResponse(const BacktestingResultSave2DBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BacktestingResultSave2DBResponse::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  progress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BacktestingResultSave2DBResponse::~BacktestingResultSave2DBResponse() {
  SharedDtor();
}

void BacktestingResultSave2DBResponse::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void BacktestingResultSave2DBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BacktestingResultSave2DBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BacktestingResultSave2DBResponse_descriptor_;
}

const BacktestingResultSave2DBResponse& BacktestingResultSave2DBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cp_5fcomunication_2eproto();
  return *default_instance_;
}

BacktestingResultSave2DBResponse* BacktestingResultSave2DBResponse::default_instance_ = NULL;

BacktestingResultSave2DBResponse* BacktestingResultSave2DBResponse::New() const {
  return new BacktestingResultSave2DBResponse;
}

void BacktestingResultSave2DBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    progress_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BacktestingResultSave2DBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_progress;
        break;
      }

      // required int32 progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BacktestingResultSave2DBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }

  // required int32 progress = 2;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->progress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BacktestingResultSave2DBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // required int32 progress = 2;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->progress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BacktestingResultSave2DBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // required int32 progress = 2;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BacktestingResultSave2DBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BacktestingResultSave2DBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BacktestingResultSave2DBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BacktestingResultSave2DBResponse::MergeFrom(const BacktestingResultSave2DBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BacktestingResultSave2DBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BacktestingResultSave2DBResponse::CopyFrom(const BacktestingResultSave2DBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BacktestingResultSave2DBResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BacktestingResultSave2DBResponse::Swap(BacktestingResultSave2DBResponse* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BacktestingResultSave2DBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BacktestingResultSave2DBResponse_descriptor_;
  metadata.reflection = BacktestingResultSave2DBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test1::kSFieldNumber;
#endif  // !_MSC_VER

test1::test1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test1::InitAsDefaultInstance() {
}

test1::test1(const test1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test1::SharedCtor() {
  _cached_size_ = 0;
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test1::~test1() {
  SharedDtor();
}

void test1::SharedDtor() {
  if (s_ != &::google::protobuf::internal::kEmptyString) {
    delete s_;
  }
  if (this != default_instance_) {
  }
}

void test1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test1_descriptor_;
}

const test1& test1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cp_5fcomunication_2eproto();
  return *default_instance_;
}

test1* test1::default_instance_ = NULL;

test1* test1::New() const {
  return new test1;
}

void test1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::kEmptyString) {
        s_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string s = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string s = 1;
  if (has_s()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string s = 1;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test1::MergeFrom(const test1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s()) {
      set_s(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test1::CopyFrom(const test1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void test1::Swap(test1* other) {
  if (other != this) {
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test1_descriptor_;
  metadata.reflection = test1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test2::kS2FieldNumber;
const int test2::kT2FieldNumber;
#endif  // !_MSC_VER

test2::test2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test2::InitAsDefaultInstance() {
  t2_ = const_cast< ::ctp::cp::test1*>(&::ctp::cp::test1::default_instance());
}

test2::test2(const test2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test2::SharedCtor() {
  _cached_size_ = 0;
  s2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  t2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test2::~test2() {
  SharedDtor();
}

void test2::SharedDtor() {
  if (s2_ != &::google::protobuf::internal::kEmptyString) {
    delete s2_;
  }
  if (this != default_instance_) {
    delete t2_;
  }
}

void test2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test2_descriptor_;
}

const test2& test2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cp_5fcomunication_2eproto();
  return *default_instance_;
}

test2* test2::default_instance_ = NULL;

test2* test2::New() const {
  return new test2;
}

void test2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_s2()) {
      if (s2_ != &::google::protobuf::internal::kEmptyString) {
        s2_->clear();
      }
    }
    if (has_t2()) {
      if (t2_ != NULL) t2_->::ctp::cp::test1::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string s2 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->s2().data(), this->s2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_t2;
        break;
      }

      // required .ctp.cp.test1 t2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_t2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_t2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string s2 = 1;
  if (has_s2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s2().data(), this->s2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->s2(), output);
  }

  // required .ctp.cp.test1 t2 = 2;
  if (has_t2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->t2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string s2 = 1;
  if (has_s2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->s2().data(), this->s2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->s2(), target);
  }

  // required .ctp.cp.test1 t2 = 2;
  if (has_t2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->t2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string s2 = 1;
    if (has_s2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->s2());
    }

    // required .ctp.cp.test1 t2 = 2;
    if (has_t2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->t2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test2::MergeFrom(const test2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_s2()) {
      set_s2(from.s2());
    }
    if (from.has_t2()) {
      mutable_t2()->::ctp::cp::test1::MergeFrom(from.t2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test2::CopyFrom(const test2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_t2()) {
    if (!this->t2().IsInitialized()) return false;
  }
  return true;
}

void test2::Swap(test2* other) {
  if (other != this) {
    std::swap(s2_, other->s2_);
    std::swap(t2_, other->t2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test2_descriptor_;
  metadata.reflection = test2_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cp
}  // namespace ctp

// @@protoc_insertion_point(global_scope)
