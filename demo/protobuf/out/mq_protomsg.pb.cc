// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mq_protomsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mq_protomsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ctp {
namespace mq {

namespace {

const ::google::protobuf::Descriptor* BasicMQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasicMQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelMQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelMQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryLevelMQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryLevelMQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelMQTotal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelMQTotal_reflection_ = NULL;
const ::google::protobuf::Descriptor* BacktestingLevelMQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BacktestingLevelMQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* BacktestingLevelMQList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BacktestingLevelMQList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BacktestingLevelMQ2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BacktestingLevelMQ2_reflection_ = NULL;
const ::google::protobuf::Descriptor* BacktestingLevelMQList2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BacktestingLevelMQList2_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mq_5fprotomsg_2eproto() {
  protobuf_AddDesc_mq_5fprotomsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mq_protomsg.proto");
  GOOGLE_CHECK(file != NULL);
  BasicMQ_descriptor_ = file->message_type(0);
  static const int BasicMQ_offsets_[45] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, time_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, exchangeinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, lastprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, presettlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, precloseprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, preopeninterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, highestprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, lowestprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, openinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, closeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, settlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, upperlimitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, lowerlimitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, predelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, currdelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, updatemillisec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, bidprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, bidvolume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, askprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, askvolume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, bidprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, bidvolume2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, askprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, askvolume2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, bidprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, bidvolume3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, askprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, askvolume3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, bidprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, bidvolume4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, askprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, askvolume4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, bidprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, bidvolume5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, askprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, askvolume5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, averageprice_),
  };
  BasicMQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BasicMQ_descriptor_,
      BasicMQ::default_instance_,
      BasicMQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicMQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BasicMQ));
  LevelMQ_descriptor_ = file->message_type(1);
  static const int LevelMQ_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQ, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQ, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQ, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQ, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQ, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQ, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQ, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQ, close_ask1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQ, close_bid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQ, volumn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQ, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQ, time_string_),
  };
  LevelMQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelMQ_descriptor_,
      LevelMQ::default_instance_,
      LevelMQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelMQ));
  QueryLevelMQ_descriptor_ = file->message_type(2);
  static const int QueryLevelMQ_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLevelMQ, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLevelMQ, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLevelMQ, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLevelMQ, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLevelMQ, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLevelMQ, number_),
  };
  QueryLevelMQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryLevelMQ_descriptor_,
      QueryLevelMQ::default_instance_,
      QueryLevelMQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLevelMQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryLevelMQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryLevelMQ));
  LevelMQTotal_descriptor_ = file->message_type(3);
  static const int LevelMQTotal_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQTotal, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQTotal, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQTotal, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQTotal, total_),
  };
  LevelMQTotal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelMQTotal_descriptor_,
      LevelMQTotal::default_instance_,
      LevelMQTotal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQTotal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelMQTotal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelMQTotal));
  BacktestingLevelMQ_descriptor_ = file->message_type(4);
  static const int BacktestingLevelMQ_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ, time_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ, close_),
  };
  BacktestingLevelMQ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BacktestingLevelMQ_descriptor_,
      BacktestingLevelMQ::default_instance_,
      BacktestingLevelMQ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BacktestingLevelMQ));
  BacktestingLevelMQList_descriptor_ = file->message_type(5);
  static const int BacktestingLevelMQList_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQList, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQList, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQList, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQList, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQList, data_),
  };
  BacktestingLevelMQList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BacktestingLevelMQList_descriptor_,
      BacktestingLevelMQList::default_instance_,
      BacktestingLevelMQList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BacktestingLevelMQList));
  BacktestingLevelMQ2_descriptor_ = file->message_type(6);
  static const int BacktestingLevelMQ2_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ2, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ2, time_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ2, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ2, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ2, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ2, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ2, next_level_mq_index_),
  };
  BacktestingLevelMQ2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BacktestingLevelMQ2_descriptor_,
      BacktestingLevelMQ2::default_instance_,
      BacktestingLevelMQ2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQ2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BacktestingLevelMQ2));
  BacktestingLevelMQList2_descriptor_ = file->message_type(7);
  static const int BacktestingLevelMQList2_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQList2, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQList2, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQList2, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQList2, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQList2, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQList2, data_),
  };
  BacktestingLevelMQList2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BacktestingLevelMQList2_descriptor_,
      BacktestingLevelMQList2::default_instance_,
      BacktestingLevelMQList2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQList2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BacktestingLevelMQList2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BacktestingLevelMQList2));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mq_5fprotomsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BasicMQ_descriptor_, &BasicMQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelMQ_descriptor_, &LevelMQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryLevelMQ_descriptor_, &QueryLevelMQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelMQTotal_descriptor_, &LevelMQTotal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BacktestingLevelMQ_descriptor_, &BacktestingLevelMQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BacktestingLevelMQList_descriptor_, &BacktestingLevelMQList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BacktestingLevelMQ2_descriptor_, &BacktestingLevelMQ2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BacktestingLevelMQList2_descriptor_, &BacktestingLevelMQList2::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mq_5fprotomsg_2eproto() {
  delete BasicMQ::default_instance_;
  delete BasicMQ_reflection_;
  delete LevelMQ::default_instance_;
  delete LevelMQ_reflection_;
  delete QueryLevelMQ::default_instance_;
  delete QueryLevelMQ_reflection_;
  delete LevelMQTotal::default_instance_;
  delete LevelMQTotal_reflection_;
  delete BacktestingLevelMQ::default_instance_;
  delete BacktestingLevelMQ_reflection_;
  delete BacktestingLevelMQList::default_instance_;
  delete BacktestingLevelMQList_reflection_;
  delete BacktestingLevelMQ2::default_instance_;
  delete BacktestingLevelMQ2_reflection_;
  delete BacktestingLevelMQList2::default_instance_;
  delete BacktestingLevelMQList2_reflection_;
}

void protobuf_AddDesc_mq_5fprotomsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021mq_protomsg.proto\022\006ctp.mq\"\233\007\n\007BasicMQ\022"
    "\014\n\004time\030\001 \002(\003\022\023\n\013time_string\030\002 \002(\t\022\022\n\ntr"
    "adingday\030\003 \002(\t\022\014\n\004type\030\004 \002(\t\022\022\n\nexchange"
    "id\030\005 \002(\t\022\026\n\016exchangeinstid\030\006 \002(\t\022\021\n\tlast"
    "price\030\007 \002(\001\022\032\n\022presettlementprice\030\010 \002(\001\022"
    "\025\n\rprecloseprice\030\t \002(\001\022\027\n\017preopeninteres"
    "t\030\n \002(\001\022\021\n\topenprice\030\013 \002(\001\022\024\n\014highestpri"
    "ce\030\014 \002(\001\022\023\n\013lowestprice\030\r \002(\001\022\016\n\006volume\030"
    "\016 \002(\005\022\020\n\010turnover\030\017 \002(\001\022\024\n\014openinterest\030"
    "\020 \002(\001\022\022\n\ncloseprice\030\021 \002(\001\022\027\n\017settlementp"
    "rice\030\022 \002(\001\022\027\n\017upperlimitprice\030\023 \002(\001\022\027\n\017l"
    "owerlimitprice\030\024 \002(\001\022\020\n\010predelta\030\025 \002(\001\022\021"
    "\n\tcurrdelta\030\026 \002(\001\022\022\n\nupdatetime\030\027 \002(\t\022\026\n"
    "\016updatemillisec\030\030 \002(\005\022\021\n\tbidprice1\030\031 \002(\001"
    "\022\022\n\nbidvolume1\030\032 \002(\005\022\021\n\taskprice1\030\033 \002(\001\022"
    "\022\n\naskvolume1\030\034 \002(\005\022\021\n\tbidprice2\030\035 \002(\001\022\022"
    "\n\nbidvolume2\030\036 \002(\005\022\021\n\taskprice2\030\037 \002(\001\022\022\n"
    "\naskvolume2\030  \002(\005\022\021\n\tbidprice3\030! \002(\001\022\022\n\n"
    "bidvolume3\030\" \002(\005\022\021\n\taskprice3\030# \002(\001\022\022\n\na"
    "skvolume3\030$ \002(\005\022\021\n\tbidprice4\030% \002(\001\022\022\n\nbi"
    "dvolume4\030& \002(\005\022\021\n\taskprice4\030\' \002(\001\022\022\n\nask"
    "volume4\030( \002(\005\022\021\n\tbidprice5\030) \002(\001\022\022\n\nbidv"
    "olume5\030* \002(\005\022\021\n\taskprice5\030+ \002(\001\022\022\n\naskvo"
    "lume5\030, \002(\005\022\024\n\014averageprice\030- \002(\001\"\312\001\n\007Le"
    "velMQ\022\r\n\005level\030\001 \002(\005\022\014\n\004time\030\002 \002(\003\022\014\n\004ty"
    "pe\030\003 \002(\t\022\014\n\004open\030\004 \002(\001\022\014\n\004high\030\005 \002(\001\022\013\n\003"
    "low\030\006 \002(\001\022\r\n\005close\030\007 \002(\001\022\022\n\nclose_ask1\030\010"
    " \002(\001\022\022\n\nclose_bid1\030\t \002(\001\022\016\n\006volumn\030\n \002(\005"
    "\022\017\n\007counter\030\013 \002(\005\022\023\n\013time_string\030\014 \002(\t\"k"
    "\n\014QueryLevelMQ\022\022\n\ntable_name\030\001 \002(\t\022\014\n\004ty"
    "pe\030\002 \002(\t\022\r\n\005start\030\003 \002(\003\022\013\n\003end\030\004 \002(\003\022\r\n\005"
    "level\030\005 \002(\005\022\016\n\006number\030\006 \002(\005\"N\n\014LevelMQTo"
    "tal\022\022\n\ntable_name\030\001 \002(\t\022\014\n\004type\030\002 \002(\t\022\r\n"
    "\005level\030\003 \002(\005\022\r\n\005total\030\004 \002(\005\"o\n\022Backtesti"
    "ngLevelMQ\022\014\n\004time\030\001 \002(\003\022\023\n\013time_string\030\002"
    " \002(\t\022\014\n\004open\030\003 \002(\001\022\014\n\004high\030\004 \002(\001\022\013\n\003low\030"
    "\005 \002(\001\022\r\n\005close\030\006 \002(\001\"\221\001\n\026BacktestingLeve"
    "lMQList\022\022\n\ntable_name\030\001 \002(\t\022\014\n\004type\030\002 \002("
    "\t\022\r\n\005level\030\003 \002(\005\022\r\n\005total\030\004 \002(\005\022\r\n\005index"
    "\030\005 \002(\005\022(\n\004data\030\006 \003(\0132\032.ctp.mq.Backtestin"
    "gLevelMQ\"\215\001\n\023BacktestingLevelMQ2\022\014\n\004time"
    "\030\001 \002(\003\022\023\n\013time_string\030\002 \002(\t\022\014\n\004open\030\003 \002("
    "\001\022\014\n\004high\030\004 \002(\001\022\013\n\003low\030\005 \002(\001\022\r\n\005close\030\006 "
    "\002(\001\022\033\n\023next_level_mq_index\030\007 \002(\005\"\223\001\n\027Bac"
    "ktestingLevelMQList2\022\022\n\ntable_name\030\001 \002(\t"
    "\022\014\n\004type\030\002 \002(\t\022\r\n\005level\030\003 \002(\005\022\r\n\005total\030\004"
    " \002(\005\022\r\n\005index\030\005 \002(\005\022)\n\004data\030\006 \003(\0132\033.ctp."
    "mq.BacktestingLevelMQ2", 1902);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mq_protomsg.proto", &protobuf_RegisterTypes);
  BasicMQ::default_instance_ = new BasicMQ();
  LevelMQ::default_instance_ = new LevelMQ();
  QueryLevelMQ::default_instance_ = new QueryLevelMQ();
  LevelMQTotal::default_instance_ = new LevelMQTotal();
  BacktestingLevelMQ::default_instance_ = new BacktestingLevelMQ();
  BacktestingLevelMQList::default_instance_ = new BacktestingLevelMQList();
  BacktestingLevelMQ2::default_instance_ = new BacktestingLevelMQ2();
  BacktestingLevelMQList2::default_instance_ = new BacktestingLevelMQList2();
  BasicMQ::default_instance_->InitAsDefaultInstance();
  LevelMQ::default_instance_->InitAsDefaultInstance();
  QueryLevelMQ::default_instance_->InitAsDefaultInstance();
  LevelMQTotal::default_instance_->InitAsDefaultInstance();
  BacktestingLevelMQ::default_instance_->InitAsDefaultInstance();
  BacktestingLevelMQList::default_instance_->InitAsDefaultInstance();
  BacktestingLevelMQ2::default_instance_->InitAsDefaultInstance();
  BacktestingLevelMQList2::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mq_5fprotomsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mq_5fprotomsg_2eproto {
  StaticDescriptorInitializer_mq_5fprotomsg_2eproto() {
    protobuf_AddDesc_mq_5fprotomsg_2eproto();
  }
} static_descriptor_initializer_mq_5fprotomsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BasicMQ::kTimeFieldNumber;
const int BasicMQ::kTimeStringFieldNumber;
const int BasicMQ::kTradingdayFieldNumber;
const int BasicMQ::kTypeFieldNumber;
const int BasicMQ::kExchangeidFieldNumber;
const int BasicMQ::kExchangeinstidFieldNumber;
const int BasicMQ::kLastpriceFieldNumber;
const int BasicMQ::kPresettlementpriceFieldNumber;
const int BasicMQ::kPreclosepriceFieldNumber;
const int BasicMQ::kPreopeninterestFieldNumber;
const int BasicMQ::kOpenpriceFieldNumber;
const int BasicMQ::kHighestpriceFieldNumber;
const int BasicMQ::kLowestpriceFieldNumber;
const int BasicMQ::kVolumeFieldNumber;
const int BasicMQ::kTurnoverFieldNumber;
const int BasicMQ::kOpeninterestFieldNumber;
const int BasicMQ::kClosepriceFieldNumber;
const int BasicMQ::kSettlementpriceFieldNumber;
const int BasicMQ::kUpperlimitpriceFieldNumber;
const int BasicMQ::kLowerlimitpriceFieldNumber;
const int BasicMQ::kPredeltaFieldNumber;
const int BasicMQ::kCurrdeltaFieldNumber;
const int BasicMQ::kUpdatetimeFieldNumber;
const int BasicMQ::kUpdatemillisecFieldNumber;
const int BasicMQ::kBidprice1FieldNumber;
const int BasicMQ::kBidvolume1FieldNumber;
const int BasicMQ::kAskprice1FieldNumber;
const int BasicMQ::kAskvolume1FieldNumber;
const int BasicMQ::kBidprice2FieldNumber;
const int BasicMQ::kBidvolume2FieldNumber;
const int BasicMQ::kAskprice2FieldNumber;
const int BasicMQ::kAskvolume2FieldNumber;
const int BasicMQ::kBidprice3FieldNumber;
const int BasicMQ::kBidvolume3FieldNumber;
const int BasicMQ::kAskprice3FieldNumber;
const int BasicMQ::kAskvolume3FieldNumber;
const int BasicMQ::kBidprice4FieldNumber;
const int BasicMQ::kBidvolume4FieldNumber;
const int BasicMQ::kAskprice4FieldNumber;
const int BasicMQ::kAskvolume4FieldNumber;
const int BasicMQ::kBidprice5FieldNumber;
const int BasicMQ::kBidvolume5FieldNumber;
const int BasicMQ::kAskprice5FieldNumber;
const int BasicMQ::kAskvolume5FieldNumber;
const int BasicMQ::kAveragepriceFieldNumber;
#endif  // !_MSC_VER

BasicMQ::BasicMQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BasicMQ::InitAsDefaultInstance() {
}

BasicMQ::BasicMQ(const BasicMQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BasicMQ::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  time_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeinstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastprice_ = 0;
  presettlementprice_ = 0;
  precloseprice_ = 0;
  preopeninterest_ = 0;
  openprice_ = 0;
  highestprice_ = 0;
  lowestprice_ = 0;
  volume_ = 0;
  turnover_ = 0;
  openinterest_ = 0;
  closeprice_ = 0;
  settlementprice_ = 0;
  upperlimitprice_ = 0;
  lowerlimitprice_ = 0;
  predelta_ = 0;
  currdelta_ = 0;
  updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updatemillisec_ = 0;
  bidprice1_ = 0;
  bidvolume1_ = 0;
  askprice1_ = 0;
  askvolume1_ = 0;
  bidprice2_ = 0;
  bidvolume2_ = 0;
  askprice2_ = 0;
  askvolume2_ = 0;
  bidprice3_ = 0;
  bidvolume3_ = 0;
  askprice3_ = 0;
  askvolume3_ = 0;
  bidprice4_ = 0;
  bidvolume4_ = 0;
  askprice4_ = 0;
  askvolume4_ = 0;
  bidprice5_ = 0;
  bidvolume5_ = 0;
  askprice5_ = 0;
  askvolume5_ = 0;
  averageprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasicMQ::~BasicMQ() {
  SharedDtor();
}

void BasicMQ::SharedDtor() {
  if (time_string_ != &::google::protobuf::internal::kEmptyString) {
    delete time_string_;
  }
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeinstid_;
  }
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updatetime_;
  }
  if (this != default_instance_) {
  }
}

void BasicMQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicMQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicMQ_descriptor_;
}

const BasicMQ& BasicMQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mq_5fprotomsg_2eproto();
  return *default_instance_;
}

BasicMQ* BasicMQ::default_instance_ = NULL;

BasicMQ* BasicMQ::New() const {
  return new BasicMQ;
}

void BasicMQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_time_string()) {
      if (time_string_ != &::google::protobuf::internal::kEmptyString) {
        time_string_->clear();
      }
    }
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeid_->clear();
      }
    }
    if (has_exchangeinstid()) {
      if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeinstid_->clear();
      }
    }
    lastprice_ = 0;
    presettlementprice_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    precloseprice_ = 0;
    preopeninterest_ = 0;
    openprice_ = 0;
    highestprice_ = 0;
    lowestprice_ = 0;
    volume_ = 0;
    turnover_ = 0;
    openinterest_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    closeprice_ = 0;
    settlementprice_ = 0;
    upperlimitprice_ = 0;
    lowerlimitprice_ = 0;
    predelta_ = 0;
    currdelta_ = 0;
    if (has_updatetime()) {
      if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
        updatetime_->clear();
      }
    }
    updatemillisec_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    bidprice1_ = 0;
    bidvolume1_ = 0;
    askprice1_ = 0;
    askvolume1_ = 0;
    bidprice2_ = 0;
    bidvolume2_ = 0;
    askprice2_ = 0;
    askvolume2_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    bidprice3_ = 0;
    bidvolume3_ = 0;
    askprice3_ = 0;
    askvolume3_ = 0;
    bidprice4_ = 0;
    bidvolume4_ = 0;
    askprice4_ = 0;
    askvolume4_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    bidprice5_ = 0;
    bidvolume5_ = 0;
    askprice5_ = 0;
    askvolume5_ = 0;
    averageprice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BasicMQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_time_string;
        break;
      }

      // required string time_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time_string().data(), this->time_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tradingday;
        break;
      }

      // required string tradingday = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tradingday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_type;
        break;
      }

      // required string type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_exchangeid;
        break;
      }

      // required string exchangeid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchangeid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_exchangeinstid;
        break;
      }

      // required string exchangeinstid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchangeinstid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeinstid().data(), this->exchangeinstid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_lastprice;
        break;
      }

      // required double lastprice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lastprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastprice_)));
          set_has_lastprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_presettlementprice;
        break;
      }

      // required double presettlementprice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_presettlementprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presettlementprice_)));
          set_has_presettlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_precloseprice;
        break;
      }

      // required double precloseprice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_precloseprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precloseprice_)));
          set_has_precloseprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_preopeninterest;
        break;
      }

      // required double preopeninterest = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_preopeninterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preopeninterest_)));
          set_has_preopeninterest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_openprice;
        break;
      }

      // required double openprice = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_openprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_highestprice;
        break;
      }

      // required double highestprice = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_highestprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highestprice_)));
          set_has_highestprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_lowestprice;
        break;
      }

      // required double lowestprice = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lowestprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowestprice_)));
          set_has_lowestprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_volume;
        break;
      }

      // required int32 volume = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_turnover;
        break;
      }

      // required double turnover = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_openinterest;
        break;
      }

      // required double openinterest = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_openinterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openinterest_)));
          set_has_openinterest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_closeprice;
        break;
      }

      // required double closeprice = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_closeprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprice_)));
          set_has_closeprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_settlementprice;
        break;
      }

      // required double settlementprice = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_settlementprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlementprice_)));
          set_has_settlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_upperlimitprice;
        break;
      }

      // required double upperlimitprice = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_upperlimitprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upperlimitprice_)));
          set_has_upperlimitprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_lowerlimitprice;
        break;
      }

      // required double lowerlimitprice = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lowerlimitprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowerlimitprice_)));
          set_has_lowerlimitprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_predelta;
        break;
      }

      // required double predelta = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_predelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predelta_)));
          set_has_predelta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_currdelta;
        break;
      }

      // required double currdelta = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_currdelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currdelta_)));
          set_has_currdelta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_updatetime;
        break;
      }

      // required string updatetime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updatetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatetime().data(), this->updatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_updatemillisec;
        break;
      }

      // required int32 updatemillisec = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updatemillisec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatemillisec_)));
          set_has_updatemillisec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_bidprice1;
        break;
      }

      // required double bidprice1 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bidprice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice1_)));
          set_has_bidprice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_bidvolume1;
        break;
      }

      // required int32 bidvolume1 = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidvolume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume1_)));
          set_has_bidvolume1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_askprice1;
        break;
      }

      // required double askprice1 = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_askprice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice1_)));
          set_has_askprice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_askvolume1;
        break;
      }

      // required int32 askvolume1 = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_askvolume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume1_)));
          set_has_askvolume1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_bidprice2;
        break;
      }

      // required double bidprice2 = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bidprice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice2_)));
          set_has_bidprice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_bidvolume2;
        break;
      }

      // required int32 bidvolume2 = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidvolume2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume2_)));
          set_has_bidvolume2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_askprice2;
        break;
      }

      // required double askprice2 = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_askprice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice2_)));
          set_has_askprice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_askvolume2;
        break;
      }

      // required int32 askvolume2 = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_askvolume2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume2_)));
          set_has_askvolume2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_bidprice3;
        break;
      }

      // required double bidprice3 = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bidprice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice3_)));
          set_has_bidprice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_bidvolume3;
        break;
      }

      // required int32 bidvolume3 = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidvolume3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume3_)));
          set_has_bidvolume3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(281)) goto parse_askprice3;
        break;
      }

      // required double askprice3 = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_askprice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice3_)));
          set_has_askprice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_askvolume3;
        break;
      }

      // required int32 askvolume3 = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_askvolume3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume3_)));
          set_has_askvolume3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(297)) goto parse_bidprice4;
        break;
      }

      // required double bidprice4 = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bidprice4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice4_)));
          set_has_bidprice4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_bidvolume4;
        break;
      }

      // required int32 bidvolume4 = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidvolume4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume4_)));
          set_has_bidvolume4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(313)) goto parse_askprice4;
        break;
      }

      // required double askprice4 = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_askprice4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice4_)));
          set_has_askprice4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_askvolume4;
        break;
      }

      // required int32 askvolume4 = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_askvolume4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume4_)));
          set_has_askvolume4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(329)) goto parse_bidprice5;
        break;
      }

      // required double bidprice5 = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bidprice5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice5_)));
          set_has_bidprice5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_bidvolume5;
        break;
      }

      // required int32 bidvolume5 = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidvolume5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume5_)));
          set_has_bidvolume5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(345)) goto parse_askprice5;
        break;
      }

      // required double askprice5 = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_askprice5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice5_)));
          set_has_askprice5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_askvolume5;
        break;
      }

      // required int32 askvolume5 = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_askvolume5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume5_)));
          set_has_askvolume5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(361)) goto parse_averageprice;
        break;
      }

      // required double averageprice = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_averageprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averageprice_)));
          set_has_averageprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BasicMQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // required string time_string = 2;
  if (has_time_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_string().data(), this->time_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->time_string(), output);
  }

  // required string tradingday = 3;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tradingday(), output);
  }

  // required string type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->type(), output);
  }

  // required string exchangeid = 5;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->exchangeid(), output);
  }

  // required string exchangeinstid = 6;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->exchangeinstid(), output);
  }

  // required double lastprice = 7;
  if (has_lastprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->lastprice(), output);
  }

  // required double presettlementprice = 8;
  if (has_presettlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->presettlementprice(), output);
  }

  // required double precloseprice = 9;
  if (has_precloseprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->precloseprice(), output);
  }

  // required double preopeninterest = 10;
  if (has_preopeninterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->preopeninterest(), output);
  }

  // required double openprice = 11;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->openprice(), output);
  }

  // required double highestprice = 12;
  if (has_highestprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->highestprice(), output);
  }

  // required double lowestprice = 13;
  if (has_lowestprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->lowestprice(), output);
  }

  // required int32 volume = 14;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->volume(), output);
  }

  // required double turnover = 15;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->turnover(), output);
  }

  // required double openinterest = 16;
  if (has_openinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->openinterest(), output);
  }

  // required double closeprice = 17;
  if (has_closeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->closeprice(), output);
  }

  // required double settlementprice = 18;
  if (has_settlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->settlementprice(), output);
  }

  // required double upperlimitprice = 19;
  if (has_upperlimitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->upperlimitprice(), output);
  }

  // required double lowerlimitprice = 20;
  if (has_lowerlimitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->lowerlimitprice(), output);
  }

  // required double predelta = 21;
  if (has_predelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->predelta(), output);
  }

  // required double currdelta = 22;
  if (has_currdelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->currdelta(), output);
  }

  // required string updatetime = 23;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->updatetime(), output);
  }

  // required int32 updatemillisec = 24;
  if (has_updatemillisec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->updatemillisec(), output);
  }

  // required double bidprice1 = 25;
  if (has_bidprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->bidprice1(), output);
  }

  // required int32 bidvolume1 = 26;
  if (has_bidvolume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->bidvolume1(), output);
  }

  // required double askprice1 = 27;
  if (has_askprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->askprice1(), output);
  }

  // required int32 askvolume1 = 28;
  if (has_askvolume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->askvolume1(), output);
  }

  // required double bidprice2 = 29;
  if (has_bidprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->bidprice2(), output);
  }

  // required int32 bidvolume2 = 30;
  if (has_bidvolume2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->bidvolume2(), output);
  }

  // required double askprice2 = 31;
  if (has_askprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->askprice2(), output);
  }

  // required int32 askvolume2 = 32;
  if (has_askvolume2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->askvolume2(), output);
  }

  // required double bidprice3 = 33;
  if (has_bidprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->bidprice3(), output);
  }

  // required int32 bidvolume3 = 34;
  if (has_bidvolume3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->bidvolume3(), output);
  }

  // required double askprice3 = 35;
  if (has_askprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->askprice3(), output);
  }

  // required int32 askvolume3 = 36;
  if (has_askvolume3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->askvolume3(), output);
  }

  // required double bidprice4 = 37;
  if (has_bidprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->bidprice4(), output);
  }

  // required int32 bidvolume4 = 38;
  if (has_bidvolume4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->bidvolume4(), output);
  }

  // required double askprice4 = 39;
  if (has_askprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->askprice4(), output);
  }

  // required int32 askvolume4 = 40;
  if (has_askvolume4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->askvolume4(), output);
  }

  // required double bidprice5 = 41;
  if (has_bidprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->bidprice5(), output);
  }

  // required int32 bidvolume5 = 42;
  if (has_bidvolume5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->bidvolume5(), output);
  }

  // required double askprice5 = 43;
  if (has_askprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->askprice5(), output);
  }

  // required int32 askvolume5 = 44;
  if (has_askvolume5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->askvolume5(), output);
  }

  // required double averageprice = 45;
  if (has_averageprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->averageprice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BasicMQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // required string time_string = 2;
  if (has_time_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_string().data(), this->time_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time_string(), target);
  }

  // required string tradingday = 3;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tradingday(), target);
  }

  // required string type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // required string exchangeid = 5;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchangeid(), target);
  }

  // required string exchangeinstid = 6;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->exchangeinstid(), target);
  }

  // required double lastprice = 7;
  if (has_lastprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->lastprice(), target);
  }

  // required double presettlementprice = 8;
  if (has_presettlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->presettlementprice(), target);
  }

  // required double precloseprice = 9;
  if (has_precloseprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->precloseprice(), target);
  }

  // required double preopeninterest = 10;
  if (has_preopeninterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->preopeninterest(), target);
  }

  // required double openprice = 11;
  if (has_openprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->openprice(), target);
  }

  // required double highestprice = 12;
  if (has_highestprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->highestprice(), target);
  }

  // required double lowestprice = 13;
  if (has_lowestprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->lowestprice(), target);
  }

  // required int32 volume = 14;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->volume(), target);
  }

  // required double turnover = 15;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->turnover(), target);
  }

  // required double openinterest = 16;
  if (has_openinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->openinterest(), target);
  }

  // required double closeprice = 17;
  if (has_closeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->closeprice(), target);
  }

  // required double settlementprice = 18;
  if (has_settlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->settlementprice(), target);
  }

  // required double upperlimitprice = 19;
  if (has_upperlimitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->upperlimitprice(), target);
  }

  // required double lowerlimitprice = 20;
  if (has_lowerlimitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->lowerlimitprice(), target);
  }

  // required double predelta = 21;
  if (has_predelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->predelta(), target);
  }

  // required double currdelta = 22;
  if (has_currdelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->currdelta(), target);
  }

  // required string updatetime = 23;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->updatetime(), target);
  }

  // required int32 updatemillisec = 24;
  if (has_updatemillisec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->updatemillisec(), target);
  }

  // required double bidprice1 = 25;
  if (has_bidprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->bidprice1(), target);
  }

  // required int32 bidvolume1 = 26;
  if (has_bidvolume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->bidvolume1(), target);
  }

  // required double askprice1 = 27;
  if (has_askprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->askprice1(), target);
  }

  // required int32 askvolume1 = 28;
  if (has_askvolume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->askvolume1(), target);
  }

  // required double bidprice2 = 29;
  if (has_bidprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->bidprice2(), target);
  }

  // required int32 bidvolume2 = 30;
  if (has_bidvolume2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->bidvolume2(), target);
  }

  // required double askprice2 = 31;
  if (has_askprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->askprice2(), target);
  }

  // required int32 askvolume2 = 32;
  if (has_askvolume2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->askvolume2(), target);
  }

  // required double bidprice3 = 33;
  if (has_bidprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->bidprice3(), target);
  }

  // required int32 bidvolume3 = 34;
  if (has_bidvolume3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->bidvolume3(), target);
  }

  // required double askprice3 = 35;
  if (has_askprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->askprice3(), target);
  }

  // required int32 askvolume3 = 36;
  if (has_askvolume3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->askvolume3(), target);
  }

  // required double bidprice4 = 37;
  if (has_bidprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->bidprice4(), target);
  }

  // required int32 bidvolume4 = 38;
  if (has_bidvolume4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->bidvolume4(), target);
  }

  // required double askprice4 = 39;
  if (has_askprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->askprice4(), target);
  }

  // required int32 askvolume4 = 40;
  if (has_askvolume4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->askvolume4(), target);
  }

  // required double bidprice5 = 41;
  if (has_bidprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->bidprice5(), target);
  }

  // required int32 bidvolume5 = 42;
  if (has_bidvolume5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->bidvolume5(), target);
  }

  // required double askprice5 = 43;
  if (has_askprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->askprice5(), target);
  }

  // required int32 askvolume5 = 44;
  if (has_askvolume5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->askvolume5(), target);
  }

  // required double averageprice = 45;
  if (has_averageprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->averageprice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BasicMQ::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required string time_string = 2;
    if (has_time_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_string());
    }

    // required string tradingday = 3;
    if (has_tradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }

    // required string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string exchangeid = 5;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // required string exchangeinstid = 6;
    if (has_exchangeinstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeinstid());
    }

    // required double lastprice = 7;
    if (has_lastprice()) {
      total_size += 1 + 8;
    }

    // required double presettlementprice = 8;
    if (has_presettlementprice()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double precloseprice = 9;
    if (has_precloseprice()) {
      total_size += 1 + 8;
    }

    // required double preopeninterest = 10;
    if (has_preopeninterest()) {
      total_size += 1 + 8;
    }

    // required double openprice = 11;
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // required double highestprice = 12;
    if (has_highestprice()) {
      total_size += 1 + 8;
    }

    // required double lowestprice = 13;
    if (has_lowestprice()) {
      total_size += 1 + 8;
    }

    // required int32 volume = 14;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // required double turnover = 15;
    if (has_turnover()) {
      total_size += 1 + 8;
    }

    // required double openinterest = 16;
    if (has_openinterest()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double closeprice = 17;
    if (has_closeprice()) {
      total_size += 2 + 8;
    }

    // required double settlementprice = 18;
    if (has_settlementprice()) {
      total_size += 2 + 8;
    }

    // required double upperlimitprice = 19;
    if (has_upperlimitprice()) {
      total_size += 2 + 8;
    }

    // required double lowerlimitprice = 20;
    if (has_lowerlimitprice()) {
      total_size += 2 + 8;
    }

    // required double predelta = 21;
    if (has_predelta()) {
      total_size += 2 + 8;
    }

    // required double currdelta = 22;
    if (has_currdelta()) {
      total_size += 2 + 8;
    }

    // required string updatetime = 23;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatetime());
    }

    // required int32 updatemillisec = 24;
    if (has_updatemillisec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatemillisec());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double bidprice1 = 25;
    if (has_bidprice1()) {
      total_size += 2 + 8;
    }

    // required int32 bidvolume1 = 26;
    if (has_bidvolume1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume1());
    }

    // required double askprice1 = 27;
    if (has_askprice1()) {
      total_size += 2 + 8;
    }

    // required int32 askvolume1 = 28;
    if (has_askvolume1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume1());
    }

    // required double bidprice2 = 29;
    if (has_bidprice2()) {
      total_size += 2 + 8;
    }

    // required int32 bidvolume2 = 30;
    if (has_bidvolume2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume2());
    }

    // required double askprice2 = 31;
    if (has_askprice2()) {
      total_size += 2 + 8;
    }

    // required int32 askvolume2 = 32;
    if (has_askvolume2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume2());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required double bidprice3 = 33;
    if (has_bidprice3()) {
      total_size += 2 + 8;
    }

    // required int32 bidvolume3 = 34;
    if (has_bidvolume3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume3());
    }

    // required double askprice3 = 35;
    if (has_askprice3()) {
      total_size += 2 + 8;
    }

    // required int32 askvolume3 = 36;
    if (has_askvolume3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume3());
    }

    // required double bidprice4 = 37;
    if (has_bidprice4()) {
      total_size += 2 + 8;
    }

    // required int32 bidvolume4 = 38;
    if (has_bidvolume4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume4());
    }

    // required double askprice4 = 39;
    if (has_askprice4()) {
      total_size += 2 + 8;
    }

    // required int32 askvolume4 = 40;
    if (has_askvolume4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume4());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required double bidprice5 = 41;
    if (has_bidprice5()) {
      total_size += 2 + 8;
    }

    // required int32 bidvolume5 = 42;
    if (has_bidvolume5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume5());
    }

    // required double askprice5 = 43;
    if (has_askprice5()) {
      total_size += 2 + 8;
    }

    // required int32 askvolume5 = 44;
    if (has_askvolume5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume5());
    }

    // required double averageprice = 45;
    if (has_averageprice()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicMQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BasicMQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BasicMQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BasicMQ::MergeFrom(const BasicMQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_time_string()) {
      set_time_string(from.time_string());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_exchangeinstid()) {
      set_exchangeinstid(from.exchangeinstid());
    }
    if (from.has_lastprice()) {
      set_lastprice(from.lastprice());
    }
    if (from.has_presettlementprice()) {
      set_presettlementprice(from.presettlementprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_precloseprice()) {
      set_precloseprice(from.precloseprice());
    }
    if (from.has_preopeninterest()) {
      set_preopeninterest(from.preopeninterest());
    }
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_highestprice()) {
      set_highestprice(from.highestprice());
    }
    if (from.has_lowestprice()) {
      set_lowestprice(from.lowestprice());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_openinterest()) {
      set_openinterest(from.openinterest());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_closeprice()) {
      set_closeprice(from.closeprice());
    }
    if (from.has_settlementprice()) {
      set_settlementprice(from.settlementprice());
    }
    if (from.has_upperlimitprice()) {
      set_upperlimitprice(from.upperlimitprice());
    }
    if (from.has_lowerlimitprice()) {
      set_lowerlimitprice(from.lowerlimitprice());
    }
    if (from.has_predelta()) {
      set_predelta(from.predelta());
    }
    if (from.has_currdelta()) {
      set_currdelta(from.currdelta());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_updatemillisec()) {
      set_updatemillisec(from.updatemillisec());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_bidprice1()) {
      set_bidprice1(from.bidprice1());
    }
    if (from.has_bidvolume1()) {
      set_bidvolume1(from.bidvolume1());
    }
    if (from.has_askprice1()) {
      set_askprice1(from.askprice1());
    }
    if (from.has_askvolume1()) {
      set_askvolume1(from.askvolume1());
    }
    if (from.has_bidprice2()) {
      set_bidprice2(from.bidprice2());
    }
    if (from.has_bidvolume2()) {
      set_bidvolume2(from.bidvolume2());
    }
    if (from.has_askprice2()) {
      set_askprice2(from.askprice2());
    }
    if (from.has_askvolume2()) {
      set_askvolume2(from.askvolume2());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_bidprice3()) {
      set_bidprice3(from.bidprice3());
    }
    if (from.has_bidvolume3()) {
      set_bidvolume3(from.bidvolume3());
    }
    if (from.has_askprice3()) {
      set_askprice3(from.askprice3());
    }
    if (from.has_askvolume3()) {
      set_askvolume3(from.askvolume3());
    }
    if (from.has_bidprice4()) {
      set_bidprice4(from.bidprice4());
    }
    if (from.has_bidvolume4()) {
      set_bidvolume4(from.bidvolume4());
    }
    if (from.has_askprice4()) {
      set_askprice4(from.askprice4());
    }
    if (from.has_askvolume4()) {
      set_askvolume4(from.askvolume4());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_bidprice5()) {
      set_bidprice5(from.bidprice5());
    }
    if (from.has_bidvolume5()) {
      set_bidvolume5(from.bidvolume5());
    }
    if (from.has_askprice5()) {
      set_askprice5(from.askprice5());
    }
    if (from.has_askvolume5()) {
      set_askvolume5(from.askvolume5());
    }
    if (from.has_averageprice()) {
      set_averageprice(from.averageprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BasicMQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicMQ::CopyFrom(const BasicMQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicMQ::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void BasicMQ::Swap(BasicMQ* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(time_string_, other->time_string_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(type_, other->type_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(exchangeinstid_, other->exchangeinstid_);
    std::swap(lastprice_, other->lastprice_);
    std::swap(presettlementprice_, other->presettlementprice_);
    std::swap(precloseprice_, other->precloseprice_);
    std::swap(preopeninterest_, other->preopeninterest_);
    std::swap(openprice_, other->openprice_);
    std::swap(highestprice_, other->highestprice_);
    std::swap(lowestprice_, other->lowestprice_);
    std::swap(volume_, other->volume_);
    std::swap(turnover_, other->turnover_);
    std::swap(openinterest_, other->openinterest_);
    std::swap(closeprice_, other->closeprice_);
    std::swap(settlementprice_, other->settlementprice_);
    std::swap(upperlimitprice_, other->upperlimitprice_);
    std::swap(lowerlimitprice_, other->lowerlimitprice_);
    std::swap(predelta_, other->predelta_);
    std::swap(currdelta_, other->currdelta_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(updatemillisec_, other->updatemillisec_);
    std::swap(bidprice1_, other->bidprice1_);
    std::swap(bidvolume1_, other->bidvolume1_);
    std::swap(askprice1_, other->askprice1_);
    std::swap(askvolume1_, other->askvolume1_);
    std::swap(bidprice2_, other->bidprice2_);
    std::swap(bidvolume2_, other->bidvolume2_);
    std::swap(askprice2_, other->askprice2_);
    std::swap(askvolume2_, other->askvolume2_);
    std::swap(bidprice3_, other->bidprice3_);
    std::swap(bidvolume3_, other->bidvolume3_);
    std::swap(askprice3_, other->askprice3_);
    std::swap(askvolume3_, other->askvolume3_);
    std::swap(bidprice4_, other->bidprice4_);
    std::swap(bidvolume4_, other->bidvolume4_);
    std::swap(askprice4_, other->askprice4_);
    std::swap(askvolume4_, other->askvolume4_);
    std::swap(bidprice5_, other->bidprice5_);
    std::swap(bidvolume5_, other->bidvolume5_);
    std::swap(askprice5_, other->askprice5_);
    std::swap(askvolume5_, other->askvolume5_);
    std::swap(averageprice_, other->averageprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BasicMQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasicMQ_descriptor_;
  metadata.reflection = BasicMQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelMQ::kLevelFieldNumber;
const int LevelMQ::kTimeFieldNumber;
const int LevelMQ::kTypeFieldNumber;
const int LevelMQ::kOpenFieldNumber;
const int LevelMQ::kHighFieldNumber;
const int LevelMQ::kLowFieldNumber;
const int LevelMQ::kCloseFieldNumber;
const int LevelMQ::kCloseAsk1FieldNumber;
const int LevelMQ::kCloseBid1FieldNumber;
const int LevelMQ::kVolumnFieldNumber;
const int LevelMQ::kCounterFieldNumber;
const int LevelMQ::kTimeStringFieldNumber;
#endif  // !_MSC_VER

LevelMQ::LevelMQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevelMQ::InitAsDefaultInstance() {
}

LevelMQ::LevelMQ(const LevelMQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevelMQ::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  close_ask1_ = 0;
  close_bid1_ = 0;
  volumn_ = 0;
  counter_ = 0;
  time_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelMQ::~LevelMQ() {
  SharedDtor();
}

void LevelMQ::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (time_string_ != &::google::protobuf::internal::kEmptyString) {
    delete time_string_;
  }
  if (this != default_instance_) {
  }
}

void LevelMQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelMQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelMQ_descriptor_;
}

const LevelMQ& LevelMQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mq_5fprotomsg_2eproto();
  return *default_instance_;
}

LevelMQ* LevelMQ::default_instance_ = NULL;

LevelMQ* LevelMQ::New() const {
  return new LevelMQ;
}

void LevelMQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    open_ = 0;
    high_ = 0;
    low_ = 0;
    close_ = 0;
    close_ask1_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    close_bid1_ = 0;
    volumn_ = 0;
    counter_ = 0;
    if (has_time_string()) {
      if (time_string_ != &::google::protobuf::internal::kEmptyString) {
        time_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelMQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required int64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // required string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_open;
        break;
      }

      // required double open = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_high;
        break;
      }

      // required double high = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_low;
        break;
      }

      // required double low = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_close;
        break;
      }

      // required double close = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_close_ask1;
        break;
      }

      // required double close_ask1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_close_ask1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_ask1_)));
          set_has_close_ask1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_close_bid1;
        break;
      }

      // required double close_bid1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_close_bid1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_bid1_)));
          set_has_close_bid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_volumn;
        break;
      }

      // required int32 volumn = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volumn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumn_)));
          set_has_volumn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_counter;
        break;
      }

      // required int32 counter = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counter_)));
          set_has_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_time_string;
        break;
      }

      // required string time_string = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time_string().data(), this->time_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelMQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }

  // required double open = 4;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->open(), output);
  }

  // required double high = 5;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->high(), output);
  }

  // required double low = 6;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->low(), output);
  }

  // required double close = 7;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->close(), output);
  }

  // required double close_ask1 = 8;
  if (has_close_ask1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->close_ask1(), output);
  }

  // required double close_bid1 = 9;
  if (has_close_bid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->close_bid1(), output);
  }

  // required int32 volumn = 10;
  if (has_volumn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->volumn(), output);
  }

  // required int32 counter = 11;
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->counter(), output);
  }

  // required string time_string = 12;
  if (has_time_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_string().data(), this->time_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->time_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevelMQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // required double open = 4;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->open(), target);
  }

  // required double high = 5;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->high(), target);
  }

  // required double low = 6;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->low(), target);
  }

  // required double close = 7;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->close(), target);
  }

  // required double close_ask1 = 8;
  if (has_close_ask1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->close_ask1(), target);
  }

  // required double close_bid1 = 9;
  if (has_close_bid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->close_bid1(), target);
  }

  // required int32 volumn = 10;
  if (has_volumn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->volumn(), target);
  }

  // required int32 counter = 11;
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->counter(), target);
  }

  // required string time_string = 12;
  if (has_time_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_string().data(), this->time_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->time_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevelMQ::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required double open = 4;
    if (has_open()) {
      total_size += 1 + 8;
    }

    // required double high = 5;
    if (has_high()) {
      total_size += 1 + 8;
    }

    // required double low = 6;
    if (has_low()) {
      total_size += 1 + 8;
    }

    // required double close = 7;
    if (has_close()) {
      total_size += 1 + 8;
    }

    // required double close_ask1 = 8;
    if (has_close_ask1()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double close_bid1 = 9;
    if (has_close_bid1()) {
      total_size += 1 + 8;
    }

    // required int32 volumn = 10;
    if (has_volumn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumn());
    }

    // required int32 counter = 11;
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counter());
    }

    // required string time_string = 12;
    if (has_time_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelMQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelMQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelMQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelMQ::MergeFrom(const LevelMQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_close_ask1()) {
      set_close_ask1(from.close_ask1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_close_bid1()) {
      set_close_bid1(from.close_bid1());
    }
    if (from.has_volumn()) {
      set_volumn(from.volumn());
    }
    if (from.has_counter()) {
      set_counter(from.counter());
    }
    if (from.has_time_string()) {
      set_time_string(from.time_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelMQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelMQ::CopyFrom(const LevelMQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelMQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void LevelMQ::Swap(LevelMQ* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(close_, other->close_);
    std::swap(close_ask1_, other->close_ask1_);
    std::swap(close_bid1_, other->close_bid1_);
    std::swap(volumn_, other->volumn_);
    std::swap(counter_, other->counter_);
    std::swap(time_string_, other->time_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelMQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelMQ_descriptor_;
  metadata.reflection = LevelMQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryLevelMQ::kTableNameFieldNumber;
const int QueryLevelMQ::kTypeFieldNumber;
const int QueryLevelMQ::kStartFieldNumber;
const int QueryLevelMQ::kEndFieldNumber;
const int QueryLevelMQ::kLevelFieldNumber;
const int QueryLevelMQ::kNumberFieldNumber;
#endif  // !_MSC_VER

QueryLevelMQ::QueryLevelMQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryLevelMQ::InitAsDefaultInstance() {
}

QueryLevelMQ::QueryLevelMQ(const QueryLevelMQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryLevelMQ::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_ = GOOGLE_LONGLONG(0);
  end_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryLevelMQ::~QueryLevelMQ() {
  SharedDtor();
}

void QueryLevelMQ::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void QueryLevelMQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryLevelMQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryLevelMQ_descriptor_;
}

const QueryLevelMQ& QueryLevelMQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mq_5fprotomsg_2eproto();
  return *default_instance_;
}

QueryLevelMQ* QueryLevelMQ::default_instance_ = NULL;

QueryLevelMQ* QueryLevelMQ::New() const {
  return new QueryLevelMQ;
}

void QueryLevelMQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    start_ = GOOGLE_LONGLONG(0);
    end_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryLevelMQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start;
        break;
      }

      // required int64 start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end;
        break;
      }

      // required int64 end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_number;
        break;
      }

      // required int32 number = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryLevelMQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // required int64 start = 3;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start(), output);
  }

  // required int64 end = 4;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->end(), output);
  }

  // required int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // required int32 number = 6;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryLevelMQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required int64 start = 3;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start(), target);
  }

  // required int64 end = 4;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->end(), target);
  }

  // required int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // required int32 number = 6;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryLevelMQ::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required int64 start = 3;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start());
    }

    // required int64 end = 4;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end());
    }

    // required int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 number = 6;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryLevelMQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryLevelMQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryLevelMQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryLevelMQ::MergeFrom(const QueryLevelMQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryLevelMQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryLevelMQ::CopyFrom(const QueryLevelMQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryLevelMQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void QueryLevelMQ::Swap(QueryLevelMQ* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(type_, other->type_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(level_, other->level_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryLevelMQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryLevelMQ_descriptor_;
  metadata.reflection = QueryLevelMQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelMQTotal::kTableNameFieldNumber;
const int LevelMQTotal::kTypeFieldNumber;
const int LevelMQTotal::kLevelFieldNumber;
const int LevelMQTotal::kTotalFieldNumber;
#endif  // !_MSC_VER

LevelMQTotal::LevelMQTotal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevelMQTotal::InitAsDefaultInstance() {
}

LevelMQTotal::LevelMQTotal(const LevelMQTotal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevelMQTotal::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelMQTotal::~LevelMQTotal() {
  SharedDtor();
}

void LevelMQTotal::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void LevelMQTotal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelMQTotal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelMQTotal_descriptor_;
}

const LevelMQTotal& LevelMQTotal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mq_5fprotomsg_2eproto();
  return *default_instance_;
}

LevelMQTotal* LevelMQTotal::default_instance_ = NULL;

LevelMQTotal* LevelMQTotal::New() const {
  return new LevelMQTotal;
}

void LevelMQTotal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    level_ = 0;
    total_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelMQTotal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total;
        break;
      }

      // required int32 total = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelMQTotal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 total = 4;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevelMQTotal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 total = 4;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevelMQTotal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 total = 4;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelMQTotal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelMQTotal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelMQTotal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelMQTotal::MergeFrom(const LevelMQTotal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelMQTotal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelMQTotal::CopyFrom(const LevelMQTotal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelMQTotal::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LevelMQTotal::Swap(LevelMQTotal* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelMQTotal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelMQTotal_descriptor_;
  metadata.reflection = LevelMQTotal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BacktestingLevelMQ::kTimeFieldNumber;
const int BacktestingLevelMQ::kTimeStringFieldNumber;
const int BacktestingLevelMQ::kOpenFieldNumber;
const int BacktestingLevelMQ::kHighFieldNumber;
const int BacktestingLevelMQ::kLowFieldNumber;
const int BacktestingLevelMQ::kCloseFieldNumber;
#endif  // !_MSC_VER

BacktestingLevelMQ::BacktestingLevelMQ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BacktestingLevelMQ::InitAsDefaultInstance() {
}

BacktestingLevelMQ::BacktestingLevelMQ(const BacktestingLevelMQ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BacktestingLevelMQ::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  time_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BacktestingLevelMQ::~BacktestingLevelMQ() {
  SharedDtor();
}

void BacktestingLevelMQ::SharedDtor() {
  if (time_string_ != &::google::protobuf::internal::kEmptyString) {
    delete time_string_;
  }
  if (this != default_instance_) {
  }
}

void BacktestingLevelMQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BacktestingLevelMQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BacktestingLevelMQ_descriptor_;
}

const BacktestingLevelMQ& BacktestingLevelMQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mq_5fprotomsg_2eproto();
  return *default_instance_;
}

BacktestingLevelMQ* BacktestingLevelMQ::default_instance_ = NULL;

BacktestingLevelMQ* BacktestingLevelMQ::New() const {
  return new BacktestingLevelMQ;
}

void BacktestingLevelMQ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_time_string()) {
      if (time_string_ != &::google::protobuf::internal::kEmptyString) {
        time_string_->clear();
      }
    }
    open_ = 0;
    high_ = 0;
    low_ = 0;
    close_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BacktestingLevelMQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_time_string;
        break;
      }

      // required string time_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time_string().data(), this->time_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_open;
        break;
      }

      // required double open = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_high;
        break;
      }

      // required double high = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_low;
        break;
      }

      // required double low = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_close;
        break;
      }

      // required double close = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BacktestingLevelMQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // required string time_string = 2;
  if (has_time_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_string().data(), this->time_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->time_string(), output);
  }

  // required double open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->open(), output);
  }

  // required double high = 4;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->high(), output);
  }

  // required double low = 5;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->low(), output);
  }

  // required double close = 6;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->close(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BacktestingLevelMQ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // required string time_string = 2;
  if (has_time_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_string().data(), this->time_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time_string(), target);
  }

  // required double open = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->open(), target);
  }

  // required double high = 4;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->high(), target);
  }

  // required double low = 5;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->low(), target);
  }

  // required double close = 6;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->close(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BacktestingLevelMQ::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required string time_string = 2;
    if (has_time_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_string());
    }

    // required double open = 3;
    if (has_open()) {
      total_size += 1 + 8;
    }

    // required double high = 4;
    if (has_high()) {
      total_size += 1 + 8;
    }

    // required double low = 5;
    if (has_low()) {
      total_size += 1 + 8;
    }

    // required double close = 6;
    if (has_close()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BacktestingLevelMQ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BacktestingLevelMQ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BacktestingLevelMQ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BacktestingLevelMQ::MergeFrom(const BacktestingLevelMQ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_time_string()) {
      set_time_string(from.time_string());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BacktestingLevelMQ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BacktestingLevelMQ::CopyFrom(const BacktestingLevelMQ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BacktestingLevelMQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void BacktestingLevelMQ::Swap(BacktestingLevelMQ* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(time_string_, other->time_string_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(close_, other->close_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BacktestingLevelMQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BacktestingLevelMQ_descriptor_;
  metadata.reflection = BacktestingLevelMQ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BacktestingLevelMQList::kTableNameFieldNumber;
const int BacktestingLevelMQList::kTypeFieldNumber;
const int BacktestingLevelMQList::kLevelFieldNumber;
const int BacktestingLevelMQList::kTotalFieldNumber;
const int BacktestingLevelMQList::kIndexFieldNumber;
const int BacktestingLevelMQList::kDataFieldNumber;
#endif  // !_MSC_VER

BacktestingLevelMQList::BacktestingLevelMQList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BacktestingLevelMQList::InitAsDefaultInstance() {
}

BacktestingLevelMQList::BacktestingLevelMQList(const BacktestingLevelMQList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BacktestingLevelMQList::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  total_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BacktestingLevelMQList::~BacktestingLevelMQList() {
  SharedDtor();
}

void BacktestingLevelMQList::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void BacktestingLevelMQList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BacktestingLevelMQList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BacktestingLevelMQList_descriptor_;
}

const BacktestingLevelMQList& BacktestingLevelMQList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mq_5fprotomsg_2eproto();
  return *default_instance_;
}

BacktestingLevelMQList* BacktestingLevelMQList::default_instance_ = NULL;

BacktestingLevelMQList* BacktestingLevelMQList::New() const {
  return new BacktestingLevelMQList;
}

void BacktestingLevelMQList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    level_ = 0;
    total_ = 0;
    index_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BacktestingLevelMQList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total;
        break;
      }

      // required int32 total = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // required int32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // repeated .ctp.mq.BacktestingLevelMQ data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BacktestingLevelMQList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 total = 4;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total(), output);
  }

  // required int32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index(), output);
  }

  // repeated .ctp.mq.BacktestingLevelMQ data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BacktestingLevelMQList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 total = 4;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total(), target);
  }

  // required int32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->index(), target);
  }

  // repeated .ctp.mq.BacktestingLevelMQ data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BacktestingLevelMQList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 total = 4;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // required int32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated .ctp.mq.BacktestingLevelMQ data = 6;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BacktestingLevelMQList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BacktestingLevelMQList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BacktestingLevelMQList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BacktestingLevelMQList::MergeFrom(const BacktestingLevelMQList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BacktestingLevelMQList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BacktestingLevelMQList::CopyFrom(const BacktestingLevelMQList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BacktestingLevelMQList::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void BacktestingLevelMQList::Swap(BacktestingLevelMQList* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(total_, other->total_);
    std::swap(index_, other->index_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BacktestingLevelMQList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BacktestingLevelMQList_descriptor_;
  metadata.reflection = BacktestingLevelMQList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BacktestingLevelMQ2::kTimeFieldNumber;
const int BacktestingLevelMQ2::kTimeStringFieldNumber;
const int BacktestingLevelMQ2::kOpenFieldNumber;
const int BacktestingLevelMQ2::kHighFieldNumber;
const int BacktestingLevelMQ2::kLowFieldNumber;
const int BacktestingLevelMQ2::kCloseFieldNumber;
const int BacktestingLevelMQ2::kNextLevelMqIndexFieldNumber;
#endif  // !_MSC_VER

BacktestingLevelMQ2::BacktestingLevelMQ2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BacktestingLevelMQ2::InitAsDefaultInstance() {
}

BacktestingLevelMQ2::BacktestingLevelMQ2(const BacktestingLevelMQ2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BacktestingLevelMQ2::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  time_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  next_level_mq_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BacktestingLevelMQ2::~BacktestingLevelMQ2() {
  SharedDtor();
}

void BacktestingLevelMQ2::SharedDtor() {
  if (time_string_ != &::google::protobuf::internal::kEmptyString) {
    delete time_string_;
  }
  if (this != default_instance_) {
  }
}

void BacktestingLevelMQ2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BacktestingLevelMQ2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BacktestingLevelMQ2_descriptor_;
}

const BacktestingLevelMQ2& BacktestingLevelMQ2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mq_5fprotomsg_2eproto();
  return *default_instance_;
}

BacktestingLevelMQ2* BacktestingLevelMQ2::default_instance_ = NULL;

BacktestingLevelMQ2* BacktestingLevelMQ2::New() const {
  return new BacktestingLevelMQ2;
}

void BacktestingLevelMQ2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_time_string()) {
      if (time_string_ != &::google::protobuf::internal::kEmptyString) {
        time_string_->clear();
      }
    }
    open_ = 0;
    high_ = 0;
    low_ = 0;
    close_ = 0;
    next_level_mq_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BacktestingLevelMQ2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_time_string;
        break;
      }

      // required string time_string = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time_string().data(), this->time_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_open;
        break;
      }

      // required double open = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_high;
        break;
      }

      // required double high = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_low;
        break;
      }

      // required double low = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_close;
        break;
      }

      // required double close = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_next_level_mq_index;
        break;
      }

      // required int32 next_level_mq_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_level_mq_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_level_mq_index_)));
          set_has_next_level_mq_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BacktestingLevelMQ2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // required string time_string = 2;
  if (has_time_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_string().data(), this->time_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->time_string(), output);
  }

  // required double open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->open(), output);
  }

  // required double high = 4;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->high(), output);
  }

  // required double low = 5;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->low(), output);
  }

  // required double close = 6;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->close(), output);
  }

  // required int32 next_level_mq_index = 7;
  if (has_next_level_mq_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->next_level_mq_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BacktestingLevelMQ2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // required string time_string = 2;
  if (has_time_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time_string().data(), this->time_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time_string(), target);
  }

  // required double open = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->open(), target);
  }

  // required double high = 4;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->high(), target);
  }

  // required double low = 5;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->low(), target);
  }

  // required double close = 6;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->close(), target);
  }

  // required int32 next_level_mq_index = 7;
  if (has_next_level_mq_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->next_level_mq_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BacktestingLevelMQ2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required string time_string = 2;
    if (has_time_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_string());
    }

    // required double open = 3;
    if (has_open()) {
      total_size += 1 + 8;
    }

    // required double high = 4;
    if (has_high()) {
      total_size += 1 + 8;
    }

    // required double low = 5;
    if (has_low()) {
      total_size += 1 + 8;
    }

    // required double close = 6;
    if (has_close()) {
      total_size += 1 + 8;
    }

    // required int32 next_level_mq_index = 7;
    if (has_next_level_mq_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_level_mq_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BacktestingLevelMQ2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BacktestingLevelMQ2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BacktestingLevelMQ2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BacktestingLevelMQ2::MergeFrom(const BacktestingLevelMQ2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_time_string()) {
      set_time_string(from.time_string());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_next_level_mq_index()) {
      set_next_level_mq_index(from.next_level_mq_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BacktestingLevelMQ2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BacktestingLevelMQ2::CopyFrom(const BacktestingLevelMQ2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BacktestingLevelMQ2::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void BacktestingLevelMQ2::Swap(BacktestingLevelMQ2* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(time_string_, other->time_string_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(close_, other->close_);
    std::swap(next_level_mq_index_, other->next_level_mq_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BacktestingLevelMQ2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BacktestingLevelMQ2_descriptor_;
  metadata.reflection = BacktestingLevelMQ2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BacktestingLevelMQList2::kTableNameFieldNumber;
const int BacktestingLevelMQList2::kTypeFieldNumber;
const int BacktestingLevelMQList2::kLevelFieldNumber;
const int BacktestingLevelMQList2::kTotalFieldNumber;
const int BacktestingLevelMQList2::kIndexFieldNumber;
const int BacktestingLevelMQList2::kDataFieldNumber;
#endif  // !_MSC_VER

BacktestingLevelMQList2::BacktestingLevelMQList2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BacktestingLevelMQList2::InitAsDefaultInstance() {
}

BacktestingLevelMQList2::BacktestingLevelMQList2(const BacktestingLevelMQList2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BacktestingLevelMQList2::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  total_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BacktestingLevelMQList2::~BacktestingLevelMQList2() {
  SharedDtor();
}

void BacktestingLevelMQList2::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void BacktestingLevelMQList2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BacktestingLevelMQList2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BacktestingLevelMQList2_descriptor_;
}

const BacktestingLevelMQList2& BacktestingLevelMQList2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mq_5fprotomsg_2eproto();
  return *default_instance_;
}

BacktestingLevelMQList2* BacktestingLevelMQList2::default_instance_ = NULL;

BacktestingLevelMQList2* BacktestingLevelMQList2::New() const {
  return new BacktestingLevelMQList2;
}

void BacktestingLevelMQList2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    level_ = 0;
    total_ = 0;
    index_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BacktestingLevelMQList2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total;
        break;
      }

      // required int32 total = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // required int32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // repeated .ctp.mq.BacktestingLevelMQ2 data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BacktestingLevelMQList2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 total = 4;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total(), output);
  }

  // required int32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index(), output);
  }

  // repeated .ctp.mq.BacktestingLevelMQ2 data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BacktestingLevelMQList2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 total = 4;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total(), target);
  }

  // required int32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->index(), target);
  }

  // repeated .ctp.mq.BacktestingLevelMQ2 data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BacktestingLevelMQList2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 total = 4;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // required int32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated .ctp.mq.BacktestingLevelMQ2 data = 6;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BacktestingLevelMQList2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BacktestingLevelMQList2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BacktestingLevelMQList2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BacktestingLevelMQList2::MergeFrom(const BacktestingLevelMQList2& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BacktestingLevelMQList2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BacktestingLevelMQList2::CopyFrom(const BacktestingLevelMQList2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BacktestingLevelMQList2::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void BacktestingLevelMQList2::Swap(BacktestingLevelMQList2* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(total_, other->total_);
    std::swap(index_, other->index_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BacktestingLevelMQList2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BacktestingLevelMQList2_descriptor_;
  metadata.reflection = BacktestingLevelMQList2_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mq
}  // namespace ctp

// @@protoc_insertion_point(global_scope)
