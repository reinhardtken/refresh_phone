// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guard_comunication.proto

#ifndef PROTOBUF_guard_5fcomunication_2eproto__INCLUDED
#define PROTOBUF_guard_5fcomunication_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ctp {
namespace guard {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_guard_5fcomunication_2eproto();
void protobuf_AssignDesc_guard_5fcomunication_2eproto();
void protobuf_ShutdownFile_guard_5fcomunication_2eproto();

class ReportPid;
class CommonCmd;

// ===================================================================

class ReportPid : public ::google::protobuf::Message {
 public:
  ReportPid();
  virtual ~ReportPid();

  ReportPid(const ReportPid& from);

  inline ReportPid& operator=(const ReportPid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportPid& default_instance();

  void Swap(ReportPid* other);

  // implements Message ----------------------------------------------

  ReportPid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportPid& from);
  void MergeFrom(const ReportPid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 process_id = 1;
  inline bool has_process_id() const;
  inline void clear_process_id();
  static const int kProcessIdFieldNumber = 1;
  inline ::google::protobuf::int32 process_id() const;
  inline void set_process_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ctp.guard.ReportPid)
 private:
  inline void set_has_process_id();
  inline void clear_has_process_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 process_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_guard_5fcomunication_2eproto();
  friend void protobuf_AssignDesc_guard_5fcomunication_2eproto();
  friend void protobuf_ShutdownFile_guard_5fcomunication_2eproto();

  void InitAsDefaultInstance();
  static ReportPid* default_instance_;
};
// -------------------------------------------------------------------

class CommonCmd : public ::google::protobuf::Message {
 public:
  CommonCmd();
  virtual ~CommonCmd();

  CommonCmd(const CommonCmd& from);

  inline CommonCmd& operator=(const CommonCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonCmd& default_instance();

  void Swap(CommonCmd* other);

  // implements Message ----------------------------------------------

  CommonCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonCmd& from);
  void MergeFrom(const CommonCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string str1 = 1;
  inline bool has_str1() const;
  inline void clear_str1();
  static const int kStr1FieldNumber = 1;
  inline const ::std::string& str1() const;
  inline void set_str1(const ::std::string& value);
  inline void set_str1(const char* value);
  inline void set_str1(const char* value, size_t size);
  inline ::std::string* mutable_str1();
  inline ::std::string* release_str1();
  inline void set_allocated_str1(::std::string* str1);

  // required string str2 = 2;
  inline bool has_str2() const;
  inline void clear_str2();
  static const int kStr2FieldNumber = 2;
  inline const ::std::string& str2() const;
  inline void set_str2(const ::std::string& value);
  inline void set_str2(const char* value);
  inline void set_str2(const char* value, size_t size);
  inline ::std::string* mutable_str2();
  inline ::std::string* release_str2();
  inline void set_allocated_str2(::std::string* str2);

  // required string str3 = 3;
  inline bool has_str3() const;
  inline void clear_str3();
  static const int kStr3FieldNumber = 3;
  inline const ::std::string& str3() const;
  inline void set_str3(const ::std::string& value);
  inline void set_str3(const char* value);
  inline void set_str3(const char* value, size_t size);
  inline ::std::string* mutable_str3();
  inline ::std::string* release_str3();
  inline void set_allocated_str3(::std::string* str3);

  // required string str4 = 4;
  inline bool has_str4() const;
  inline void clear_str4();
  static const int kStr4FieldNumber = 4;
  inline const ::std::string& str4() const;
  inline void set_str4(const ::std::string& value);
  inline void set_str4(const char* value);
  inline void set_str4(const char* value, size_t size);
  inline ::std::string* mutable_str4();
  inline ::std::string* release_str4();
  inline void set_allocated_str4(::std::string* str4);

  // @@protoc_insertion_point(class_scope:ctp.guard.CommonCmd)
 private:
  inline void set_has_str1();
  inline void clear_has_str1();
  inline void set_has_str2();
  inline void clear_has_str2();
  inline void set_has_str3();
  inline void clear_has_str3();
  inline void set_has_str4();
  inline void clear_has_str4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* str1_;
  ::std::string* str2_;
  ::std::string* str3_;
  ::std::string* str4_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_guard_5fcomunication_2eproto();
  friend void protobuf_AssignDesc_guard_5fcomunication_2eproto();
  friend void protobuf_ShutdownFile_guard_5fcomunication_2eproto();

  void InitAsDefaultInstance();
  static CommonCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// ReportPid

// required int32 process_id = 1;
inline bool ReportPid::has_process_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportPid::set_has_process_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportPid::clear_has_process_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportPid::clear_process_id() {
  process_id_ = 0;
  clear_has_process_id();
}
inline ::google::protobuf::int32 ReportPid::process_id() const {
  return process_id_;
}
inline void ReportPid::set_process_id(::google::protobuf::int32 value) {
  set_has_process_id();
  process_id_ = value;
}

// -------------------------------------------------------------------

// CommonCmd

// required string str1 = 1;
inline bool CommonCmd::has_str1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonCmd::set_has_str1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonCmd::clear_has_str1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonCmd::clear_str1() {
  if (str1_ != &::google::protobuf::internal::kEmptyString) {
    str1_->clear();
  }
  clear_has_str1();
}
inline const ::std::string& CommonCmd::str1() const {
  return *str1_;
}
inline void CommonCmd::set_str1(const ::std::string& value) {
  set_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    str1_ = new ::std::string;
  }
  str1_->assign(value);
}
inline void CommonCmd::set_str1(const char* value) {
  set_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    str1_ = new ::std::string;
  }
  str1_->assign(value);
}
inline void CommonCmd::set_str1(const char* value, size_t size) {
  set_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    str1_ = new ::std::string;
  }
  str1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonCmd::mutable_str1() {
  set_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    str1_ = new ::std::string;
  }
  return str1_;
}
inline ::std::string* CommonCmd::release_str1() {
  clear_has_str1();
  if (str1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str1_;
    str1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommonCmd::set_allocated_str1(::std::string* str1) {
  if (str1_ != &::google::protobuf::internal::kEmptyString) {
    delete str1_;
  }
  if (str1) {
    set_has_str1();
    str1_ = str1;
  } else {
    clear_has_str1();
    str1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string str2 = 2;
inline bool CommonCmd::has_str2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonCmd::set_has_str2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonCmd::clear_has_str2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonCmd::clear_str2() {
  if (str2_ != &::google::protobuf::internal::kEmptyString) {
    str2_->clear();
  }
  clear_has_str2();
}
inline const ::std::string& CommonCmd::str2() const {
  return *str2_;
}
inline void CommonCmd::set_str2(const ::std::string& value) {
  set_has_str2();
  if (str2_ == &::google::protobuf::internal::kEmptyString) {
    str2_ = new ::std::string;
  }
  str2_->assign(value);
}
inline void CommonCmd::set_str2(const char* value) {
  set_has_str2();
  if (str2_ == &::google::protobuf::internal::kEmptyString) {
    str2_ = new ::std::string;
  }
  str2_->assign(value);
}
inline void CommonCmd::set_str2(const char* value, size_t size) {
  set_has_str2();
  if (str2_ == &::google::protobuf::internal::kEmptyString) {
    str2_ = new ::std::string;
  }
  str2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonCmd::mutable_str2() {
  set_has_str2();
  if (str2_ == &::google::protobuf::internal::kEmptyString) {
    str2_ = new ::std::string;
  }
  return str2_;
}
inline ::std::string* CommonCmd::release_str2() {
  clear_has_str2();
  if (str2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str2_;
    str2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommonCmd::set_allocated_str2(::std::string* str2) {
  if (str2_ != &::google::protobuf::internal::kEmptyString) {
    delete str2_;
  }
  if (str2) {
    set_has_str2();
    str2_ = str2;
  } else {
    clear_has_str2();
    str2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string str3 = 3;
inline bool CommonCmd::has_str3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonCmd::set_has_str3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonCmd::clear_has_str3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonCmd::clear_str3() {
  if (str3_ != &::google::protobuf::internal::kEmptyString) {
    str3_->clear();
  }
  clear_has_str3();
}
inline const ::std::string& CommonCmd::str3() const {
  return *str3_;
}
inline void CommonCmd::set_str3(const ::std::string& value) {
  set_has_str3();
  if (str3_ == &::google::protobuf::internal::kEmptyString) {
    str3_ = new ::std::string;
  }
  str3_->assign(value);
}
inline void CommonCmd::set_str3(const char* value) {
  set_has_str3();
  if (str3_ == &::google::protobuf::internal::kEmptyString) {
    str3_ = new ::std::string;
  }
  str3_->assign(value);
}
inline void CommonCmd::set_str3(const char* value, size_t size) {
  set_has_str3();
  if (str3_ == &::google::protobuf::internal::kEmptyString) {
    str3_ = new ::std::string;
  }
  str3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonCmd::mutable_str3() {
  set_has_str3();
  if (str3_ == &::google::protobuf::internal::kEmptyString) {
    str3_ = new ::std::string;
  }
  return str3_;
}
inline ::std::string* CommonCmd::release_str3() {
  clear_has_str3();
  if (str3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str3_;
    str3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommonCmd::set_allocated_str3(::std::string* str3) {
  if (str3_ != &::google::protobuf::internal::kEmptyString) {
    delete str3_;
  }
  if (str3) {
    set_has_str3();
    str3_ = str3;
  } else {
    clear_has_str3();
    str3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string str4 = 4;
inline bool CommonCmd::has_str4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonCmd::set_has_str4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommonCmd::clear_has_str4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommonCmd::clear_str4() {
  if (str4_ != &::google::protobuf::internal::kEmptyString) {
    str4_->clear();
  }
  clear_has_str4();
}
inline const ::std::string& CommonCmd::str4() const {
  return *str4_;
}
inline void CommonCmd::set_str4(const ::std::string& value) {
  set_has_str4();
  if (str4_ == &::google::protobuf::internal::kEmptyString) {
    str4_ = new ::std::string;
  }
  str4_->assign(value);
}
inline void CommonCmd::set_str4(const char* value) {
  set_has_str4();
  if (str4_ == &::google::protobuf::internal::kEmptyString) {
    str4_ = new ::std::string;
  }
  str4_->assign(value);
}
inline void CommonCmd::set_str4(const char* value, size_t size) {
  set_has_str4();
  if (str4_ == &::google::protobuf::internal::kEmptyString) {
    str4_ = new ::std::string;
  }
  str4_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonCmd::mutable_str4() {
  set_has_str4();
  if (str4_ == &::google::protobuf::internal::kEmptyString) {
    str4_ = new ::std::string;
  }
  return str4_;
}
inline ::std::string* CommonCmd::release_str4() {
  clear_has_str4();
  if (str4_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str4_;
    str4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommonCmd::set_allocated_str4(::std::string* str4) {
  if (str4_ != &::google::protobuf::internal::kEmptyString) {
    delete str4_;
  }
  if (str4) {
    set_has_str4();
    str4_ = str4;
  } else {
    clear_has_str4();
    str4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace guard
}  // namespace ctp

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_guard_5fcomunication_2eproto__INCLUDED
