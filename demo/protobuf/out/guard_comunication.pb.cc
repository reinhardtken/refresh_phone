// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guard_comunication.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "guard_comunication.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ctp {
namespace guard {

namespace {

const ::google::protobuf::Descriptor* ReportPid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportPid_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonCmd_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_guard_5fcomunication_2eproto() {
  protobuf_AddDesc_guard_5fcomunication_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "guard_comunication.proto");
  GOOGLE_CHECK(file != NULL);
  ReportPid_descriptor_ = file->message_type(0);
  static const int ReportPid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPid, process_id_),
  };
  ReportPid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportPid_descriptor_,
      ReportPid::default_instance_,
      ReportPid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportPid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportPid));
  CommonCmd_descriptor_ = file->message_type(1);
  static const int CommonCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonCmd, str1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonCmd, str2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonCmd, str3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonCmd, str4_),
  };
  CommonCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonCmd_descriptor_,
      CommonCmd::default_instance_,
      CommonCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonCmd));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_guard_5fcomunication_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportPid_descriptor_, &ReportPid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonCmd_descriptor_, &CommonCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_guard_5fcomunication_2eproto() {
  delete ReportPid::default_instance_;
  delete ReportPid_reflection_;
  delete CommonCmd::default_instance_;
  delete CommonCmd_reflection_;
}

void protobuf_AddDesc_guard_5fcomunication_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030guard_comunication.proto\022\tctp.guard\"\037\n"
    "\tReportPid\022\022\n\nprocess_id\030\001 \002(\005\"C\n\tCommon"
    "Cmd\022\014\n\004str1\030\001 \002(\t\022\014\n\004str2\030\002 \002(\t\022\014\n\004str3\030"
    "\003 \002(\t\022\014\n\004str4\030\004 \002(\t", 139);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "guard_comunication.proto", &protobuf_RegisterTypes);
  ReportPid::default_instance_ = new ReportPid();
  CommonCmd::default_instance_ = new CommonCmd();
  ReportPid::default_instance_->InitAsDefaultInstance();
  CommonCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_guard_5fcomunication_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_guard_5fcomunication_2eproto {
  StaticDescriptorInitializer_guard_5fcomunication_2eproto() {
    protobuf_AddDesc_guard_5fcomunication_2eproto();
  }
} static_descriptor_initializer_guard_5fcomunication_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReportPid::kProcessIdFieldNumber;
#endif  // !_MSC_VER

ReportPid::ReportPid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportPid::InitAsDefaultInstance() {
}

ReportPid::ReportPid(const ReportPid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportPid::SharedCtor() {
  _cached_size_ = 0;
  process_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportPid::~ReportPid() {
  SharedDtor();
}

void ReportPid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportPid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportPid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportPid_descriptor_;
}

const ReportPid& ReportPid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guard_5fcomunication_2eproto();
  return *default_instance_;
}

ReportPid* ReportPid::default_instance_ = NULL;

ReportPid* ReportPid::New() const {
  return new ReportPid;
}

void ReportPid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    process_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportPid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 process_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &process_id_)));
          set_has_process_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportPid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 process_id = 1;
  if (has_process_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->process_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportPid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 process_id = 1;
  if (has_process_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->process_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportPid::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 process_id = 1;
    if (has_process_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->process_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportPid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportPid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportPid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportPid::MergeFrom(const ReportPid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_process_id()) {
      set_process_id(from.process_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportPid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportPid::CopyFrom(const ReportPid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportPid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReportPid::Swap(ReportPid* other) {
  if (other != this) {
    std::swap(process_id_, other->process_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportPid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportPid_descriptor_;
  metadata.reflection = ReportPid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonCmd::kStr1FieldNumber;
const int CommonCmd::kStr2FieldNumber;
const int CommonCmd::kStr3FieldNumber;
const int CommonCmd::kStr4FieldNumber;
#endif  // !_MSC_VER

CommonCmd::CommonCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonCmd::InitAsDefaultInstance() {
}

CommonCmd::CommonCmd(const CommonCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonCmd::SharedCtor() {
  _cached_size_ = 0;
  str1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonCmd::~CommonCmd() {
  SharedDtor();
}

void CommonCmd::SharedDtor() {
  if (str1_ != &::google::protobuf::internal::kEmptyString) {
    delete str1_;
  }
  if (str2_ != &::google::protobuf::internal::kEmptyString) {
    delete str2_;
  }
  if (str3_ != &::google::protobuf::internal::kEmptyString) {
    delete str3_;
  }
  if (str4_ != &::google::protobuf::internal::kEmptyString) {
    delete str4_;
  }
  if (this != default_instance_) {
  }
}

void CommonCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonCmd_descriptor_;
}

const CommonCmd& CommonCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guard_5fcomunication_2eproto();
  return *default_instance_;
}

CommonCmd* CommonCmd::default_instance_ = NULL;

CommonCmd* CommonCmd::New() const {
  return new CommonCmd;
}

void CommonCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str1()) {
      if (str1_ != &::google::protobuf::internal::kEmptyString) {
        str1_->clear();
      }
    }
    if (has_str2()) {
      if (str2_ != &::google::protobuf::internal::kEmptyString) {
        str2_->clear();
      }
    }
    if (has_str3()) {
      if (str3_ != &::google::protobuf::internal::kEmptyString) {
        str3_->clear();
      }
    }
    if (has_str4()) {
      if (str4_ != &::google::protobuf::internal::kEmptyString) {
        str4_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str1().data(), this->str1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str2;
        break;
      }

      // required string str2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str2().data(), this->str2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_str3;
        break;
      }

      // required string str3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str3().data(), this->str3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_str4;
        break;
      }

      // required string str4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str4().data(), this->str4().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string str1 = 1;
  if (has_str1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str1().data(), this->str1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str1(), output);
  }

  // required string str2 = 2;
  if (has_str2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str2().data(), this->str2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str2(), output);
  }

  // required string str3 = 3;
  if (has_str3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str3().data(), this->str3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->str3(), output);
  }

  // required string str4 = 4;
  if (has_str4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str4().data(), this->str4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->str4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string str1 = 1;
  if (has_str1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str1().data(), this->str1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str1(), target);
  }

  // required string str2 = 2;
  if (has_str2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str2().data(), this->str2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str2(), target);
  }

  // required string str3 = 3;
  if (has_str3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str3().data(), this->str3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->str3(), target);
  }

  // required string str4 = 4;
  if (has_str4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str4().data(), this->str4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string str1 = 1;
    if (has_str1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str1());
    }

    // required string str2 = 2;
    if (has_str2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str2());
    }

    // required string str3 = 3;
    if (has_str3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str3());
    }

    // required string str4 = 4;
    if (has_str4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonCmd::MergeFrom(const CommonCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str1()) {
      set_str1(from.str1());
    }
    if (from.has_str2()) {
      set_str2(from.str2());
    }
    if (from.has_str3()) {
      set_str3(from.str3());
    }
    if (from.has_str4()) {
      set_str4(from.str4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonCmd::CopyFrom(const CommonCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CommonCmd::Swap(CommonCmd* other) {
  if (other != this) {
    std::swap(str1_, other->str1_);
    std::swap(str2_, other->str2_);
    std::swap(str3_, other->str3_);
    std::swap(str4_, other->str4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonCmd_descriptor_;
  metadata.reflection = CommonCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace guard
}  // namespace ctp

// @@protoc_insertion_point(global_scope)
